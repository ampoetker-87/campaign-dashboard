{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar script_v1;\n\n(function (script_v1) {\n  /**\n   * Apps Script API\n   *\n   * Manages and executes Google Apps Script projects.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const script = google.script('v1');\n   *\n   * @namespace script\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Script\n   */\n  var Script = function Script(options, google) {\n    _classCallCheck(this, Script);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.processes = new Resource$Processes(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.scripts = new Resource$Scripts(this.context);\n  };\n\n  script_v1.Script = Script;\n\n  var Resource$Processes = /*#__PURE__*/function () {\n    function Resource$Processes(context) {\n      _classCallCheck(this, Resource$Processes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Processes, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/processes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listScriptProcesses\",\n      value: function listScriptProcesses(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/processes:listScriptProcesses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Processes;\n  }();\n\n  script_v1.Resource$Processes = Resource$Processes;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n      this.deployments = new Resource$Projects$Deployments(this.context);\n      this.versions = new Resource$Projects$Versions(this.context);\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['scriptId'],\n          pathParams: ['scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getContent\",\n      value: function getContent(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/content').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['scriptId'],\n          pathParams: ['scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getMetrics\",\n      value: function getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['scriptId'],\n          pathParams: ['scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateContent\",\n      value: function updateContent(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/content').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['scriptId'],\n          pathParams: ['scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  script_v1.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Deployments = /*#__PURE__*/function () {\n    function Resource$Projects$Deployments(context) {\n      _classCallCheck(this, Resource$Projects$Deployments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Deployments, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['scriptId'],\n          pathParams: ['scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/deployments/{deploymentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['scriptId', 'deploymentId'],\n          pathParams: ['deploymentId', 'scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/deployments/{deploymentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['scriptId', 'deploymentId'],\n          pathParams: ['deploymentId', 'scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['scriptId'],\n          pathParams: ['scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/deployments/{deploymentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['scriptId', 'deploymentId'],\n          pathParams: ['deploymentId', 'scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Deployments;\n  }();\n\n  script_v1.Resource$Projects$Deployments = Resource$Projects$Deployments;\n\n  var Resource$Projects$Versions = /*#__PURE__*/function () {\n    function Resource$Projects$Versions(context) {\n      _classCallCheck(this, Resource$Projects$Versions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Versions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['scriptId'],\n          pathParams: ['scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/versions/{versionNumber}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['scriptId', 'versionNumber'],\n          pathParams: ['scriptId', 'versionNumber'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{scriptId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['scriptId'],\n          pathParams: ['scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Versions;\n  }();\n\n  script_v1.Resource$Projects$Versions = Resource$Projects$Versions;\n\n  var Resource$Scripts = /*#__PURE__*/function () {\n    function Resource$Scripts(context) {\n      _classCallCheck(this, Resource$Scripts);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Scripts, [{\n      key: \"run\",\n      value: function run(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/scripts/{scriptId}:run').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['scriptId'],\n          pathParams: ['scriptId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Scripts;\n  }();\n\n  script_v1.Resource$Scripts = Resource$Scripts;\n})(script_v1 = exports.script_v1 || (exports.script_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/script/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","script_v1","Script","options","google","context","_options","processes","Resource$Processes","projects","Resource$Projects","scripts","Resource$Scripts","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","deployments","Resource$Projects$Deployments","versions","Resource$Projects$Versions"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar script_v1;\n(function (script_v1) {\n    /**\n     * Apps Script API\n     *\n     * Manages and executes Google Apps Script projects.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const script = google.script('v1');\n     *\n     * @namespace script\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Script\n     */\n    class Script {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.processes = new Resource$Processes(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.scripts = new Resource$Scripts(this.context);\n        }\n    }\n    script_v1.Script = Script;\n    class Resource$Processes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/processes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listScriptProcesses(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/processes:listScriptProcesses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    script_v1.Resource$Processes = Resource$Processes;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.deployments = new Resource$Projects$Deployments(this.context);\n            this.versions = new Resource$Projects$Versions(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{scriptId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['scriptId'],\n                pathParams: ['scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{scriptId}/content')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['scriptId'],\n                pathParams: ['scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{scriptId}/metrics')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['scriptId'],\n                pathParams: ['scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{scriptId}/content')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['scriptId'],\n                pathParams: ['scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    script_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Deployments {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{scriptId}/deployments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['scriptId'],\n                pathParams: ['scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/projects/{scriptId}/deployments/{deploymentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['scriptId', 'deploymentId'],\n                pathParams: ['deploymentId', 'scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/projects/{scriptId}/deployments/{deploymentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['scriptId', 'deploymentId'],\n                pathParams: ['deploymentId', 'scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{scriptId}/deployments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['scriptId'],\n                pathParams: ['scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/projects/{scriptId}/deployments/{deploymentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['scriptId', 'deploymentId'],\n                pathParams: ['deploymentId', 'scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    script_v1.Resource$Projects$Deployments = Resource$Projects$Deployments;\n    class Resource$Projects$Versions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{scriptId}/versions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['scriptId'],\n                pathParams: ['scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{scriptId}/versions/{versionNumber}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['scriptId', 'versionNumber'],\n                pathParams: ['scriptId', 'versionNumber'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{scriptId}/versions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['scriptId'],\n                pathParams: ['scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    script_v1.Resource$Projects$Versions = Resource$Projects$Versions;\n    class Resource$Scripts {\n        constructor(context) {\n            this.context = context;\n        }\n        run(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://script.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/scripts/{scriptId}:run')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['scriptId'],\n                pathParams: ['scriptId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    script_v1.Resource$Scripts = Resource$Scripts;\n})(script_v1 = exports.script_v1 || (exports.script_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}