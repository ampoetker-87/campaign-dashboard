{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gcpMetadata = require(\"gcp-metadata\");\n\nvar messages = require(\"../messages\");\n\nvar oauth2client_1 = require(\"./oauth2client\");\n\nvar Compute = /*#__PURE__*/function (_oauth2client_1$OAuth) {\n  _inherits(Compute, _oauth2client_1$OAuth);\n\n  var _super = _createSuper(Compute);\n\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  function Compute() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Compute);\n\n    _this = _super.call(this, options); // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    _this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    _this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    return _this;\n  }\n  /**\n   * Indicates whether the credential requires scopes to be created by calling\n   * createdScoped before use.\n   * @deprecated\n   * @return Boolean indicating if scope is required.\n   */\n\n\n  _createClass(Compute, [{\n    key: \"createScopedRequired\",\n    value: function createScopedRequired() {\n      // On compute engine, scopes are specified at the compute instance's\n      // creation time, and cannot be changed. For this reason, always return\n      // false.\n      messages.warn(messages.COMPUTE_CREATE_SCOPED_DEPRECATED);\n      return false;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n\n  }, {\n    key: \"refreshTokenNoCache\",\n    value: function refreshTokenNoCache(refreshToken) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var tokenPath, data, tokens;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                tokenPath = \"service-accounts/\".concat(this.serviceAccountEmail, \"/token\");\n                _context.prev = 1;\n                _context.next = 4;\n                return gcpMetadata.instance(tokenPath);\n\n              case 4:\n                data = _context.sent;\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                _context.t0.message = 'Could not refresh access token.';\n                throw _context.t0;\n\n              case 11:\n                tokens = data;\n\n                if (data && data.expires_in) {\n                  tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n                  delete tokens.expires_in;\n                }\n\n                this.emit('tokens', tokens);\n                return _context.abrupt(\"return\", {\n                  tokens,\n                  res: null\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n    }\n  }, {\n    key: \"requestAsync\",\n    value: function requestAsync(opts) {\n      var retry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return _get(_getPrototypeOf(Compute.prototype), \"requestAsync\", this).call(this, opts, retry).catch(function (e) {\n        var res = e.response;\n\n        if (res && res.status) {\n          var helpfulMessage = null;\n\n          if (res.status === 403) {\n            helpfulMessage = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified.';\n          } else if (res.status === 404) {\n            helpfulMessage = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified.';\n          }\n\n          if (helpfulMessage) {\n            if (e && e.message && !retry) {\n              helpfulMessage += ' ' + e.message;\n            }\n\n            if (e) {\n              e.message = helpfulMessage;\n            } else {\n              e = new Error(helpfulMessage);\n              e.code = res.status.toString();\n            }\n          }\n        }\n\n        throw e;\n      });\n    }\n  }]);\n\n  return Compute;\n}(oauth2client_1.OAuth2Client);\n\nexports.Compute = Compute;","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/google-auth-library/build/src/auth/computeclient.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","gcpMetadata","require","messages","oauth2client_1","Compute","options","credentials","expiry_date","refresh_token","serviceAccountEmail","warn","COMPUTE_CREATE_SCOPED_DEPRECATED","refreshToken","tokenPath","instance","data","message","tokens","expires_in","Date","getTime","emit","res","opts","retry","catch","response","status","helpfulMessage","Error","code","toString","OAuth2Client"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gcpMetadata = require(\"gcp-metadata\");\nconst messages = require(\"../messages\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options = {}) {\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { expiry_date: 1, refresh_token: 'compute-placeholder' };\n        this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createdScoped before use.\n     * @deprecated\n     * @return Boolean indicating if scope is required.\n     */\n    createScopedRequired() {\n        // On compute engine, scopes are specified at the compute instance's\n        // creation time, and cannot be changed. For this reason, always return\n        // false.\n        messages.warn(messages.COMPUTE_CREATE_SCOPED_DEPRECATED);\n        return false;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    refreshTokenNoCache(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n            let data;\n            try {\n                data = yield gcpMetadata.instance(tokenPath);\n            }\n            catch (e) {\n                e.message = 'Could not refresh access token.';\n                throw e;\n            }\n            const tokens = data;\n            if (data && data.expires_in) {\n                tokens.expiry_date = ((new Date()).getTime() + (data.expires_in * 1000));\n                delete tokens.expires_in;\n            }\n            this.emit('tokens', tokens);\n            return { tokens, res: null };\n        });\n    }\n    requestAsync(opts, retry = false) {\n        return super.requestAsync(opts, retry).catch(e => {\n            const res = e.response;\n            if (res && res.status) {\n                let helpfulMessage = null;\n                if (res.status === 403) {\n                    helpfulMessage =\n                        'A Forbidden error was returned while attempting to retrieve an access ' +\n                            'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                            'Engine instance does not have the correct permission scopes specified.';\n                }\n                else if (res.status === 404) {\n                    helpfulMessage =\n                        'A Not Found error was returned while attempting to retrieve an access' +\n                            'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                            'Engine instance does not have any permission scopes specified.';\n                }\n                if (helpfulMessage) {\n                    if (e && e.message && !retry) {\n                        helpfulMessage += ' ' + e.message;\n                    }\n                    if (e) {\n                        e.message = helpfulMessage;\n                    }\n                    else {\n                        e = new Error(helpfulMessage);\n                        e.code = res.status.toString();\n                    }\n                }\n            }\n            throw e;\n        });\n    }\n}\nexports.Compute = Compute;\n//# sourceMappingURL=computeclient.js.map"]},"metadata":{},"sourceType":"script"}