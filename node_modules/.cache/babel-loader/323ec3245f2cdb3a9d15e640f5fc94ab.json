{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.androidenterprise_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar androidenterprise_v1;\n\n(function (androidenterprise_v1) {\n  /**\n   * Google Play EMM API\n   *\n   * Manages the deployment of apps to Android Enterprise devices.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const androidenterprise = google.androidenterprise('v1');\n   * ```\n   */\n  var Androidenterprise = function Androidenterprise(options, google) {\n    _classCallCheck(this, Androidenterprise);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.devices = new Resource$Devices(this.context);\n    this.enterprises = new Resource$Enterprises(this.context);\n    this.entitlements = new Resource$Entitlements(this.context);\n    this.grouplicenses = new Resource$Grouplicenses(this.context);\n    this.grouplicenseusers = new Resource$Grouplicenseusers(this.context);\n    this.installs = new Resource$Installs(this.context);\n    this.managedconfigurationsfordevice = new Resource$Managedconfigurationsfordevice(this.context);\n    this.managedconfigurationsforuser = new Resource$Managedconfigurationsforuser(this.context);\n    this.managedconfigurationssettings = new Resource$Managedconfigurationssettings(this.context);\n    this.permissions = new Resource$Permissions(this.context);\n    this.products = new Resource$Products(this.context);\n    this.serviceaccountkeys = new Resource$Serviceaccountkeys(this.context);\n    this.storelayoutclusters = new Resource$Storelayoutclusters(this.context);\n    this.storelayoutpages = new Resource$Storelayoutpages(this.context);\n    this.users = new Resource$Users(this.context);\n    this.webapps = new Resource$Webapps(this.context);\n  };\n\n  androidenterprise_v1.Androidenterprise = Androidenterprise;\n\n  var Resource$Devices = /*#__PURE__*/function () {\n    function Resource$Devices(context) {\n      _classCallCheck(this, Resource$Devices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Devices, [{\n      key: \"forceReportUpload\",\n      value: function forceReportUpload(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/forceReportUpload').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getState\",\n      value: function getState(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setState\",\n      value: function setState(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Devices;\n  }();\n\n  androidenterprise_v1.Resource$Devices = Resource$Devices;\n\n  var Resource$Enterprises = /*#__PURE__*/function () {\n    function Resource$Enterprises(context) {\n      _classCallCheck(this, Resource$Enterprises);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Enterprises, [{\n      key: \"acknowledgeNotificationSet\",\n      value: function acknowledgeNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/acknowledgeNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"completeSignup\",\n      value: function completeSignup(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/completeSignup').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createWebToken\",\n      value: function createWebToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/createWebToken').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enroll\",\n      value: function enroll(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/enroll').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['token'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateSignupUrl\",\n      value: function generateSignupUrl(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/signupUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getServiceAccount\",\n      value: function getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getStoreLayout\",\n      value: function getStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['domain'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"pullNotificationSet\",\n      value: function pullNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/pullNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"sendTestPushNotification\",\n      value: function sendTestPushNotification(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAccount\",\n      value: function setAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/account').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setStoreLayout\",\n      value: function setStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"unenroll\",\n      value: function unenroll(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/unenroll').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Enterprises;\n  }();\n\n  androidenterprise_v1.Resource$Enterprises = Resource$Enterprises;\n\n  var Resource$Entitlements = /*#__PURE__*/function () {\n    function Resource$Entitlements(context) {\n      _classCallCheck(this, Resource$Entitlements);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Entitlements, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n          pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n          pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n          pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Entitlements;\n  }();\n\n  androidenterprise_v1.Resource$Entitlements = Resource$Entitlements;\n\n  var Resource$Grouplicenses = /*#__PURE__*/function () {\n    function Resource$Grouplicenses(context) {\n      _classCallCheck(this, Resource$Grouplicenses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Grouplicenses, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'groupLicenseId'],\n          pathParams: ['enterpriseId', 'groupLicenseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Grouplicenses;\n  }();\n\n  androidenterprise_v1.Resource$Grouplicenses = Resource$Grouplicenses;\n\n  var Resource$Grouplicenseusers = /*#__PURE__*/function () {\n    function Resource$Grouplicenseusers(context) {\n      _classCallCheck(this, Resource$Grouplicenseusers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Grouplicenseusers, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'groupLicenseId'],\n          pathParams: ['enterpriseId', 'groupLicenseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Grouplicenseusers;\n  }();\n\n  androidenterprise_v1.Resource$Grouplicenseusers = Resource$Grouplicenseusers;\n\n  var Resource$Installs = /*#__PURE__*/function () {\n    function Resource$Installs(context) {\n      _classCallCheck(this, Resource$Installs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Installs, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n          pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n          pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n          pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Installs;\n  }();\n\n  androidenterprise_v1.Resource$Installs = Resource$Installs;\n\n  var Resource$Managedconfigurationsfordevice = /*#__PURE__*/function () {\n    function Resource$Managedconfigurationsfordevice(context) {\n      _classCallCheck(this, Resource$Managedconfigurationsfordevice);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedconfigurationsfordevice, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedconfigurationsfordevice;\n  }();\n\n  androidenterprise_v1.Resource$Managedconfigurationsfordevice = Resource$Managedconfigurationsfordevice;\n\n  var Resource$Managedconfigurationsforuser = /*#__PURE__*/function () {\n    function Resource$Managedconfigurationsforuser(context) {\n      _classCallCheck(this, Resource$Managedconfigurationsforuser);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedconfigurationsforuser, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n          pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n          pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n          pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedconfigurationsforuser;\n  }();\n\n  androidenterprise_v1.Resource$Managedconfigurationsforuser = Resource$Managedconfigurationsforuser;\n\n  var Resource$Managedconfigurationssettings = /*#__PURE__*/function () {\n    function Resource$Managedconfigurationssettings(context) {\n      _classCallCheck(this, Resource$Managedconfigurationssettings);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedconfigurationssettings, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedconfigurationssettings;\n  }();\n\n  androidenterprise_v1.Resource$Managedconfigurationssettings = Resource$Managedconfigurationssettings;\n\n  var Resource$Permissions = /*#__PURE__*/function () {\n    function Resource$Permissions(context) {\n      _classCallCheck(this, Resource$Permissions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Permissions, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['permissionId'],\n          pathParams: ['permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Permissions;\n  }();\n\n  androidenterprise_v1.Resource$Permissions = Resource$Permissions;\n\n  var Resource$Products = /*#__PURE__*/function () {\n    function Resource$Products(context) {\n      _classCallCheck(this, Resource$Products);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Products, [{\n      key: \"approve\",\n      value: function approve(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateApprovalUrl\",\n      value: function generateApprovalUrl(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getAppRestrictionsSchema\",\n      value: function getAppRestrictionsSchema(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getPermissions\",\n      value: function getPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"unapprove\",\n      value: function unapprove(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Products;\n  }();\n\n  androidenterprise_v1.Resource$Products = Resource$Products;\n\n  var Resource$Serviceaccountkeys = /*#__PURE__*/function () {\n    function Resource$Serviceaccountkeys(context) {\n      _classCallCheck(this, Resource$Serviceaccountkeys);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Serviceaccountkeys, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'keyId'],\n          pathParams: ['enterpriseId', 'keyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Serviceaccountkeys;\n  }();\n\n  androidenterprise_v1.Resource$Serviceaccountkeys = Resource$Serviceaccountkeys;\n\n  var Resource$Storelayoutclusters = /*#__PURE__*/function () {\n    function Resource$Storelayoutclusters(context) {\n      _classCallCheck(this, Resource$Storelayoutclusters);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Storelayoutclusters, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n          pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n          pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n          pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Storelayoutclusters;\n  }();\n\n  androidenterprise_v1.Resource$Storelayoutclusters = Resource$Storelayoutclusters;\n\n  var Resource$Storelayoutpages = /*#__PURE__*/function () {\n    function Resource$Storelayoutpages(context) {\n      _classCallCheck(this, Resource$Storelayoutpages);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Storelayoutpages, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Storelayoutpages;\n  }();\n\n  androidenterprise_v1.Resource$Storelayoutpages = Resource$Storelayoutpages;\n\n  var Resource$Users = /*#__PURE__*/function () {\n    function Resource$Users(context) {\n      _classCallCheck(this, Resource$Users);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Users, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateAuthenticationToken\",\n      value: function generateAuthenticationToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getAvailableProductSet\",\n      value: function getAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'email'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"revokeDeviceAccess\",\n      value: function revokeDeviceAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAvailableProductSet\",\n      value: function setAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users;\n  }();\n\n  androidenterprise_v1.Resource$Users = Resource$Users;\n\n  var Resource$Webapps = /*#__PURE__*/function () {\n    function Resource$Webapps(context) {\n      _classCallCheck(this, Resource$Webapps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Webapps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'webAppId'],\n          pathParams: ['enterpriseId', 'webAppId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'webAppId'],\n          pathParams: ['enterpriseId', 'webAppId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'webAppId'],\n          pathParams: ['enterpriseId', 'webAppId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Webapps;\n  }();\n\n  androidenterprise_v1.Resource$Webapps = Resource$Webapps;\n})(androidenterprise_v1 = exports.androidenterprise_v1 || (exports.androidenterprise_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/androidenterprise/v1.js"],"names":["Object","defineProperty","exports","value","androidenterprise_v1","googleapis_common_1","require","Androidenterprise","options","google","context","_options","devices","Resource$Devices","enterprises","Resource$Enterprises","entitlements","Resource$Entitlements","grouplicenses","Resource$Grouplicenses","grouplicenseusers","Resource$Grouplicenseusers","installs","Resource$Installs","managedconfigurationsfordevice","Resource$Managedconfigurationsfordevice","managedconfigurationsforuser","Resource$Managedconfigurationsforuser","managedconfigurationssettings","Resource$Managedconfigurationssettings","permissions","Resource$Permissions","products","Resource$Products","serviceaccountkeys","Resource$Serviceaccountkeys","storelayoutclusters","Resource$Storelayoutclusters","storelayoutpages","Resource$Storelayoutpages","users","Resource$Users","webapps","Resource$Webapps","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.androidenterprise_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar androidenterprise_v1;\n(function (androidenterprise_v1) {\n    /**\n     * Google Play EMM API\n     *\n     * Manages the deployment of apps to Android Enterprise devices.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const androidenterprise = google.androidenterprise('v1');\n     * ```\n     */\n    class Androidenterprise {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.devices = new Resource$Devices(this.context);\n            this.enterprises = new Resource$Enterprises(this.context);\n            this.entitlements = new Resource$Entitlements(this.context);\n            this.grouplicenses = new Resource$Grouplicenses(this.context);\n            this.grouplicenseusers = new Resource$Grouplicenseusers(this.context);\n            this.installs = new Resource$Installs(this.context);\n            this.managedconfigurationsfordevice = new Resource$Managedconfigurationsfordevice(this.context);\n            this.managedconfigurationsforuser = new Resource$Managedconfigurationsforuser(this.context);\n            this.managedconfigurationssettings = new Resource$Managedconfigurationssettings(this.context);\n            this.permissions = new Resource$Permissions(this.context);\n            this.products = new Resource$Products(this.context);\n            this.serviceaccountkeys = new Resource$Serviceaccountkeys(this.context);\n            this.storelayoutclusters = new Resource$Storelayoutclusters(this.context);\n            this.storelayoutpages = new Resource$Storelayoutpages(this.context);\n            this.users = new Resource$Users(this.context);\n            this.webapps = new Resource$Webapps(this.context);\n        }\n    }\n    androidenterprise_v1.Androidenterprise = Androidenterprise;\n    class Resource$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        forceReportUpload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/forceReportUpload').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Devices = Resource$Devices;\n    class Resource$Enterprises {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledgeNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/acknowledgeNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        completeSignup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/completeSignup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createWebToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/createWebToken').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enroll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/enroll').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['token'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateSignupUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/signupUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['domain'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        pullNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/pullNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sendTestPushNotification(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/account').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unenroll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/unenroll').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Enterprises = Resource$Enterprises;\n    class Resource$Entitlements {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Entitlements = Resource$Entitlements;\n    class Resource$Grouplicenses {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'groupLicenseId'],\n                pathParams: ['enterpriseId', 'groupLicenseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Grouplicenses = Resource$Grouplicenses;\n    class Resource$Grouplicenseusers {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'groupLicenseId'],\n                pathParams: ['enterpriseId', 'groupLicenseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Grouplicenseusers = Resource$Grouplicenseusers;\n    class Resource$Installs {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Installs = Resource$Installs;\n    class Resource$Managedconfigurationsfordevice {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'deviceId',\n                    'managedConfigurationForDeviceId',\n                ],\n                pathParams: [\n                    'deviceId',\n                    'enterpriseId',\n                    'managedConfigurationForDeviceId',\n                    'userId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'deviceId',\n                    'managedConfigurationForDeviceId',\n                ],\n                pathParams: [\n                    'deviceId',\n                    'enterpriseId',\n                    'managedConfigurationForDeviceId',\n                    'userId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'deviceId',\n                    'managedConfigurationForDeviceId',\n                ],\n                pathParams: [\n                    'deviceId',\n                    'enterpriseId',\n                    'managedConfigurationForDeviceId',\n                    'userId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationsfordevice = Resource$Managedconfigurationsfordevice;\n    class Resource$Managedconfigurationsforuser {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'managedConfigurationForUserId',\n                ],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'managedConfigurationForUserId',\n                ],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'managedConfigurationForUserId',\n                ],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationsforuser = Resource$Managedconfigurationsforuser;\n    class Resource$Managedconfigurationssettings {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationssettings = Resource$Managedconfigurationssettings;\n    class Resource$Permissions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['permissionId'],\n                pathParams: ['permissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Permissions = Resource$Permissions;\n    class Resource$Products {\n        constructor(context) {\n            this.context = context;\n        }\n        approve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateApprovalUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAppRestrictionsSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unapprove(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Products = Resource$Products;\n    class Resource$Serviceaccountkeys {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'keyId'],\n                pathParams: ['enterpriseId', 'keyId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Serviceaccountkeys = Resource$Serviceaccountkeys;\n    class Resource$Storelayoutclusters {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Storelayoutclusters = Resource$Storelayoutclusters;\n    class Resource$Storelayoutpages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Storelayoutpages = Resource$Storelayoutpages;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateAuthenticationToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'email'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        revokeDeviceAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Users = Resource$Users;\n    class Resource$Webapps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Webapps = Resource$Webapps;\n})(androidenterprise_v1 = exports.androidenterprise_v1 || (exports.androidenterprise_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}