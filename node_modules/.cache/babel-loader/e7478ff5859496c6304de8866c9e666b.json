{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dataflow_v1b3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar dataflow_v1b3;\n\n(function (dataflow_v1b3) {\n  /**\n   * Dataflow API\n   *\n   * Manages Google Cloud Dataflow projects on Google Cloud Platform.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const dataflow = google.dataflow('v1b3');\n   * ```\n   */\n  var Dataflow = function Dataflow(options, google) {\n    _classCallCheck(this, Dataflow);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.projects = new Resource$Projects(this.context);\n  };\n\n  dataflow_v1b3.Dataflow = Dataflow;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n      this.catalogTemplates = new Resource$Projects$Catalogtemplates(this.context);\n      this.jobs = new Resource$Projects$Jobs(this.context);\n      this.locations = new Resource$Projects$Locations(this.context);\n      this.snapshots = new Resource$Projects$Snapshots(this.context);\n      this.templates = new Resource$Projects$Templates(this.context);\n      this.templateVersions = new Resource$Projects$Templateversions(this.context);\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"deleteSnapshots\",\n      value: function deleteSnapshots(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"workerMessages\",\n      value: function workerMessages(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/WorkerMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  dataflow_v1b3.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Catalogtemplates = /*#__PURE__*/function () {\n    function Resource$Projects$Catalogtemplates(context) {\n      _classCallCheck(this, Resource$Projects$Catalogtemplates);\n\n      this.context = context;\n      this.templateVersions = new Resource$Projects$Catalogtemplates$Templateversions(this.context);\n    }\n\n    _createClass(Resource$Projects$Catalogtemplates, [{\n      key: \"commit\",\n      value: function commit(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/{+name}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"label\",\n      value: function label(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/{+name}:label').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"tag\",\n      value: function tag(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/{+name}:tag').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Catalogtemplates;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Catalogtemplates = Resource$Projects$Catalogtemplates;\n\n  var Resource$Projects$Catalogtemplates$Templateversions = /*#__PURE__*/function () {\n    function Resource$Projects$Catalogtemplates$Templateversions(context) {\n      _classCallCheck(this, Resource$Projects$Catalogtemplates$Templateversions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Catalogtemplates$Templateversions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/{+parent}/templateVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Catalogtemplates$Templateversions;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Catalogtemplates$Templateversions = Resource$Projects$Catalogtemplates$Templateversions;\n\n  var Resource$Projects$Jobs = /*#__PURE__*/function () {\n    function Resource$Projects$Jobs(context) {\n      _classCallCheck(this, Resource$Projects$Jobs);\n\n      this.context = context;\n      this.debug = new Resource$Projects$Jobs$Debug(this.context);\n      this.messages = new Resource$Projects$Jobs$Messages(this.context);\n      this.workItems = new Resource$Projects$Jobs$Workitems(this.context);\n    }\n\n    _createClass(Resource$Projects$Jobs, [{\n      key: \"aggregated\",\n      value: function aggregated(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs:aggregated').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['jobId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getMetrics\",\n      value: function getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['jobId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"snapshot\",\n      value: function snapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}:snapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['jobId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['jobId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Jobs;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Jobs = Resource$Projects$Jobs;\n\n  var Resource$Projects$Jobs$Debug = /*#__PURE__*/function () {\n    function Resource$Projects$Jobs$Debug(context) {\n      _classCallCheck(this, Resource$Projects$Jobs$Debug);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Jobs$Debug, [{\n      key: \"getConfig\",\n      value: function getConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['jobId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"sendCapture\",\n      value: function sendCapture(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['jobId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Jobs$Debug;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Jobs$Debug = Resource$Projects$Jobs$Debug;\n\n  var Resource$Projects$Jobs$Messages = /*#__PURE__*/function () {\n    function Resource$Projects$Jobs$Messages(context) {\n      _classCallCheck(this, Resource$Projects$Jobs$Messages);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Jobs$Messages, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['jobId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Jobs$Messages;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Jobs$Messages = Resource$Projects$Jobs$Messages;\n\n  var Resource$Projects$Jobs$Workitems = /*#__PURE__*/function () {\n    function Resource$Projects$Jobs$Workitems(context) {\n      _classCallCheck(this, Resource$Projects$Jobs$Workitems);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Jobs$Workitems, [{\n      key: \"lease\",\n      value: function lease(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['jobId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reportStatus\",\n      value: function reportStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'jobId'],\n          pathParams: ['jobId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Jobs$Workitems;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Jobs$Workitems = Resource$Projects$Jobs$Workitems;\n\n  var Resource$Projects$Locations = /*#__PURE__*/function () {\n    function Resource$Projects$Locations(context) {\n      _classCallCheck(this, Resource$Projects$Locations);\n\n      this.context = context;\n      this.flexTemplates = new Resource$Projects$Locations$Flextemplates(this.context);\n      this.jobs = new Resource$Projects$Locations$Jobs(this.context);\n      this.snapshots = new Resource$Projects$Locations$Snapshots(this.context);\n      this.sql = new Resource$Projects$Locations$Sql(this.context);\n      this.templates = new Resource$Projects$Locations$Templates(this.context);\n    }\n\n    _createClass(Resource$Projects$Locations, [{\n      key: \"workerMessages\",\n      value: function workerMessages(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/WorkerMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations = Resource$Projects$Locations;\n\n  var Resource$Projects$Locations$Flextemplates = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Flextemplates(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Flextemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Flextemplates, [{\n      key: \"launch\",\n      value: function launch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Flextemplates;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Flextemplates = Resource$Projects$Locations$Flextemplates;\n\n  var Resource$Projects$Locations$Jobs = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Jobs(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Jobs);\n\n      this.context = context;\n      this.debug = new Resource$Projects$Locations$Jobs$Debug(this.context);\n      this.messages = new Resource$Projects$Locations$Jobs$Messages(this.context);\n      this.snapshots = new Resource$Projects$Locations$Jobs$Snapshots(this.context);\n      this.stages = new Resource$Projects$Locations$Jobs$Stages(this.context);\n      this.workItems = new Resource$Projects$Locations$Jobs$Workitems(this.context);\n    }\n\n    _createClass(Resource$Projects$Locations$Jobs, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getExecutionDetails\",\n      value: function getExecutionDetails(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/executionDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getMetrics\",\n      value: function getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"snapshot\",\n      value: function snapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Jobs;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs = Resource$Projects$Locations$Jobs;\n\n  var Resource$Projects$Locations$Jobs$Debug = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Jobs$Debug(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Jobs$Debug);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Jobs$Debug, [{\n      key: \"getConfig\",\n      value: function getConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"sendCapture\",\n      value: function sendCapture(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Jobs$Debug;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs$Debug = Resource$Projects$Locations$Jobs$Debug;\n\n  var Resource$Projects$Locations$Jobs$Messages = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Jobs$Messages(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Jobs$Messages);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Jobs$Messages, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Jobs$Messages;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs$Messages = Resource$Projects$Locations$Jobs$Messages;\n\n  var Resource$Projects$Locations$Jobs$Snapshots = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Jobs$Snapshots(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Jobs$Snapshots);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Jobs$Snapshots, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Jobs$Snapshots;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs$Snapshots = Resource$Projects$Locations$Jobs$Snapshots;\n\n  var Resource$Projects$Locations$Jobs$Stages = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Jobs$Stages(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Jobs$Stages);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Jobs$Stages, [{\n      key: \"getExecutionDetails\",\n      value: function getExecutionDetails(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/stages/{stageId}/executionDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId', 'stageId'],\n          pathParams: ['jobId', 'location', 'projectId', 'stageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Jobs$Stages;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs$Stages = Resource$Projects$Locations$Jobs$Stages;\n\n  var Resource$Projects$Locations$Jobs$Workitems = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Jobs$Workitems(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Jobs$Workitems);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Jobs$Workitems, [{\n      key: \"lease\",\n      value: function lease(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reportStatus\",\n      value: function reportStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'jobId'],\n          pathParams: ['jobId', 'location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Jobs$Workitems;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Jobs$Workitems = Resource$Projects$Locations$Jobs$Workitems;\n\n  var Resource$Projects$Locations$Snapshots = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Snapshots(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Snapshots);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Snapshots, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'snapshotId'],\n          pathParams: ['location', 'projectId', 'snapshotId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location', 'snapshotId'],\n          pathParams: ['location', 'projectId', 'snapshotId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Snapshots;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Snapshots = Resource$Projects$Locations$Snapshots;\n\n  var Resource$Projects$Locations$Sql = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Sql(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Sql);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Sql, [{\n      key: \"validate\",\n      value: function validate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/sql:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Sql;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Sql = Resource$Projects$Locations$Sql;\n\n  var Resource$Projects$Locations$Templates = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Templates(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Templates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Templates, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/templates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/templates:get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"launch\",\n      value: function launch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/templates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'location'],\n          pathParams: ['location', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Templates;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Locations$Templates = Resource$Projects$Locations$Templates;\n\n  var Resource$Projects$Snapshots = /*#__PURE__*/function () {\n    function Resource$Projects$Snapshots(context) {\n      _classCallCheck(this, Resource$Projects$Snapshots);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Snapshots, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'snapshotId'],\n          pathParams: ['projectId', 'snapshotId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Snapshots;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Snapshots = Resource$Projects$Snapshots;\n\n  var Resource$Projects$Templates = /*#__PURE__*/function () {\n    function Resource$Projects$Templates(context) {\n      _classCallCheck(this, Resource$Projects$Templates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Templates, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/templates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/templates:get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"launch\",\n      value: function launch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/projects/{projectId}/templates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Templates;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Templates = Resource$Projects$Templates;\n\n  var Resource$Projects$Templateversions = /*#__PURE__*/function () {\n    function Resource$Projects$Templateversions(context) {\n      _classCallCheck(this, Resource$Projects$Templateversions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Templateversions, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1b3/{+parent}/templateVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Templateversions;\n  }();\n\n  dataflow_v1b3.Resource$Projects$Templateversions = Resource$Projects$Templateversions;\n})(dataflow_v1b3 = exports.dataflow_v1b3 || (exports.dataflow_v1b3 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/googleapis/build/src/apis/dataflow/v1b3.js"],"names":["Object","defineProperty","exports","value","dataflow_v1b3","googleapis_common_1","require","Dataflow","options","google","context","_options","projects","Resource$Projects","catalogTemplates","Resource$Projects$Catalogtemplates","jobs","Resource$Projects$Jobs","locations","Resource$Projects$Locations","snapshots","Resource$Projects$Snapshots","templates","Resource$Projects$Templates","templateVersions","Resource$Projects$Templateversions","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Projects$Catalogtemplates$Templateversions","debug","Resource$Projects$Jobs$Debug","messages","Resource$Projects$Jobs$Messages","workItems","Resource$Projects$Jobs$Workitems","flexTemplates","Resource$Projects$Locations$Flextemplates","Resource$Projects$Locations$Jobs","Resource$Projects$Locations$Snapshots","sql","Resource$Projects$Locations$Sql","Resource$Projects$Locations$Templates","Resource$Projects$Locations$Jobs$Debug","Resource$Projects$Locations$Jobs$Messages","Resource$Projects$Locations$Jobs$Snapshots","stages","Resource$Projects$Locations$Jobs$Stages","Resource$Projects$Locations$Jobs$Workitems"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dataflow_v1b3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar dataflow_v1b3;\n(function (dataflow_v1b3) {\n    /**\n     * Dataflow API\n     *\n     * Manages Google Cloud Dataflow projects on Google Cloud Platform.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const dataflow = google.dataflow('v1b3');\n     * ```\n     */\n    class Dataflow {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    dataflow_v1b3.Dataflow = Dataflow;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.catalogTemplates = new Resource$Projects$Catalogtemplates(this.context);\n            this.jobs = new Resource$Projects$Jobs(this.context);\n            this.locations = new Resource$Projects$Locations(this.context);\n            this.snapshots = new Resource$Projects$Snapshots(this.context);\n            this.templates = new Resource$Projects$Templates(this.context);\n            this.templateVersions = new Resource$Projects$Templateversions(this.context);\n        }\n        deleteSnapshots(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        workerMessages(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/WorkerMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Catalogtemplates {\n        constructor(context) {\n            this.context = context;\n            this.templateVersions = new Resource$Projects$Catalogtemplates$Templateversions(this.context);\n        }\n        commit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        label(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}:label').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        tag(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+name}:tag').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Catalogtemplates = Resource$Projects$Catalogtemplates;\n    class Resource$Projects$Catalogtemplates$Templateversions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+parent}/templateVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Catalogtemplates$Templateversions = Resource$Projects$Catalogtemplates$Templateversions;\n    class Resource$Projects$Jobs {\n        constructor(context) {\n            this.context = context;\n            this.debug = new Resource$Projects$Jobs$Debug(this.context);\n            this.messages = new Resource$Projects$Jobs$Messages(this.context);\n            this.workItems = new Resource$Projects$Jobs$Workitems(this.context);\n        }\n        aggregated(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs:aggregated').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        snapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}:snapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Jobs = Resource$Projects$Jobs;\n    class Resource$Projects$Jobs$Debug {\n        constructor(context) {\n            this.context = context;\n        }\n        getConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sendCapture(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Jobs$Debug = Resource$Projects$Jobs$Debug;\n    class Resource$Projects$Jobs$Messages {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/jobs/{jobId}/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Jobs$Messages = Resource$Projects$Jobs$Messages;\n    class Resource$Projects$Jobs$Workitems {\n        constructor(context) {\n            this.context = context;\n        }\n        lease(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reportStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Jobs$Workitems = Resource$Projects$Jobs$Workitems;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n            this.flexTemplates = new Resource$Projects$Locations$Flextemplates(this.context);\n            this.jobs = new Resource$Projects$Locations$Jobs(this.context);\n            this.snapshots = new Resource$Projects$Locations$Snapshots(this.context);\n            this.sql = new Resource$Projects$Locations$Sql(this.context);\n            this.templates = new Resource$Projects$Locations$Templates(this.context);\n        }\n        workerMessages(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/WorkerMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations = Resource$Projects$Locations;\n    class Resource$Projects$Locations$Flextemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        launch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Flextemplates = Resource$Projects$Locations$Flextemplates;\n    class Resource$Projects$Locations$Jobs {\n        constructor(context) {\n            this.context = context;\n            this.debug = new Resource$Projects$Locations$Jobs$Debug(this.context);\n            this.messages = new Resource$Projects$Locations$Jobs$Messages(this.context);\n            this.snapshots = new Resource$Projects$Locations$Jobs$Snapshots(this.context);\n            this.stages = new Resource$Projects$Locations$Jobs$Stages(this.context);\n            this.workItems = new Resource$Projects$Locations$Jobs$Workitems(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getExecutionDetails(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/executionDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getMetrics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/locations/{location}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        snapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs = Resource$Projects$Locations$Jobs;\n    class Resource$Projects$Locations$Jobs$Debug {\n        constructor(context) {\n            this.context = context;\n        }\n        getConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sendCapture(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs$Debug = Resource$Projects$Locations$Jobs$Debug;\n    class Resource$Projects$Locations$Jobs$Messages {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs$Messages = Resource$Projects$Locations$Jobs$Messages;\n    class Resource$Projects$Locations$Jobs$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs$Snapshots = Resource$Projects$Locations$Jobs$Snapshots;\n    class Resource$Projects$Locations$Jobs$Stages {\n        constructor(context) {\n            this.context = context;\n        }\n        getExecutionDetails(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/stages/{stageId}/executionDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId', 'stageId'],\n                pathParams: ['jobId', 'location', 'projectId', 'stageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs$Stages = Resource$Projects$Locations$Jobs$Stages;\n    class Resource$Projects$Locations$Jobs$Workitems {\n        constructor(context) {\n            this.context = context;\n        }\n        lease(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reportStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'jobId'],\n                pathParams: ['jobId', 'location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Jobs$Workitems = Resource$Projects$Locations$Jobs$Workitems;\n    class Resource$Projects$Locations$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'snapshotId'],\n                pathParams: ['location', 'projectId', 'snapshotId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location', 'snapshotId'],\n                pathParams: ['location', 'projectId', 'snapshotId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Snapshots = Resource$Projects$Locations$Snapshots;\n    class Resource$Projects$Locations$Sql {\n        constructor(context) {\n            this.context = context;\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/sql:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Sql = Resource$Projects$Locations$Sql;\n    class Resource$Projects$Locations$Templates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/templates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/templates:get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        launch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1b3/projects/{projectId}/locations/{location}/templates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'location'],\n                pathParams: ['location', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Locations$Templates = Resource$Projects$Locations$Templates;\n    class Resource$Projects$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'snapshotId'],\n                pathParams: ['projectId', 'snapshotId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Snapshots = Resource$Projects$Snapshots;\n    class Resource$Projects$Templates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/templates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/templates:get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        launch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/projects/{projectId}/templates:launch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Templates = Resource$Projects$Templates;\n    class Resource$Projects$Templateversions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dataflow.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1b3/{+parent}/templateVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dataflow_v1b3.Resource$Projects$Templateversions = Resource$Projects$Templateversions;\n})(dataflow_v1b3 = exports.dataflow_v1b3 || (exports.dataflow_v1b3 = {}));\n//# sourceMappingURL=v1b3.js.map"]},"metadata":{},"sourceType":"script"}