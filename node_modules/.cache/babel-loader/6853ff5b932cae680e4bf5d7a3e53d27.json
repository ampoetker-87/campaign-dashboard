{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar compute_alpha;\n\n(function (compute_alpha) {\n  /**\n   * Compute Engine API\n   *\n   * Creates and runs virtual machines on Google Cloud Platform.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const compute = google.compute('alpha');\n   *\n   * @namespace compute\n   * @type {Function}\n   * @version alpha\n   * @variation alpha\n   * @param {object=} options Options for Compute\n   */\n  var Compute = function Compute(options, google) {\n    _classCallCheck(this, Compute);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n    this.addresses = new Resource$Addresses(this.context);\n    this.autoscalers = new Resource$Autoscalers(this.context);\n    this.backendBuckets = new Resource$Backendbuckets(this.context);\n    this.backendServices = new Resource$Backendservices(this.context);\n    this.disks = new Resource$Disks(this.context);\n    this.diskTypes = new Resource$Disktypes(this.context);\n    this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n    this.firewalls = new Resource$Firewalls(this.context);\n    this.forwardingRules = new Resource$Forwardingrules(this.context);\n    this.globalAddresses = new Resource$Globaladdresses(this.context);\n    this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n    this.globalOperations = new Resource$Globaloperations(this.context);\n    this.globalOrganizationOperations = new Resource$Globalorganizationoperations(this.context);\n    this.healthChecks = new Resource$Healthchecks(this.context);\n    this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n    this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n    this.images = new Resource$Images(this.context);\n    this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n    this.instanceGroups = new Resource$Instancegroups(this.context);\n    this.instances = new Resource$Instances(this.context);\n    this.instanceTemplates = new Resource$Instancetemplates(this.context);\n    this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n    this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n    this.interconnects = new Resource$Interconnects(this.context);\n    this.licenseCodes = new Resource$Licensecodes(this.context);\n    this.licenses = new Resource$Licenses(this.context);\n    this.machineImages = new Resource$Machineimages(this.context);\n    this.machineTypes = new Resource$Machinetypes(this.context);\n    this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n    this.networks = new Resource$Networks(this.context);\n    this.nodeGroups = new Resource$Nodegroups(this.context);\n    this.nodeTemplates = new Resource$Nodetemplates(this.context);\n    this.nodeTypes = new Resource$Nodetypes(this.context);\n    this.organizationSecurityPolicies = new Resource$Organizationsecuritypolicies(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n    this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n    this.regionCommitments = new Resource$Regioncommitments(this.context);\n    this.regionDisks = new Resource$Regiondisks(this.context);\n    this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n    this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n    this.regionHealthCheckServices = new Resource$Regionhealthcheckservices(this.context);\n    this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n    this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n    this.regionNotificationEndpoints = new Resource$Regionnotificationendpoints(this.context);\n    this.regionOperations = new Resource$Regionoperations(this.context);\n    this.regions = new Resource$Regions(this.context);\n    this.regionSslCertificates = new Resource$Regionsslcertificates(this.context);\n    this.regionTargetHttpProxies = new Resource$Regiontargethttpproxies(this.context);\n    this.regionTargetHttpsProxies = new Resource$Regiontargethttpsproxies(this.context);\n    this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n    this.reservations = new Resource$Reservations(this.context);\n    this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n    this.routers = new Resource$Routers(this.context);\n    this.routes = new Resource$Routes(this.context);\n    this.securityPolicies = new Resource$Securitypolicies(this.context);\n    this.snapshots = new Resource$Snapshots(this.context);\n    this.sslCertificates = new Resource$Sslcertificates(this.context);\n    this.sslPolicies = new Resource$Sslpolicies(this.context);\n    this.subnetworks = new Resource$Subnetworks(this.context);\n    this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n    this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n    this.targetInstances = new Resource$Targetinstances(this.context);\n    this.targetPools = new Resource$Targetpools(this.context);\n    this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n    this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n    this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n    this.urlMaps = new Resource$Urlmaps(this.context);\n    this.vpnGateways = new Resource$Vpngateways(this.context);\n    this.vpnTunnels = new Resource$Vpntunnels(this.context);\n    this.zoneOperations = new Resource$Zoneoperations(this.context);\n    this.zones = new Resource$Zones(this.context);\n  };\n\n  compute_alpha.Compute = Compute;\n\n  var Resource$Acceleratortypes = /*#__PURE__*/function () {\n    function Resource$Acceleratortypes(context) {\n      _classCallCheck(this, Resource$Acceleratortypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Acceleratortypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'acceleratorType'],\n          pathParams: ['acceleratorType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Acceleratortypes;\n  }();\n\n  compute_alpha.Resource$Acceleratortypes = Resource$Acceleratortypes;\n\n  var Resource$Addresses = /*#__PURE__*/function () {\n    function Resource$Addresses(context) {\n      _classCallCheck(this, Resource$Addresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Addresses, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Addresses;\n  }();\n\n  compute_alpha.Resource$Addresses = Resource$Addresses;\n\n  var Resource$Autoscalers = /*#__PURE__*/function () {\n    function Resource$Autoscalers(context) {\n      _classCallCheck(this, Resource$Autoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Autoscalers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Autoscalers;\n  }();\n\n  compute_alpha.Resource$Autoscalers = Resource$Autoscalers;\n\n  var Resource$Backendbuckets = /*#__PURE__*/function () {\n    function Resource$Backendbuckets(context) {\n      _classCallCheck(this, Resource$Backendbuckets);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendbuckets, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket', 'keyName'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendbuckets;\n  }();\n\n  compute_alpha.Resource$Backendbuckets = Resource$Backendbuckets;\n\n  var Resource$Backendservices = /*#__PURE__*/function () {\n    function Resource$Backendservices(context) {\n      _classCallCheck(this, Resource$Backendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendservices, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService', 'keyName'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSecurityPolicy\",\n      value: function setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendservices;\n  }();\n\n  compute_alpha.Resource$Backendservices = Resource$Backendservices;\n\n  var Resource$Disks = /*#__PURE__*/function () {\n    function Resource$Disks(context) {\n      _classCallCheck(this, Resource$Disks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disks, [{\n      key: \"addResourcePolicies\",\n      value: function addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeResourcePolicies\",\n      value: function removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disks;\n  }();\n\n  compute_alpha.Resource$Disks = Resource$Disks;\n\n  var Resource$Disktypes = /*#__PURE__*/function () {\n    function Resource$Disktypes(context) {\n      _classCallCheck(this, Resource$Disktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disktypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'diskType'],\n          pathParams: ['diskType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disktypes;\n  }();\n\n  compute_alpha.Resource$Disktypes = Resource$Disktypes;\n\n  var Resource$Externalvpngateways = /*#__PURE__*/function () {\n    function Resource$Externalvpngateways(context) {\n      _classCallCheck(this, Resource$Externalvpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Externalvpngateways, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'externalVpnGateway'],\n          pathParams: ['externalVpnGateway', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'externalVpnGateway'],\n          pathParams: ['externalVpnGateway', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Externalvpngateways;\n  }();\n\n  compute_alpha.Resource$Externalvpngateways = Resource$Externalvpngateways;\n\n  var Resource$Firewalls = /*#__PURE__*/function () {\n    function Resource$Firewalls(context) {\n      _classCallCheck(this, Resource$Firewalls);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Firewalls, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Firewalls;\n  }();\n\n  compute_alpha.Resource$Firewalls = Resource$Firewalls;\n\n  var Resource$Forwardingrules = /*#__PURE__*/function () {\n    function Resource$Forwardingrules(context) {\n      _classCallCheck(this, Resource$Forwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Forwardingrules, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Forwardingrules;\n  }();\n\n  compute_alpha.Resource$Forwardingrules = Resource$Forwardingrules;\n\n  var Resource$Globaladdresses = /*#__PURE__*/function () {\n    function Resource$Globaladdresses(context) {\n      _classCallCheck(this, Resource$Globaladdresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaladdresses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaladdresses;\n  }();\n\n  compute_alpha.Resource$Globaladdresses = Resource$Globaladdresses;\n\n  var Resource$Globalforwardingrules = /*#__PURE__*/function () {\n    function Resource$Globalforwardingrules(context) {\n      _classCallCheck(this, Resource$Globalforwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globalforwardingrules, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globalforwardingrules;\n  }();\n\n  compute_alpha.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n\n  var Resource$Globaloperations = /*#__PURE__*/function () {\n    function Resource$Globaloperations(context) {\n      _classCallCheck(this, Resource$Globaloperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaloperations, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"wait\",\n      value: function wait(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaloperations;\n  }();\n\n  compute_alpha.Resource$Globaloperations = Resource$Globaloperations;\n\n  var Resource$Globalorganizationoperations = /*#__PURE__*/function () {\n    function Resource$Globalorganizationoperations(context) {\n      _classCallCheck(this, Resource$Globalorganizationoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globalorganizationoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['operation'],\n          pathParams: ['operation'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['operation'],\n          pathParams: ['operation'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"wait\",\n      value: function wait(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['operation'],\n          pathParams: ['operation'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globalorganizationoperations;\n  }();\n\n  compute_alpha.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n\n  var Resource$Healthchecks = /*#__PURE__*/function () {\n    function Resource$Healthchecks(context) {\n      _classCallCheck(this, Resource$Healthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Healthchecks, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Healthchecks;\n  }();\n\n  compute_alpha.Resource$Healthchecks = Resource$Healthchecks;\n\n  var Resource$Httphealthchecks = /*#__PURE__*/function () {\n    function Resource$Httphealthchecks(context) {\n      _classCallCheck(this, Resource$Httphealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httphealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httphealthchecks;\n  }();\n\n  compute_alpha.Resource$Httphealthchecks = Resource$Httphealthchecks;\n\n  var Resource$Httpshealthchecks = /*#__PURE__*/function () {\n    function Resource$Httpshealthchecks(context) {\n      _classCallCheck(this, Resource$Httpshealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httpshealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httpshealthchecks;\n  }();\n\n  compute_alpha.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n\n  var Resource$Images = /*#__PURE__*/function () {\n    function Resource$Images(context) {\n      _classCallCheck(this, Resource$Images);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Images, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deprecate\",\n      value: function deprecate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getFromFamily\",\n      value: function getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'family'],\n          pathParams: ['family', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Images;\n  }();\n\n  compute_alpha.Resource$Images = Resource$Images;\n\n  var Resource$Instancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Instancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Instancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"applyUpdatesToInstances\",\n      value: function applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createInstances\",\n      value: function createInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deletePerInstanceConfigs\",\n      value: function deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPerInstanceConfigs\",\n      value: function listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchPerInstanceConfigs\",\n      value: function patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resizeAdvanced\",\n      value: function resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAutoHealingPolicies\",\n      value: function setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updatePerInstanceConfigs\",\n      value: function updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroupmanagers;\n  }();\n\n  compute_alpha.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n\n  var Resource$Instancegroups = /*#__PURE__*/function () {\n    function Resource$Instancegroups(context) {\n      _classCallCheck(this, Resource$Instancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroups, [{\n      key: \"addInstances\",\n      value: function addInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstances\",\n      value: function removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroups;\n  }();\n\n  compute_alpha.Resource$Instancegroups = Resource$Instancegroups;\n\n  var Resource$Instances = /*#__PURE__*/function () {\n    function Resource$Instances(context) {\n      _classCallCheck(this, Resource$Instances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instances, [{\n      key: \"addAccessConfig\",\n      value: function addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"addResourcePolicies\",\n      value: function addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachDisk\",\n      value: function attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteAccessConfig\",\n      value: function deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachDisk\",\n      value: function detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getGuestAttributes\",\n      value: function getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getSerialPortOutput\",\n      value: function getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getShieldedInstanceIdentity\",\n      value: function getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getShieldedVmIdentity\",\n      value: function getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listReferrers\",\n      value: function listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeResourcePolicies\",\n      value: function removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reset\",\n      value: function reset(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resume\",\n      value: function resume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDeletionProtection\",\n      value: function setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDiskAutoDelete\",\n      value: function setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineResources\",\n      value: function setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineType\",\n      value: function setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMetadata\",\n      value: function setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMinCpuPlatform\",\n      value: function setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setScheduling\",\n      value: function setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setServiceAccount\",\n      value: function setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setShieldedInstanceIntegrityPolicy\",\n      value: function setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setShieldedVmIntegrityPolicy\",\n      value: function setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTags\",\n      value: function setTags(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"simulateMaintenanceEvent\",\n      value: function simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"start\",\n      value: function start(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"startWithEncryptionKey\",\n      value: function startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"suspend\",\n      value: function suspend(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateAccessConfig\",\n      value: function updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateDisplayDevice\",\n      value: function updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateNetworkInterface\",\n      value: function updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateShieldedInstanceConfig\",\n      value: function updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateShieldedVmConfig\",\n      value: function updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instances;\n  }();\n\n  compute_alpha.Resource$Instances = Resource$Instances;\n\n  var Resource$Instancetemplates = /*#__PURE__*/function () {\n    function Resource$Instancetemplates(context) {\n      _classCallCheck(this, Resource$Instancetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancetemplates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancetemplates;\n  }();\n\n  compute_alpha.Resource$Instancetemplates = Resource$Instancetemplates;\n\n  var Resource$Interconnectattachments = /*#__PURE__*/function () {\n    function Resource$Interconnectattachments(context) {\n      _classCallCheck(this, Resource$Interconnectattachments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectattachments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectattachments;\n  }();\n\n  compute_alpha.Resource$Interconnectattachments = Resource$Interconnectattachments;\n\n  var Resource$Interconnectlocations = /*#__PURE__*/function () {\n    function Resource$Interconnectlocations(context) {\n      _classCallCheck(this, Resource$Interconnectlocations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectlocations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnectLocation'],\n          pathParams: ['interconnectLocation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectLocations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectlocations;\n  }();\n\n  compute_alpha.Resource$Interconnectlocations = Resource$Interconnectlocations;\n\n  var Resource$Interconnects = /*#__PURE__*/function () {\n    function Resource$Interconnects(context) {\n      _classCallCheck(this, Resource$Interconnects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnects, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getDiagnostics\",\n      value: function getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnects;\n  }();\n\n  compute_alpha.Resource$Interconnects = Resource$Interconnects;\n\n  var Resource$Licensecodes = /*#__PURE__*/function () {\n    function Resource$Licensecodes(context) {\n      _classCallCheck(this, Resource$Licensecodes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licensecodes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'licenseCode'],\n          pathParams: ['licenseCode', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licensecodes;\n  }();\n\n  compute_alpha.Resource$Licensecodes = Resource$Licensecodes;\n\n  var Resource$Licenses = /*#__PURE__*/function () {\n    function Resource$Licenses(context) {\n      _classCallCheck(this, Resource$Licenses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licenses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licenses;\n  }();\n\n  compute_alpha.Resource$Licenses = Resource$Licenses;\n\n  var Resource$Machineimages = /*#__PURE__*/function () {\n    function Resource$Machineimages(context) {\n      _classCallCheck(this, Resource$Machineimages);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Machineimages, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'machineImage'],\n          pathParams: ['machineImage', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'machineImage'],\n          pathParams: ['machineImage', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Machineimages;\n  }();\n\n  compute_alpha.Resource$Machineimages = Resource$Machineimages;\n\n  var Resource$Machinetypes = /*#__PURE__*/function () {\n    function Resource$Machinetypes(context) {\n      _classCallCheck(this, Resource$Machinetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Machinetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'machineType'],\n          pathParams: ['machineType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Machinetypes;\n  }();\n\n  compute_alpha.Resource$Machinetypes = Resource$Machinetypes;\n\n  var Resource$Networkendpointgroups = /*#__PURE__*/function () {\n    function Resource$Networkendpointgroups(context) {\n      _classCallCheck(this, Resource$Networkendpointgroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networkendpointgroups, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachNetworkEndpoints\",\n      value: function attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachNetworkEndpoints\",\n      value: function detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNetworkEndpoints\",\n      value: function listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networkendpointgroups;\n  }();\n\n  compute_alpha.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n\n  var Resource$Networks = /*#__PURE__*/function () {\n    function Resource$Networks(context) {\n      _classCallCheck(this, Resource$Networks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networks, [{\n      key: \"addPeering\",\n      value: function addPeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listIpAddresses\",\n      value: function listIpAddresses(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/listIpAddresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listIpOwners\",\n      value: function listIpOwners(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/listIpOwners').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPeeringRoutes\",\n      value: function listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removePeering\",\n      value: function removePeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"switchToCustomMode\",\n      value: function switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updatePeering\",\n      value: function updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networks;\n  }();\n\n  compute_alpha.Resource$Networks = Resource$Networks;\n\n  var Resource$Nodegroups = /*#__PURE__*/function () {\n    function Resource$Nodegroups(context) {\n      _classCallCheck(this, Resource$Nodegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodegroups, [{\n      key: \"addNodes\",\n      value: function addNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteNodes\",\n      value: function deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'initialNodeCount'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNodes\",\n      value: function listNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAutoscalingPolicy\",\n      value: function setAutoscalingPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setAutoscalingPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNodeTemplate\",\n      value: function setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodegroups;\n  }();\n\n  compute_alpha.Resource$Nodegroups = Resource$Nodegroups;\n\n  var Resource$Nodetemplates = /*#__PURE__*/function () {\n    function Resource$Nodetemplates(context) {\n      _classCallCheck(this, Resource$Nodetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetemplates, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetemplates;\n  }();\n\n  compute_alpha.Resource$Nodetemplates = Resource$Nodetemplates;\n\n  var Resource$Nodetypes = /*#__PURE__*/function () {\n    function Resource$Nodetypes(context) {\n      _classCallCheck(this, Resource$Nodetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeType'],\n          pathParams: ['nodeType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetypes;\n  }();\n\n  compute_alpha.Resource$Nodetypes = Resource$Nodetypes;\n\n  var Resource$Organizationsecuritypolicies = /*#__PURE__*/function () {\n    function Resource$Organizationsecuritypolicies(context) {\n      _classCallCheck(this, Resource$Organizationsecuritypolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Organizationsecuritypolicies, [{\n      key: \"addAssociation\",\n      value: function addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"addRule\",\n      value: function addRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"copyRules\",\n      value: function copyRules(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/copyRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getAssociation\",\n      value: function getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRule\",\n      value: function getRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listAssociations\",\n      value: function listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"move\",\n      value: function move(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchRule\",\n      value: function patchRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeAssociation\",\n      value: function removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeRule\",\n      value: function removeRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Organizationsecuritypolicies;\n  }();\n\n  compute_alpha.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"disableXpnHost\",\n      value: function disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"disableXpnResource\",\n      value: function disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnHost\",\n      value: function enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnResource\",\n      value: function enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnHost\",\n      value: function getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnResources\",\n      value: function getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listXpnHosts\",\n      value: function listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveDisk\",\n      value: function moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveInstance\",\n      value: function moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setCommonInstanceMetadata\",\n      value: function setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDefaultNetworkTier\",\n      value: function setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDefaultServiceAccount\",\n      value: function setDefaultServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/setDefaultServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUsageExportBucket\",\n      value: function setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  compute_alpha.Resource$Projects = Resource$Projects;\n\n  var Resource$Regionautoscalers = /*#__PURE__*/function () {\n    function Resource$Regionautoscalers(context) {\n      _classCallCheck(this, Resource$Regionautoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionautoscalers, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionautoscalers;\n  }();\n\n  compute_alpha.Resource$Regionautoscalers = Resource$Regionautoscalers;\n\n  var Resource$Regionbackendservices = /*#__PURE__*/function () {\n    function Resource$Regionbackendservices(context) {\n      _classCallCheck(this, Resource$Regionbackendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionbackendservices, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionbackendservices;\n  }();\n\n  compute_alpha.Resource$Regionbackendservices = Resource$Regionbackendservices;\n\n  var Resource$Regioncommitments = /*#__PURE__*/function () {\n    function Resource$Regioncommitments(context) {\n      _classCallCheck(this, Resource$Regioncommitments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioncommitments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'commitment'],\n          pathParams: ['commitment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateReservations\",\n      value: function updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'commitment'],\n          pathParams: ['commitment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioncommitments;\n  }();\n\n  compute_alpha.Resource$Regioncommitments = Resource$Regioncommitments;\n\n  var Resource$Regiondisks = /*#__PURE__*/function () {\n    function Resource$Regiondisks(context) {\n      _classCallCheck(this, Resource$Regiondisks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisks, [{\n      key: \"addResourcePolicies\",\n      value: function addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeResourcePolicies\",\n      value: function removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisks;\n  }();\n\n  compute_alpha.Resource$Regiondisks = Resource$Regiondisks;\n\n  var Resource$Regiondisktypes = /*#__PURE__*/function () {\n    function Resource$Regiondisktypes(context) {\n      _classCallCheck(this, Resource$Regiondisktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisktypes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'diskType'],\n          pathParams: ['diskType', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisktypes;\n  }();\n\n  compute_alpha.Resource$Regiondisktypes = Resource$Regiondisktypes;\n\n  var Resource$Regionhealthchecks = /*#__PURE__*/function () {\n    function Resource$Regionhealthchecks(context) {\n      _classCallCheck(this, Resource$Regionhealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionhealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheck'],\n          pathParams: ['healthCheck', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheck'],\n          pathParams: ['healthCheck', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheck'],\n          pathParams: ['healthCheck', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheck'],\n          pathParams: ['healthCheck', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionhealthchecks;\n  }();\n\n  compute_alpha.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n\n  var Resource$Regionhealthcheckservices = /*#__PURE__*/function () {\n    function Resource$Regionhealthcheckservices(context) {\n      _classCallCheck(this, Resource$Regionhealthcheckservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionhealthcheckservices, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheckService'],\n          pathParams: ['healthCheckService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheckService'],\n          pathParams: ['healthCheckService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionhealthcheckservices;\n  }();\n\n  compute_alpha.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n\n  var Resource$Regioninstancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Regioninstancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"applyUpdatesToInstances\",\n      value: function applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createInstances\",\n      value: function createInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deletePerInstanceConfigs\",\n      value: function deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPerInstanceConfigs\",\n      value: function listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchPerInstanceConfigs\",\n      value: function patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAutoHealingPolicies\",\n      value: function setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updatePerInstanceConfigs\",\n      value: function updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroupmanagers;\n  }();\n\n  compute_alpha.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n\n  var Resource$Regioninstancegroups = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroups(context) {\n      _classCallCheck(this, Resource$Regioninstancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroups, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroups;\n  }();\n\n  compute_alpha.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n\n  var Resource$Regionnotificationendpoints = /*#__PURE__*/function () {\n    function Resource$Regionnotificationendpoints(context) {\n      _classCallCheck(this, Resource$Regionnotificationendpoints);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionnotificationendpoints, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'notificationEndpoint'],\n          pathParams: ['notificationEndpoint', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'notificationEndpoint'],\n          pathParams: ['notificationEndpoint', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionnotificationendpoints;\n  }();\n\n  compute_alpha.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n\n  var Resource$Regionoperations = /*#__PURE__*/function () {\n    function Resource$Regionoperations(context) {\n      _classCallCheck(this, Resource$Regionoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"wait\",\n      value: function wait(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionoperations;\n  }();\n\n  compute_alpha.Resource$Regionoperations = Resource$Regionoperations;\n\n  var Resource$Regions = /*#__PURE__*/function () {\n    function Resource$Regions(context) {\n      _classCallCheck(this, Resource$Regions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regions, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regions;\n  }();\n\n  compute_alpha.Resource$Regions = Resource$Regions;\n\n  var Resource$Regionsslcertificates = /*#__PURE__*/function () {\n    function Resource$Regionsslcertificates(context) {\n      _classCallCheck(this, Resource$Regionsslcertificates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionsslcertificates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'sslCertificate'],\n          pathParams: ['project', 'region', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'sslCertificate'],\n          pathParams: ['project', 'region', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionsslcertificates;\n  }();\n\n  compute_alpha.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n\n  var Resource$Regiontargethttpproxies = /*#__PURE__*/function () {\n    function Resource$Regiontargethttpproxies(context) {\n      _classCallCheck(this, Resource$Regiontargethttpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiontargethttpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpProxy'],\n          pathParams: ['project', 'region', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpProxy'],\n          pathParams: ['project', 'region', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpProxy'],\n          pathParams: ['project', 'region', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiontargethttpproxies;\n  }();\n\n  compute_alpha.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n\n  var Resource$Regiontargethttpsproxies = /*#__PURE__*/function () {\n    function Resource$Regiontargethttpsproxies(context) {\n      _classCallCheck(this, Resource$Regiontargethttpsproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiontargethttpsproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpsProxy'],\n          pathParams: ['project', 'region', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpsProxy'],\n          pathParams: ['project', 'region', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpsProxy'],\n          pathParams: ['project', 'region', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpsProxy'],\n          pathParams: ['project', 'region', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiontargethttpsproxies;\n  }();\n\n  compute_alpha.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n\n  var Resource$Regionurlmaps = /*#__PURE__*/function () {\n    function Resource$Regionurlmaps(context) {\n      _classCallCheck(this, Resource$Regionurlmaps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionurlmaps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"invalidateCache\",\n      value: function invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionurlmaps;\n  }();\n\n  compute_alpha.Resource$Regionurlmaps = Resource$Regionurlmaps;\n\n  var Resource$Reservations = /*#__PURE__*/function () {\n    function Resource$Reservations(context) {\n      _classCallCheck(this, Resource$Reservations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Reservations, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'reservation'],\n          pathParams: ['project', 'reservation', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'reservation'],\n          pathParams: ['project', 'reservation', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'reservation'],\n          pathParams: ['project', 'reservation', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Reservations;\n  }();\n\n  compute_alpha.Resource$Reservations = Resource$Reservations;\n\n  var Resource$Resourcepolicies = /*#__PURE__*/function () {\n    function Resource$Resourcepolicies(context) {\n      _classCallCheck(this, Resource$Resourcepolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resourcepolicies, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resourcePolicy'],\n          pathParams: ['project', 'region', 'resourcePolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resourcePolicy'],\n          pathParams: ['project', 'region', 'resourcePolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resourcepolicies;\n  }();\n\n  compute_alpha.Resource$Resourcepolicies = Resource$Resourcepolicies;\n\n  var Resource$Routers = /*#__PURE__*/function () {\n    function Resource$Routers(context) {\n      _classCallCheck(this, Resource$Routers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getNatMappingInfo\",\n      value: function getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRouterStatus\",\n      value: function getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"preview\",\n      value: function preview(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routers;\n  }();\n\n  compute_alpha.Resource$Routers = Resource$Routers;\n\n  var Resource$Routes = /*#__PURE__*/function () {\n    function Resource$Routes(context) {\n      _classCallCheck(this, Resource$Routes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routes, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routes;\n  }();\n\n  compute_alpha.Resource$Routes = Resource$Routes;\n\n  var Resource$Securitypolicies = /*#__PURE__*/function () {\n    function Resource$Securitypolicies(context) {\n      _classCallCheck(this, Resource$Securitypolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Securitypolicies, [{\n      key: \"addRule\",\n      value: function addRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRule\",\n      value: function getRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPreconfiguredExpressionSets\",\n      value: function listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchRule\",\n      value: function patchRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeRule\",\n      value: function removeRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Securitypolicies;\n  }();\n\n  compute_alpha.Resource$Securitypolicies = Resource$Securitypolicies;\n\n  var Resource$Snapshots = /*#__PURE__*/function () {\n    function Resource$Snapshots(context) {\n      _classCallCheck(this, Resource$Snapshots);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Snapshots, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Snapshots;\n  }();\n\n  compute_alpha.Resource$Snapshots = Resource$Snapshots;\n\n  var Resource$Sslcertificates = /*#__PURE__*/function () {\n    function Resource$Sslcertificates(context) {\n      _classCallCheck(this, Resource$Sslcertificates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslcertificates, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslcertificates;\n  }();\n\n  compute_alpha.Resource$Sslcertificates = Resource$Sslcertificates;\n\n  var Resource$Sslpolicies = /*#__PURE__*/function () {\n    function Resource$Sslpolicies(context) {\n      _classCallCheck(this, Resource$Sslpolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslpolicies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listAvailableFeatures\",\n      value: function listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslpolicies;\n  }();\n\n  compute_alpha.Resource$Sslpolicies = Resource$Sslpolicies;\n\n  var Resource$Subnetworks = /*#__PURE__*/function () {\n    function Resource$Subnetworks(context) {\n      _classCallCheck(this, Resource$Subnetworks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Subnetworks, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"expandIpCidrRange\",\n      value: function expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listUsable\",\n      value: function listUsable(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setPrivateIpGoogleAccess\",\n      value: function setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Subnetworks;\n  }();\n\n  compute_alpha.Resource$Subnetworks = Resource$Subnetworks;\n\n  var Resource$Targethttpproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpproxies(context) {\n      _classCallCheck(this, Resource$Targethttpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpproxies, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpproxies;\n  }();\n\n  compute_alpha.Resource$Targethttpproxies = Resource$Targethttpproxies;\n\n  var Resource$Targethttpsproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpsproxies(context) {\n      _classCallCheck(this, Resource$Targethttpsproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpsproxies, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setQuicOverride\",\n      value: function setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpsproxies;\n  }();\n\n  compute_alpha.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n\n  var Resource$Targetinstances = /*#__PURE__*/function () {\n    function Resource$Targetinstances(context) {\n      _classCallCheck(this, Resource$Targetinstances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetinstances, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetinstances;\n  }();\n\n  compute_alpha.Resource$Targetinstances = Resource$Targetinstances;\n\n  var Resource$Targetpools = /*#__PURE__*/function () {\n    function Resource$Targetpools(context) {\n      _classCallCheck(this, Resource$Targetpools);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetpools, [{\n      key: \"addHealthCheck\",\n      value: function addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"addInstance\",\n      value: function addInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeHealthCheck\",\n      value: function removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstance\",\n      value: function removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackup\",\n      value: function setBackup(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetpools;\n  }();\n\n  compute_alpha.Resource$Targetpools = Resource$Targetpools;\n\n  var Resource$Targetsslproxies = /*#__PURE__*/function () {\n    function Resource$Targetsslproxies(context) {\n      _classCallCheck(this, Resource$Targetsslproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetsslproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetsslproxies;\n  }();\n\n  compute_alpha.Resource$Targetsslproxies = Resource$Targetsslproxies;\n\n  var Resource$Targettcpproxies = /*#__PURE__*/function () {\n    function Resource$Targettcpproxies(context) {\n      _classCallCheck(this, Resource$Targettcpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targettcpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targettcpproxies;\n  }();\n\n  compute_alpha.Resource$Targettcpproxies = Resource$Targettcpproxies;\n\n  var Resource$Targetvpngateways = /*#__PURE__*/function () {\n    function Resource$Targetvpngateways(context) {\n      _classCallCheck(this, Resource$Targetvpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetvpngateways, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetvpngateways;\n  }();\n\n  compute_alpha.Resource$Targetvpngateways = Resource$Targetvpngateways;\n\n  var Resource$Urlmaps = /*#__PURE__*/function () {\n    function Resource$Urlmaps(context) {\n      _classCallCheck(this, Resource$Urlmaps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Urlmaps, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"invalidateCache\",\n      value: function invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Urlmaps;\n  }();\n\n  compute_alpha.Resource$Urlmaps = Resource$Urlmaps;\n\n  var Resource$Vpngateways = /*#__PURE__*/function () {\n    function Resource$Vpngateways(context) {\n      _classCallCheck(this, Resource$Vpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Vpngateways, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnGateway'],\n          pathParams: ['project', 'region', 'vpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnGateway'],\n          pathParams: ['project', 'region', 'vpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getStatus\",\n      value: function getStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnGateway'],\n          pathParams: ['project', 'region', 'vpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Vpngateways;\n  }();\n\n  compute_alpha.Resource$Vpngateways = Resource$Vpngateways;\n\n  var Resource$Vpntunnels = /*#__PURE__*/function () {\n    function Resource$Vpntunnels(context) {\n      _classCallCheck(this, Resource$Vpntunnels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Vpntunnels, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Vpntunnels;\n  }();\n\n  compute_alpha.Resource$Vpntunnels = Resource$Vpntunnels;\n\n  var Resource$Zoneoperations = /*#__PURE__*/function () {\n    function Resource$Zoneoperations(context) {\n      _classCallCheck(this, Resource$Zoneoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zoneoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"wait\",\n      value: function wait(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zoneoperations;\n  }();\n\n  compute_alpha.Resource$Zoneoperations = Resource$Zoneoperations;\n\n  var Resource$Zones = /*#__PURE__*/function () {\n    function Resource$Zones(context) {\n      _classCallCheck(this, Resource$Zones);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zones, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/alpha/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zones;\n  }();\n\n  compute_alpha.Resource$Zones = Resource$Zones;\n})(compute_alpha = exports.compute_alpha || (exports.compute_alpha = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/compute/alpha.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","compute_alpha","Compute","options","google","context","_options","acceleratorTypes","Resource$Acceleratortypes","addresses","Resource$Addresses","autoscalers","Resource$Autoscalers","backendBuckets","Resource$Backendbuckets","backendServices","Resource$Backendservices","disks","Resource$Disks","diskTypes","Resource$Disktypes","externalVpnGateways","Resource$Externalvpngateways","firewalls","Resource$Firewalls","forwardingRules","Resource$Forwardingrules","globalAddresses","Resource$Globaladdresses","globalForwardingRules","Resource$Globalforwardingrules","globalOperations","Resource$Globaloperations","globalOrganizationOperations","Resource$Globalorganizationoperations","healthChecks","Resource$Healthchecks","httpHealthChecks","Resource$Httphealthchecks","httpsHealthChecks","Resource$Httpshealthchecks","images","Resource$Images","instanceGroupManagers","Resource$Instancegroupmanagers","instanceGroups","Resource$Instancegroups","instances","Resource$Instances","instanceTemplates","Resource$Instancetemplates","interconnectAttachments","Resource$Interconnectattachments","interconnectLocations","Resource$Interconnectlocations","interconnects","Resource$Interconnects","licenseCodes","Resource$Licensecodes","licenses","Resource$Licenses","machineImages","Resource$Machineimages","machineTypes","Resource$Machinetypes","networkEndpointGroups","Resource$Networkendpointgroups","networks","Resource$Networks","nodeGroups","Resource$Nodegroups","nodeTemplates","Resource$Nodetemplates","nodeTypes","Resource$Nodetypes","organizationSecurityPolicies","Resource$Organizationsecuritypolicies","projects","Resource$Projects","regionAutoscalers","Resource$Regionautoscalers","regionBackendServices","Resource$Regionbackendservices","regionCommitments","Resource$Regioncommitments","regionDisks","Resource$Regiondisks","regionDiskTypes","Resource$Regiondisktypes","regionHealthChecks","Resource$Regionhealthchecks","regionHealthCheckServices","Resource$Regionhealthcheckservices","regionInstanceGroupManagers","Resource$Regioninstancegroupmanagers","regionInstanceGroups","Resource$Regioninstancegroups","regionNotificationEndpoints","Resource$Regionnotificationendpoints","regionOperations","Resource$Regionoperations","regions","Resource$Regions","regionSslCertificates","Resource$Regionsslcertificates","regionTargetHttpProxies","Resource$Regiontargethttpproxies","regionTargetHttpsProxies","Resource$Regiontargethttpsproxies","regionUrlMaps","Resource$Regionurlmaps","reservations","Resource$Reservations","resourcePolicies","Resource$Resourcepolicies","routers","Resource$Routers","routes","Resource$Routes","securityPolicies","Resource$Securitypolicies","snapshots","Resource$Snapshots","sslCertificates","Resource$Sslcertificates","sslPolicies","Resource$Sslpolicies","subnetworks","Resource$Subnetworks","targetHttpProxies","Resource$Targethttpproxies","targetHttpsProxies","Resource$Targethttpsproxies","targetInstances","Resource$Targetinstances","targetPools","Resource$Targetpools","targetSslProxies","Resource$Targetsslproxies","targetTcpProxies","Resource$Targettcpproxies","targetVpnGateways","Resource$Targetvpngateways","urlMaps","Resource$Urlmaps","vpnGateways","Resource$Vpngateways","vpnTunnels","Resource$Vpntunnels","zoneOperations","Resource$Zoneoperations","zones","Resource$Zones","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar compute_alpha;\n(function (compute_alpha) {\n    /**\n     * Compute Engine API\n     *\n     * Creates and runs virtual machines on Google Cloud Platform.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const compute = google.compute('alpha');\n     *\n     * @namespace compute\n     * @type {Function}\n     * @version alpha\n     * @variation alpha\n     * @param {object=} options Options for Compute\n     */\n    class Compute {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n            this.addresses = new Resource$Addresses(this.context);\n            this.autoscalers = new Resource$Autoscalers(this.context);\n            this.backendBuckets = new Resource$Backendbuckets(this.context);\n            this.backendServices = new Resource$Backendservices(this.context);\n            this.disks = new Resource$Disks(this.context);\n            this.diskTypes = new Resource$Disktypes(this.context);\n            this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n            this.firewalls = new Resource$Firewalls(this.context);\n            this.forwardingRules = new Resource$Forwardingrules(this.context);\n            this.globalAddresses = new Resource$Globaladdresses(this.context);\n            this.globalForwardingRules =\n                new Resource$Globalforwardingrules(this.context);\n            this.globalOperations = new Resource$Globaloperations(this.context);\n            this.globalOrganizationOperations =\n                new Resource$Globalorganizationoperations(this.context);\n            this.healthChecks = new Resource$Healthchecks(this.context);\n            this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n            this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n            this.images = new Resource$Images(this.context);\n            this.instanceGroupManagers =\n                new Resource$Instancegroupmanagers(this.context);\n            this.instanceGroups = new Resource$Instancegroups(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.instanceTemplates = new Resource$Instancetemplates(this.context);\n            this.interconnectAttachments =\n                new Resource$Interconnectattachments(this.context);\n            this.interconnectLocations =\n                new Resource$Interconnectlocations(this.context);\n            this.interconnects = new Resource$Interconnects(this.context);\n            this.licenseCodes = new Resource$Licensecodes(this.context);\n            this.licenses = new Resource$Licenses(this.context);\n            this.machineImages = new Resource$Machineimages(this.context);\n            this.machineTypes = new Resource$Machinetypes(this.context);\n            this.networkEndpointGroups =\n                new Resource$Networkendpointgroups(this.context);\n            this.networks = new Resource$Networks(this.context);\n            this.nodeGroups = new Resource$Nodegroups(this.context);\n            this.nodeTemplates = new Resource$Nodetemplates(this.context);\n            this.nodeTypes = new Resource$Nodetypes(this.context);\n            this.organizationSecurityPolicies =\n                new Resource$Organizationsecuritypolicies(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n            this.regionBackendServices =\n                new Resource$Regionbackendservices(this.context);\n            this.regionCommitments = new Resource$Regioncommitments(this.context);\n            this.regionDisks = new Resource$Regiondisks(this.context);\n            this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n            this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n            this.regionHealthCheckServices =\n                new Resource$Regionhealthcheckservices(this.context);\n            this.regionInstanceGroupManagers =\n                new Resource$Regioninstancegroupmanagers(this.context);\n            this.regionInstanceGroups =\n                new Resource$Regioninstancegroups(this.context);\n            this.regionNotificationEndpoints =\n                new Resource$Regionnotificationendpoints(this.context);\n            this.regionOperations = new Resource$Regionoperations(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.regionSslCertificates =\n                new Resource$Regionsslcertificates(this.context);\n            this.regionTargetHttpProxies =\n                new Resource$Regiontargethttpproxies(this.context);\n            this.regionTargetHttpsProxies =\n                new Resource$Regiontargethttpsproxies(this.context);\n            this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n            this.reservations = new Resource$Reservations(this.context);\n            this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n            this.routers = new Resource$Routers(this.context);\n            this.routes = new Resource$Routes(this.context);\n            this.securityPolicies = new Resource$Securitypolicies(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.sslCertificates = new Resource$Sslcertificates(this.context);\n            this.sslPolicies = new Resource$Sslpolicies(this.context);\n            this.subnetworks = new Resource$Subnetworks(this.context);\n            this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n            this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n            this.targetInstances = new Resource$Targetinstances(this.context);\n            this.targetPools = new Resource$Targetpools(this.context);\n            this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n            this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n            this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n            this.urlMaps = new Resource$Urlmaps(this.context);\n            this.vpnGateways = new Resource$Vpngateways(this.context);\n            this.vpnTunnels = new Resource$Vpntunnels(this.context);\n            this.zoneOperations = new Resource$Zoneoperations(this.context);\n            this.zones = new Resource$Zones(this.context);\n        }\n    }\n    compute_alpha.Compute = Compute;\n    class Resource$Acceleratortypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/acceleratorTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'acceleratorType'],\n                pathParams: ['acceleratorType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Acceleratortypes = Resource$Acceleratortypes;\n    class Resource$Addresses {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Addresses = Resource$Addresses;\n    class Resource$Autoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Autoscalers = Resource$Autoscalers;\n    class Resource$Backendbuckets {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket', 'keyName'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Backendbuckets = Resource$Backendbuckets;\n    class Resource$Backendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService', 'keyName'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Backendservices = Resource$Backendservices;\n    class Resource$Disks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Disks = Resource$Disks;\n    class Resource$Disktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/diskTypes/{diskType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'diskType'],\n                pathParams: ['diskType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Disktypes = Resource$Disktypes;\n    class Resource$Externalvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Externalvpngateways = Resource$Externalvpngateways;\n    class Resource$Firewalls {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Firewalls = Resource$Firewalls;\n    class Resource$Forwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Forwardingrules = Resource$Forwardingrules;\n    class Resource$Globaladdresses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globaladdresses = Resource$Globaladdresses;\n    class Resource$Globalforwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n    class Resource$Globaloperations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations/{operation}/wait')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globaloperations = Resource$Globaloperations;\n    class Resource$Globalorganizationoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/operations/{operation}/wait')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n    class Resource$Healthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Healthchecks = Resource$Healthchecks;\n    class Resource$Httphealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Httphealthchecks = Resource$Httphealthchecks;\n    class Resource$Httpshealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n    class Resource$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deprecate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}/deprecate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/family/{family}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'family'],\n                pathParams: ['family', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/images')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/images')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Images = Resource$Images;\n    class Resource$Instancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n    class Resource$Instancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancegroups = Resource$Instancegroups;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/attachDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/detachDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/serialPort')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/referrers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/reset')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/resume')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineType')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMetadata')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setScheduling')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTags(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setTags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        start(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/start')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/stop')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        suspend(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/suspend')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instances = Resource$Instances;\n    class Resource$Instancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancetemplates = Resource$Instancetemplates;\n    class Resource$Interconnectattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnectattachments = Resource$Interconnectattachments;\n    class Resource$Interconnectlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectLocations/{interconnectLocation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectLocation'],\n                pathParams: ['interconnectLocation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectLocations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectLocations/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnectlocations = Resource$Interconnectlocations;\n    class Resource$Interconnects {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}/getDiagnostics')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnects = Resource$Interconnects;\n    class Resource$Licensecodes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{licenseCode}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'licenseCode'],\n                pathParams: ['licenseCode', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Licensecodes = Resource$Licensecodes;\n    class Resource$Licenses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{license}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{license}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Licenses = Resource$Licenses;\n    class Resource$Machineimages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{machineImage}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{machineImage}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Machineimages = Resource$Machineimages;\n    class Resource$Machinetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/machineTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/machineTypes/{machineType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'machineType'],\n                pathParams: ['machineType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/machineTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Machinetypes = Resource$Machinetypes;\n    class Resource$Networkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n    class Resource$Networks {\n        constructor(context) {\n            this.context = context;\n        }\n        addPeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/addPeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listIpAddresses(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/listIpAddresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listIpOwners(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/listIpOwners')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/listPeeringRoutes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/removePeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/switchToCustomMode')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/updatePeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Networks = Resource$Networks;\n    class Resource$Nodegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'initialNodeCount'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAutoscalingPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setAutoscalingPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Nodegroups = Resource$Nodegroups;\n    class Resource$Nodetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Nodetemplates = Resource$Nodetemplates;\n    class Resource$Nodetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/nodeTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes/{nodeType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeType'],\n                pathParams: ['nodeType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Nodetypes = Resource$Nodetypes;\n    class Resource$Organizationsecuritypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/addAssociation')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/addRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        copyRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/copyRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/getAssociation')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/getRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/listAssociations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/move')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/patchRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/removeAssociation')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/removeRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/disableXpnResource')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/enableXpnResource')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/getXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/getXpnResources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/listXpnHosts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/moveDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/moveInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setCommonInstanceMetadata')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setDefaultNetworkTier')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDefaultServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setDefaultServiceAccount')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setUsageExportBucket')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Projects = Resource$Projects;\n    class Resource$Regionautoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionautoscalers = Resource$Regionautoscalers;\n    class Resource$Regionbackendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionbackendservices = Resource$Regionbackendservices;\n    class Resource$Regioncommitments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioncommitments = Resource$Regioncommitments;\n    class Resource$Regiondisks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/createSnapshot')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiondisks = Resource$Regiondisks;\n    class Resource$Regiondisktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/diskTypes/{diskType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'diskType'],\n                pathParams: ['diskType', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiondisktypes = Resource$Regiondisktypes;\n    class Resource$Regionhealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n    class Resource$Regionhealthcheckservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n    class Resource$Regioninstancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n    class Resource$Regioninstancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n    class Resource$Regionnotificationendpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n    class Resource$Regionoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}/wait')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionoperations = Resource$Regionoperations;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/regions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regions = Resource$Regions;\n    class Resource$Regionsslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n    class Resource$Regiontargethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n    class Resource$Regiontargethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n    class Resource$Regionurlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionurlmaps = Resource$Regionurlmaps;\n    class Resource$Reservations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/reservations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Reservations = Resource$Reservations;\n    class Resource$Resourcepolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/resourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Resourcepolicies = Resource$Resourcepolicies;\n    class Resource$Routers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getRouterStatus')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        preview(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/preview')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Routers = Resource$Routers;\n    class Resource$Routes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/routes/{route}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/routes/{route}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/routes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/routes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/routes/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Routes = Resource$Routes;\n    class Resource$Securitypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/addRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/getRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Securitypolicies = Resource$Securitypolicies;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{snapshot}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{snapshot}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Sslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Sslcertificates = Resource$Sslcertificates;\n    class Resource$Sslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/listAvailableFeatures')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Sslpolicies = Resource$Sslpolicies;\n    class Resource$Subnetworks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listUsable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/subnetworks/listUsable')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Subnetworks = Resource$Subnetworks;\n    class Resource$Targethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targethttpproxies = Resource$Targethttpproxies;\n    class Resource$Targethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n    class Resource$Targetinstances {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetinstances = Resource$Targetinstances;\n    class Resource$Targetpools {\n        constructor(context) {\n            this.context = context;\n        }\n        addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetpools = Resource$Targetpools;\n    class Resource$Targetsslproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetsslproxies = Resource$Targetsslproxies;\n    class Resource$Targettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targettcpproxies = Resource$Targettcpproxies;\n    class Resource$Targetvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetvpngateways = Resource$Targetvpngateways;\n    class Resource$Urlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/invalidateCache')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/validate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Urlmaps = Resource$Urlmaps;\n    class Resource$Vpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/vpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Vpngateways = Resource$Vpngateways;\n    class Resource$Vpntunnels {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Vpntunnels = Resource$Vpntunnels;\n    class Resource$Zoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}/wait')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Zoneoperations = Resource$Zoneoperations;\n    class Resource$Zones {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Zones = Resource$Zones;\n})(compute_alpha = exports.compute_alpha || (exports.compute_alpha = {}));\n//# sourceMappingURL=alpha.js.map"]},"metadata":{},"sourceType":"script"}