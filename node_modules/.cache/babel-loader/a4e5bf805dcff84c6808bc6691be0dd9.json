{"ast":null,"code":"var _jsxFileName = \"/Users/amandapoetker-alles/Desktop/campaign-dashboard/src/components/drive/Google-login.jsx\";\nimport React from 'react';\nimport { useGoogleLogin } from 'react-google-login'; // refresh token\n\nimport { refreshTokenSetup } from '../../utils/refreshToken';\nvar clientId = '626626889372-b418b5rcvvsfchh4sp9g8u70t8rd340d.apps.googleusercontent.com';\n\nfunction LoginHooks() {\n  var onSuccess = function onSuccess(res) {\n    console.log('Login Success: currentUser:', res.profileObj);\n    alert(\"Logged in successfully welcome \".concat(res.profileObj.name, \" \\uD83D\\uDE0D. \\n See console for full profile object.\"));\n    refreshTokenSetup(res);\n  };\n\n  var onFailure = function onFailure(res) {\n    console.log('Login failed: res:', res);\n    alert(\"Failed to login. \\uD83D\\uDE22 Please ping this to repo owner twitter.com/sivanesh_fiz\");\n  };\n\n  var _useGoogleLogin = useGoogleLogin({\n    onSuccess,\n    onFailure,\n    clientId,\n    isSignedIn: true,\n    accessType: 'offline' // responseType: 'code',\n    // prompt: 'consent',\n\n  }),\n      signIn = _useGoogleLogin.signIn;\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: signIn,\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"icons/google.svg\",\n    alt: \"google login\",\n    className: \"icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"buttonText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"Sign in with Google\"));\n}\n\nexport default LoginHooks;","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/src/components/drive/Google-login.jsx"],"names":["React","useGoogleLogin","refreshTokenSetup","clientId","LoginHooks","onSuccess","res","console","log","profileObj","alert","name","onFailure","isSignedIn","accessType","signIn"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,oBAA/B,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AAEA,IAAMC,QAAQ,GACZ,0EADF;;AAGA,SAASC,UAAT,GAAsB;AACpB,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAS;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,GAAG,CAACG,UAA/C;AACAC,IAAAA,KAAK,0CAC+BJ,GAAG,CAACG,UAAJ,CAAeE,IAD9C,4DAAL;AAGAT,IAAAA,iBAAiB,CAACI,GAAD,CAAjB;AACD,GAND;;AAQA,MAAMM,SAAS,GAAG,SAAZA,SAAY,CAACN,GAAD,EAAS;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,GAAlC;AACAI,IAAAA,KAAK,yFAAL;AAGD,GALD;;AAToB,wBAgBDT,cAAc,CAAC;AAChCI,IAAAA,SADgC;AAEhCO,IAAAA,SAFgC;AAGhCT,IAAAA,QAHgC;AAIhCU,IAAAA,UAAU,EAAE,IAJoB;AAKhCC,IAAAA,UAAU,EAAE,SALoB,CAMhC;AACA;;AAPgC,GAAD,CAhBb;AAAA,MAgBZC,MAhBY,mBAgBZA,MAhBY;;AA0BpB,sBACE;AAAQ,IAAA,OAAO,EAAEA,MAAjB;AAAyB,IAAA,SAAS,EAAC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAC,kBAAT;AAA4B,IAAA,GAAG,EAAC,cAAhC;AAA+C,IAAA,SAAS,EAAC,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAHF,CADF;AAOD;;AAED,eAAeX,UAAf","sourcesContent":["import React from 'react';\nimport { useGoogleLogin } from 'react-google-login';\n\n// refresh token\nimport { refreshTokenSetup } from '../../utils/refreshToken';\n\nconst clientId =\n  '626626889372-b418b5rcvvsfchh4sp9g8u70t8rd340d.apps.googleusercontent.com';\n\nfunction LoginHooks() {\n  const onSuccess = (res) => {\n    console.log('Login Success: currentUser:', res.profileObj);\n    alert(\n      `Logged in successfully welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`\n    );\n    refreshTokenSetup(res);\n  };\n\n  const onFailure = (res) => {\n    console.log('Login failed: res:', res);\n    alert(\n      `Failed to login. 😢 Please ping this to repo owner twitter.com/sivanesh_fiz`\n    );\n  };\n\n  const { signIn } = useGoogleLogin({\n    onSuccess,\n    onFailure,\n    clientId,\n    isSignedIn: true,\n    accessType: 'offline',\n    // responseType: 'code',\n    // prompt: 'consent',\n  });\n\n  return (\n    <button onClick={signIn} className=\"button\">\n      <img src=\"icons/google.svg\" alt=\"google login\" className=\"icon\"></img>\n\n      <span className=\"buttonText\">Sign in with Google</span>\n    </button>\n  );\n}\n\nexport default LoginHooks;"]},"metadata":{},"sourceType":"module"}