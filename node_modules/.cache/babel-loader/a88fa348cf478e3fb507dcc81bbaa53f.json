{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gtoken_1 = require(\"gtoken\");\n\nvar messages = require(\"../messages\");\n\nvar jwtaccess_1 = require(\"./jwtaccess\");\n\nvar oauth2client_1 = require(\"./oauth2client\");\n\nvar JWT = /*#__PURE__*/function (_oauth2client_1$OAuth) {\n  _inherits(JWT, _oauth2client_1$OAuth);\n\n  var _super2 = _createSuper(JWT);\n\n  function JWT(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    var _this;\n\n    _classCallCheck(this, JWT);\n\n    var opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile,\n      key,\n      keyId,\n      scopes,\n      subject\n    };\n    _this = _super2.call(this, {\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis\n    });\n    _this.email = opts.email;\n    _this.keyFile = opts.keyFile;\n    _this.key = opts.key;\n    _this.keyId = opts.keyId;\n    _this.scopes = opts.scopes;\n    _this.subject = opts.subject;\n    _this.additionalClaims = opts.additionalClaims;\n    _this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n    return _this;\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n\n\n  _createClass(JWT, [{\n    key: \"createScoped\",\n    value: function createScoped(scopes) {\n      return new JWT({\n        email: this.email,\n        keyFile: this.keyFile,\n        key: this.key,\n        keyId: this.keyId,\n        scopes,\n        subject: this.subject,\n        additionalClaims: this.additionalClaims\n      });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n\n  }, {\n    key: \"getRequestMetadataAsync\",\n    value: function getRequestMetadataAsync(url) {\n      var _this2 = this;\n\n      var _super = Object.create(null, {\n        getRequestMetadataAsync: {\n          get: function get() {\n            return _get(_getPrototypeOf(JWT.prototype), \"getRequestMetadataAsync\", _this2);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$this$refreshTo, tokens, headers;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.apiKey && !this.hasScopes() && url)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                if (!(this.additionalClaims && this.additionalClaims.target_audience)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.refreshToken();\n\n              case 4:\n                _yield$this$refreshTo = _context.sent;\n                tokens = _yield$this$refreshTo.tokens;\n                return _context.abrupt(\"return\", {\n                  headers: {\n                    Authorization: \"Bearer \".concat(tokens.id_token)\n                  }\n                });\n\n              case 9:\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                  this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n                }\n\n                _context.next = 12;\n                return this.access.getRequestHeaders(url, this.additionalClaims);\n\n              case 12:\n                headers = _context.sent;\n                return _context.abrupt(\"return\", {\n                  headers\n                });\n\n              case 14:\n                _context.next = 17;\n                break;\n\n              case 16:\n                return _context.abrupt(\"return\", _super.getRequestMetadataAsync.call(this, url));\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createScoped before use.\n     * @deprecated\n     * @return false if createScoped does not need to be called.\n     */\n\n  }, {\n    key: \"createScopedRequired\",\n    value: function createScopedRequired() {\n      messages.warn(messages.JWT_CREATE_SCOPED_DEPRECATED);\n      return !this.hasScopes();\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n\n  }, {\n    key: \"hasScopes\",\n    value: function hasScopes() {\n      if (!this.scopes) {\n        return false;\n      } // For arrays, check the array length.\n\n\n      if (this.scopes instanceof Array) {\n        return this.scopes.length > 0;\n      } // For others, convert to a string and check the length.\n\n\n      return String(this.scopes).length > 0;\n    }\n  }, {\n    key: \"authorize\",\n    value: function authorize(callback) {\n      if (callback) {\n        this.authorizeAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.authorizeAsync();\n      }\n    }\n  }, {\n    key: \"authorizeAsync\",\n    value: function authorizeAsync() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.refreshToken();\n\n              case 2:\n                result = _context2.sent;\n\n                if (result) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('No result returned');\n\n              case 5:\n                this.credentials = result.tokens;\n                this.credentials.refresh_token = 'jwt-placeholder';\n                this.key = this.gtoken.key;\n                this.email = this.gtoken.iss;\n                return _context2.abrupt(\"return\", result.tokens);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n\n  }, {\n    key: \"refreshTokenNoCache\",\n    value: function refreshTokenNoCache(refreshToken) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var gtoken, token, tokens;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                gtoken = this.createGToken();\n                _context3.next = 3;\n                return gtoken.getToken();\n\n              case 3:\n                token = _context3.sent;\n                tokens = {\n                  access_token: token,\n                  token_type: 'Bearer',\n                  expiry_date: gtoken.expiresAt,\n                  // tslint:disable-next-line no-any\n                  id_token: gtoken.rawToken.id_token\n                };\n                this.emit('tokens', tokens);\n                return _context3.abrupt(\"return\", {\n                  res: null,\n                  tokens\n                });\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n\n  }, {\n    key: \"createGToken\",\n    value: function createGToken() {\n      if (!this.gtoken) {\n        this.gtoken = new gtoken_1.GoogleToken({\n          iss: this.email,\n          sub: this.subject,\n          scope: this.scopes,\n          keyFile: this.keyFile,\n          key: this.key,\n          additionalClaims: this.additionalClaims\n        });\n      }\n\n      return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the service account auth settings.');\n      }\n\n      if (!json.client_email) {\n        throw new Error('The incoming JSON object does not contain a client_email field');\n      }\n\n      if (!json.private_key) {\n        throw new Error('The incoming JSON object does not contain a private_key field');\n      } // Extract the relevant information from the json key file.\n\n\n      this.email = json.client_email;\n      this.key = json.private_key;\n      this.keyId = json.private_key_id;\n      this.projectId = json.project_id;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream, callback) {\n      if (callback) {\n        this.fromStreamAsync(inputStream).then(function (r) {\n          return callback();\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the service account auth settings.');\n        }\n\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            var data = JSON.parse(s);\n\n            _this3.fromJSON(data);\n\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey) {\n      if (typeof apiKey !== 'string') {\n        throw new Error('Must provide an API Key string.');\n      }\n\n      this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n\n  }, {\n    key: \"getCredentials\",\n    value: function getCredentials() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var gtoken, creds;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.key) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  private_key: this.key,\n                  client_email: this.email\n                });\n\n              case 4:\n                if (!this.keyFile) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                gtoken = this.createGToken();\n                _context4.next = 8;\n                return gtoken.getCredentials(this.keyFile);\n\n              case 8:\n                creds = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  private_key: creds.privateKey,\n                  client_email: creds.clientEmail\n                });\n\n              case 10:\n                throw new Error('A key or a keyFile must be provided to getCredentials.');\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return JWT;\n}(oauth2client_1.OAuth2Client);\n\nexports.JWT = JWT;","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","gtoken_1","require","messages","jwtaccess_1","oauth2client_1","JWT","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","eagerRefreshThresholdMillis","additionalClaims","credentials","refresh_token","expiry_date","url","_super","create","getRequestMetadataAsync","get","apiKey","hasScopes","target_audience","refreshToken","tokens","headers","Authorization","id_token","access","JWTAccess","getRequestHeaders","call","warn","JWT_CREATE_SCOPED_DEPRECATED","Array","length","String","callback","authorizeAsync","r","Error","gtoken","iss","createGToken","getToken","token","access_token","token_type","expiresAt","rawToken","emit","res","GoogleToken","sub","scope","json","client_email","private_key","private_key_id","projectId","project_id","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","fromJSON","getCredentials","creds","privateKey","clientEmail","OAuth2Client"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gtoken_1 = require(\"gtoken\");\nconst messages = require(\"../messages\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = (optionsOrEmail && typeof optionsOrEmail === 'object') ?\n            optionsOrEmail :\n            { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super({ eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis });\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        return new JWT({\n            email: this.email,\n            keyFile: this.keyFile,\n            key: this.key,\n            keyId: this.keyId,\n            scopes,\n            subject: this.subject,\n            additionalClaims: this.additionalClaims\n        });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    getRequestMetadataAsync(url) {\n        const _super = Object.create(null, {\n            getRequestMetadataAsync: { get: () => super.getRequestMetadataAsync }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.apiKey && !this.hasScopes() && url) {\n                if (this.additionalClaims && this.additionalClaims.target_audience) {\n                    const { tokens } = yield this.refreshToken();\n                    return { headers: { Authorization: `Bearer ${tokens.id_token}` } };\n                }\n                else {\n                    // no scopes have been set, but a uri has been provided. Use JWTAccess\n                    // credentials.\n                    if (!this.access) {\n                        this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n                    }\n                    const headers = yield this.access.getRequestHeaders(url, this.additionalClaims);\n                    return { headers };\n                }\n            }\n            else {\n                return _super.getRequestMetadataAsync.call(this, url);\n            }\n        });\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createScoped before use.\n     * @deprecated\n     * @return false if createScoped does not need to be called.\n     */\n    createScopedRequired() {\n        messages.warn(messages.JWT_CREATE_SCOPED_DEPRECATED);\n        return !this.hasScopes();\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        // For arrays, check the array length.\n        if (this.scopes instanceof Array) {\n            return this.scopes.length > 0;\n        }\n        // For others, convert to a string and check the length.\n        return String(this.scopes).length > 0;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    authorizeAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.refreshToken();\n            if (!result) {\n                throw new Error('No result returned');\n            }\n            this.credentials = result.tokens;\n            this.credentials.refresh_token = 'jwt-placeholder';\n            this.key = this.gtoken.key;\n            this.email = this.gtoken.iss;\n            return result.tokens;\n        });\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    refreshTokenNoCache(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const gtoken = this.createGToken();\n            const token = yield gtoken.getToken();\n            const tokens = {\n                access_token: token,\n                token_type: 'Bearer',\n                expiry_date: gtoken.expiresAt,\n                // tslint:disable-next-line no-any\n                id_token: gtoken.rawToken.id_token\n            };\n            this.emit('tokens', tokens);\n            return { res: null, tokens };\n        });\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(r => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream.setEncoding('utf8')\n                .on('error', reject)\n                .on('data', (chunk) => s += chunk)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    getCredentials() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.key) {\n                return { private_key: this.key, client_email: this.email };\n            }\n            else if (this.keyFile) {\n                const gtoken = this.createGToken();\n                const creds = yield gtoken.getCredentials(this.keyFile);\n                return { private_key: creds.privateKey, client_email: creds.clientEmail };\n            }\n            throw new Error('A key or a keyFile must be provided to getCredentials.');\n        });\n    }\n}\nexports.JWT = JWT;\n//# sourceMappingURL=jwtclient.js.map"]},"metadata":{},"sourceType":"script"}