{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar clouddebugger_v2;\n\n(function (clouddebugger_v2) {\n  /**\n   * Stackdriver Debugger API\n   *\n   * Examines the call stack and variables of a running application without\n   * stopping or slowing it down.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const clouddebugger = google.clouddebugger('v2');\n   *\n   * @namespace clouddebugger\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Clouddebugger\n   */\n  var Clouddebugger = function Clouddebugger(options, google) {\n    _classCallCheck(this, Clouddebugger);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.controller = new Resource$Controller(this.context);\n    this.debugger = new Resource$Debugger(this.context);\n  };\n\n  clouddebugger_v2.Clouddebugger = Clouddebugger;\n\n  var Resource$Controller = function Resource$Controller(context) {\n    _classCallCheck(this, Resource$Controller);\n\n    this.context = context;\n    this.debuggees = new Resource$Controller$Debuggees(this.context);\n  };\n\n  clouddebugger_v2.Resource$Controller = Resource$Controller;\n\n  var Resource$Controller$Debuggees = /*#__PURE__*/function () {\n    function Resource$Controller$Debuggees(context) {\n      _classCallCheck(this, Resource$Controller$Debuggees);\n\n      this.context = context;\n      this.breakpoints = new Resource$Controller$Debuggees$Breakpoints(this.context);\n    }\n\n    _createClass(Resource$Controller$Debuggees, [{\n      key: \"register\",\n      value: function register(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/register').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Controller$Debuggees;\n  }();\n\n  clouddebugger_v2.Resource$Controller$Debuggees = Resource$Controller$Debuggees;\n\n  var Resource$Controller$Debuggees$Breakpoints = /*#__PURE__*/function () {\n    function Resource$Controller$Debuggees$Breakpoints(context) {\n      _classCallCheck(this, Resource$Controller$Debuggees$Breakpoints);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Controller$Debuggees$Breakpoints, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId'],\n          pathParams: ['debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId', 'id'],\n          pathParams: ['debuggeeId', 'id'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Controller$Debuggees$Breakpoints;\n  }();\n\n  clouddebugger_v2.Resource$Controller$Debuggees$Breakpoints = Resource$Controller$Debuggees$Breakpoints;\n\n  var Resource$Debugger = function Resource$Debugger(context) {\n    _classCallCheck(this, Resource$Debugger);\n\n    this.context = context;\n    this.debuggees = new Resource$Debugger$Debuggees(this.context);\n  };\n\n  clouddebugger_v2.Resource$Debugger = Resource$Debugger;\n\n  var Resource$Debugger$Debuggees = /*#__PURE__*/function () {\n    function Resource$Debugger$Debuggees(context) {\n      _classCallCheck(this, Resource$Debugger$Debuggees);\n\n      this.context = context;\n      this.breakpoints = new Resource$Debugger$Debuggees$Breakpoints(this.context);\n    }\n\n    _createClass(Resource$Debugger$Debuggees, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debugger$Debuggees;\n  }();\n\n  clouddebugger_v2.Resource$Debugger$Debuggees = Resource$Debugger$Debuggees;\n\n  var Resource$Debugger$Debuggees$Breakpoints = /*#__PURE__*/function () {\n    function Resource$Debugger$Debuggees$Breakpoints(context) {\n      _classCallCheck(this, Resource$Debugger$Debuggees$Breakpoints);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Debugger$Debuggees$Breakpoints, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId', 'breakpointId'],\n          pathParams: ['breakpointId', 'debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId', 'breakpointId'],\n          pathParams: ['breakpointId', 'debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId'],\n          pathParams: ['debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"set\",\n      value: function set(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/set').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId'],\n          pathParams: ['debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debugger$Debuggees$Breakpoints;\n  }();\n\n  clouddebugger_v2.Resource$Debugger$Debuggees$Breakpoints = Resource$Debugger$Debuggees$Breakpoints;\n})(clouddebugger_v2 = exports.clouddebugger_v2 || (exports.clouddebugger_v2 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/clouddebugger/v2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","clouddebugger_v2","Clouddebugger","options","google","context","_options","controller","Resource$Controller","debugger","Resource$Debugger","debuggees","Resource$Controller$Debuggees","breakpoints","Resource$Controller$Debuggees$Breakpoints","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Debugger$Debuggees","Resource$Debugger$Debuggees$Breakpoints"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar clouddebugger_v2;\n(function (clouddebugger_v2) {\n    /**\n     * Stackdriver Debugger API\n     *\n     * Examines the call stack and variables of a running application without\n     * stopping or slowing it down.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const clouddebugger = google.clouddebugger('v2');\n     *\n     * @namespace clouddebugger\n     * @type {Function}\n     * @version v2\n     * @variation v2\n     * @param {object=} options Options for Clouddebugger\n     */\n    class Clouddebugger {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.controller = new Resource$Controller(this.context);\n            this.debugger = new Resource$Debugger(this.context);\n        }\n    }\n    clouddebugger_v2.Clouddebugger = Clouddebugger;\n    class Resource$Controller {\n        constructor(context) {\n            this.context = context;\n            this.debuggees = new Resource$Controller$Debuggees(this.context);\n        }\n    }\n    clouddebugger_v2.Resource$Controller = Resource$Controller;\n    class Resource$Controller$Debuggees {\n        constructor(context) {\n            this.context = context;\n            this.breakpoints =\n                new Resource$Controller$Debuggees$Breakpoints(this.context);\n        }\n        register(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/controller/debuggees/register')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    clouddebugger_v2.Resource$Controller$Debuggees = Resource$Controller$Debuggees;\n    class Resource$Controller$Debuggees$Breakpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/controller/debuggees/{debuggeeId}/breakpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['debuggeeId'],\n                pathParams: ['debuggeeId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/controller/debuggees/{debuggeeId}/breakpoints/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['debuggeeId', 'id'],\n                pathParams: ['debuggeeId', 'id'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    clouddebugger_v2.Resource$Controller$Debuggees$Breakpoints = Resource$Controller$Debuggees$Breakpoints;\n    class Resource$Debugger {\n        constructor(context) {\n            this.context = context;\n            this.debuggees = new Resource$Debugger$Debuggees(this.context);\n        }\n    }\n    clouddebugger_v2.Resource$Debugger = Resource$Debugger;\n    class Resource$Debugger$Debuggees {\n        constructor(context) {\n            this.context = context;\n            this.breakpoints =\n                new Resource$Debugger$Debuggees$Breakpoints(this.context);\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/debugger/debuggees')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    clouddebugger_v2.Resource$Debugger$Debuggees = Resource$Debugger$Debuggees;\n    class Resource$Debugger$Debuggees$Breakpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['debuggeeId', 'breakpointId'],\n                pathParams: ['breakpointId', 'debuggeeId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['debuggeeId', 'breakpointId'],\n                pathParams: ['breakpointId', 'debuggeeId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['debuggeeId'],\n                pathParams: ['debuggeeId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        set(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/debugger/debuggees/{debuggeeId}/breakpoints/set')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['debuggeeId'],\n                pathParams: ['debuggeeId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    clouddebugger_v2.Resource$Debugger$Debuggees$Breakpoints = Resource$Debugger$Debuggees$Breakpoints;\n})(clouddebugger_v2 = exports.clouddebugger_v2 || (exports.clouddebugger_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}