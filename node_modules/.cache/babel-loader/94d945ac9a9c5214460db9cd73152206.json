{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dns_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar dns_v1;\n\n(function (dns_v1) {\n  /**\n   * Cloud DNS API\n   *\n   *\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const dns = google.dns('v1');\n   * ```\n   */\n  var Dns = function Dns(options, google) {\n    _classCallCheck(this, Dns);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.changes = new Resource$Changes(this.context);\n    this.dnsKeys = new Resource$Dnskeys(this.context);\n    this.managedZoneOperations = new Resource$Managedzoneoperations(this.context);\n    this.managedZones = new Resource$Managedzones(this.context);\n    this.policies = new Resource$Policies(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.resourceRecordSets = new Resource$Resourcerecordsets(this.context);\n  };\n\n  dns_v1.Dns = Dns;\n\n  var Resource$Changes = /*#__PURE__*/function () {\n    function Resource$Changes(context) {\n      _classCallCheck(this, Resource$Changes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Changes, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone', 'changeId'],\n          pathParams: ['changeId', 'managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Changes;\n  }();\n\n  dns_v1.Resource$Changes = Resource$Changes;\n\n  var Resource$Dnskeys = /*#__PURE__*/function () {\n    function Resource$Dnskeys(context) {\n      _classCallCheck(this, Resource$Dnskeys);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Dnskeys, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone', 'dnsKeyId'],\n          pathParams: ['dnsKeyId', 'managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Dnskeys;\n  }();\n\n  dns_v1.Resource$Dnskeys = Resource$Dnskeys;\n\n  var Resource$Managedzoneoperations = /*#__PURE__*/function () {\n    function Resource$Managedzoneoperations(context) {\n      _classCallCheck(this, Resource$Managedzoneoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedzoneoperations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone', 'operation'],\n          pathParams: ['managedZone', 'operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedzoneoperations;\n  }();\n\n  dns_v1.Resource$Managedzoneoperations = Resource$Managedzoneoperations;\n\n  var Resource$Managedzones = /*#__PURE__*/function () {\n    function Resource$Managedzones(context) {\n      _classCallCheck(this, Resource$Managedzones);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedzones, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedzones;\n  }();\n\n  dns_v1.Resource$Managedzones = Resource$Managedzones;\n\n  var Resource$Policies = /*#__PURE__*/function () {\n    function Resource$Policies(context) {\n      _classCallCheck(this, Resource$Policies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Policies, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'policy'],\n          pathParams: ['policy', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'policy'],\n          pathParams: ['policy', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'policy'],\n          pathParams: ['policy', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'policy'],\n          pathParams: ['policy', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Policies;\n  }();\n\n  dns_v1.Resource$Policies = Resource$Policies;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  dns_v1.Resource$Projects = Resource$Projects;\n\n  var Resource$Resourcerecordsets = /*#__PURE__*/function () {\n    function Resource$Resourcerecordsets(context) {\n      _classCallCheck(this, Resource$Resourcerecordsets);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resourcerecordsets, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resourcerecordsets;\n  }();\n\n  dns_v1.Resource$Resourcerecordsets = Resource$Resourcerecordsets;\n})(dns_v1 = exports.dns_v1 || (exports.dns_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/dns/v1.js"],"names":["Object","defineProperty","exports","value","dns_v1","googleapis_common_1","require","Dns","options","google","context","_options","changes","Resource$Changes","dnsKeys","Resource$Dnskeys","managedZoneOperations","Resource$Managedzoneoperations","managedZones","Resource$Managedzones","policies","Resource$Policies","projects","Resource$Projects","resourceRecordSets","Resource$Resourcerecordsets","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dns_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar dns_v1;\n(function (dns_v1) {\n    /**\n     * Cloud DNS API\n     *\n     *\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const dns = google.dns('v1');\n     * ```\n     */\n    class Dns {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.changes = new Resource$Changes(this.context);\n            this.dnsKeys = new Resource$Dnskeys(this.context);\n            this.managedZoneOperations = new Resource$Managedzoneoperations(this.context);\n            this.managedZones = new Resource$Managedzones(this.context);\n            this.policies = new Resource$Policies(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.resourceRecordSets = new Resource$Resourcerecordsets(this.context);\n        }\n    }\n    dns_v1.Dns = Dns;\n    class Resource$Changes {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone', 'changeId'],\n                pathParams: ['changeId', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Changes = Resource$Changes;\n    class Resource$Dnskeys {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone', 'dnsKeyId'],\n                pathParams: ['dnsKeyId', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Dnskeys = Resource$Dnskeys;\n    class Resource$Managedzoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone', 'operation'],\n                pathParams: ['managedZone', 'operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Managedzoneoperations = Resource$Managedzoneoperations;\n    class Resource$Managedzones {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Managedzones = Resource$Managedzones;\n    class Resource$Policies {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'policy'],\n                pathParams: ['policy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'policy'],\n                pathParams: ['policy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'policy'],\n                pathParams: ['policy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'policy'],\n                pathParams: ['policy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Policies = Resource$Policies;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Projects = Resource$Projects;\n    class Resource$Resourcerecordsets {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Resourcerecordsets = Resource$Resourcerecordsets;\n})(dns_v1 = exports.dns_v1 || (exports.dns_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}