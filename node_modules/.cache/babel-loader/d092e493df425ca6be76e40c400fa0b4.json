{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\"; // TODO: remove this once the capitalize method is moved to the @material-ui/utils package\n\nexport function capitalize(string) {\n  if (typeof string !== 'string') {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: capitalize(string) expects a string argument.\" : _formatMuiErrorMessage(7));\n  }\n\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction isEmpty(string) {\n  return string.length === 0;\n}\n/**\n * Generates string classKey based on the properties provided. It starts with the\n * variant if defined, and then it appends all other properties in alphabetical order.\n * @param {object} props - the properties for which the classKey should be created\n */\n\n\nexport default function propsToClassKey(props) {\n  var variant = props.variant,\n      rest = _objectWithoutPropertiesLoose(props, [\"variant\"]);\n\n  var classKey = variant || '';\n  Object.keys(rest).sort().forEach(function (key) {\n    if (key === 'color') {\n      classKey += isEmpty(classKey) ? props[key] : capitalize(props[key]);\n    } else {\n      classKey += \"\".concat(isEmpty(classKey) ? key : capitalize(key)).concat(capitalize(props[key]));\n    }\n  });\n  return classKey;\n}","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/@material-ui/styles/propsToClassKey/propsToClassKey.js"],"names":["_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","capitalize","string","Error","process","env","NODE_ENV","charAt","toUpperCase","slice","isEmpty","length","propsToClassKey","props","variant","rest","classKey","Object","keys","sort","forEach","key"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,SAASC,qBAAqB,IAAIC,sBAAlC,QAAgE,oBAAhE,C,CACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACjC,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAM,IAAIC,KAAJ,CAAUC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,kEAAuGN,sBAAsB,CAAC,CAAD,CAAvI,CAAN;AACD;;AAED,SAAOE,MAAM,CAACK,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCN,MAAM,CAACO,KAAP,CAAa,CAAb,CAAxC;AACD;;AAED,SAASC,OAAT,CAAiBR,MAAjB,EAAyB;AACvB,SAAOA,MAAM,CAACS,MAAP,KAAkB,CAAzB;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AACvC,MACJC,OADI,GAEFD,KAFE,CACJC,OADI;AAAA,MAGAC,IAHA,GAGOjB,6BAA6B,CAACe,KAAD,EAAQ,CAAC,SAAD,CAAR,CAHpC;;AAKN,MAAIG,QAAQ,GAAGF,OAAO,IAAI,EAA1B;AACAG,EAAAA,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,IAAlB,GAAyBC,OAAzB,CAAiC,UAAAC,GAAG,EAAI;AACtC,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACnBL,MAAAA,QAAQ,IAAIN,OAAO,CAACM,QAAD,CAAP,GAAoBH,KAAK,CAACQ,GAAD,CAAzB,GAAiCpB,UAAU,CAACY,KAAK,CAACQ,GAAD,CAAN,CAAvD;AACD,KAFD,MAEO;AACLL,MAAAA,QAAQ,cAAON,OAAO,CAACM,QAAD,CAAP,GAAoBK,GAApB,GAA0BpB,UAAU,CAACoB,GAAD,CAA3C,SAAmDpB,UAAU,CAACY,KAAK,CAACQ,GAAD,CAAN,CAA7D,CAAR;AACD;AACF,GAND;AAOA,SAAOL,QAAP;AACD","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\n// TODO: remove this once the capitalize method is moved to the @material-ui/utils package\nexport function capitalize(string) {\n  if (typeof string !== 'string') {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: capitalize(string) expects a string argument.` : _formatMuiErrorMessage(7));\n  }\n\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction isEmpty(string) {\n  return string.length === 0;\n}\n/**\n * Generates string classKey based on the properties provided. It starts with the\n * variant if defined, and then it appends all other properties in alphabetical order.\n * @param {object} props - the properties for which the classKey should be created\n */\n\n\nexport default function propsToClassKey(props) {\n  const {\n    variant\n  } = props,\n        rest = _objectWithoutPropertiesLoose(props, [\"variant\"]);\n\n  let classKey = variant || '';\n  Object.keys(rest).sort().forEach(key => {\n    if (key === 'color') {\n      classKey += isEmpty(classKey) ? props[key] : capitalize(props[key]);\n    } else {\n      classKey += `${isEmpty(classKey) ? key : capitalize(key)}${capitalize(props[key])}`;\n    }\n  });\n  return classKey;\n}"]},"metadata":{},"sourceType":"module"}