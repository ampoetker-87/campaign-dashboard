{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drive_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar drive_v2;\n\n(function (drive_v2) {\n  /**\n   * Drive API\n   *\n   * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const drive = google.drive('v2');\n   * ```\n   */\n  var Drive = function Drive(options, google) {\n    _classCallCheck(this, Drive);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.about = new Resource$About(this.context);\n    this.apps = new Resource$Apps(this.context);\n    this.changes = new Resource$Changes(this.context);\n    this.channels = new Resource$Channels(this.context);\n    this.children = new Resource$Children(this.context);\n    this.comments = new Resource$Comments(this.context);\n    this.drives = new Resource$Drives(this.context);\n    this.files = new Resource$Files(this.context);\n    this.parents = new Resource$Parents(this.context);\n    this.permissions = new Resource$Permissions(this.context);\n    this.properties = new Resource$Properties(this.context);\n    this.replies = new Resource$Replies(this.context);\n    this.revisions = new Resource$Revisions(this.context);\n    this.teamdrives = new Resource$Teamdrives(this.context);\n  };\n\n  drive_v2.Drive = Drive;\n\n  var Resource$About = /*#__PURE__*/function () {\n    function Resource$About(context) {\n      _classCallCheck(this, Resource$About);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$About, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/about').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$About;\n  }();\n\n  drive_v2.Resource$About = Resource$About;\n\n  var Resource$Apps = /*#__PURE__*/function () {\n    function Resource$Apps(context) {\n      _classCallCheck(this, Resource$Apps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/apps/{appId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appId'],\n          pathParams: ['appId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps;\n  }();\n\n  drive_v2.Resource$Apps = Resource$Apps;\n\n  var Resource$Changes = /*#__PURE__*/function () {\n    function Resource$Changes(context) {\n      _classCallCheck(this, Resource$Changes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Changes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['changeId'],\n          pathParams: ['changeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getStartPageToken\",\n      value: function getStartPageToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/changes/startPageToken').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/changes/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Changes;\n  }();\n\n  drive_v2.Resource$Changes = Resource$Changes;\n\n  var Resource$Channels = /*#__PURE__*/function () {\n    function Resource$Channels(context) {\n      _classCallCheck(this, Resource$Channels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Channels, [{\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Channels;\n  }();\n\n  drive_v2.Resource$Channels = Resource$Channels;\n\n  var Resource$Children = /*#__PURE__*/function () {\n    function Resource$Children(context) {\n      _classCallCheck(this, Resource$Children);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Children, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{folderId}/children/{childId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['folderId', 'childId'],\n          pathParams: ['childId', 'folderId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{folderId}/children/{childId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['folderId', 'childId'],\n          pathParams: ['childId', 'folderId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{folderId}/children').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['folderId'],\n          pathParams: ['folderId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{folderId}/children').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['folderId'],\n          pathParams: ['folderId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Children;\n  }();\n\n  drive_v2.Resource$Children = Resource$Children;\n\n  var Resource$Comments = /*#__PURE__*/function () {\n    function Resource$Comments(context) {\n      _classCallCheck(this, Resource$Comments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Comments, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Comments;\n  }();\n\n  drive_v2.Resource$Comments = Resource$Comments;\n\n  var Resource$Drives = /*#__PURE__*/function () {\n    function Resource$Drives(context) {\n      _classCallCheck(this, Resource$Drives);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Drives, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['driveId'],\n          pathParams: ['driveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['driveId'],\n          pathParams: ['driveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"hide\",\n      value: function hide(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/drives/{driveId}/hide').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['driveId'],\n          pathParams: ['driveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/drives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['requestId'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/drives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"unhide\",\n      value: function unhide(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/drives/{driveId}/unhide').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['driveId'],\n          pathParams: ['driveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['driveId'],\n          pathParams: ['driveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Drives;\n  }();\n\n  drive_v2.Resource$Drives = Resource$Drives;\n\n  var Resource$Files = /*#__PURE__*/function () {\n    function Resource$Files(context) {\n      _classCallCheck(this, Resource$Files);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Files, [{\n      key: \"copy\",\n      value: function copy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/copy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"emptyTrash\",\n      value: function emptyTrash(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/trash').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"export\",\n      value: function _export(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'mimeType'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateIds\",\n      value: function generateIds(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/generateIds').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"touch\",\n      value: function touch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/touch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"trash\",\n      value: function trash(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/trash').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"untrash\",\n      value: function untrash(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/untrash').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Files;\n  }();\n\n  drive_v2.Resource$Files = Resource$Files;\n\n  var Resource$Parents = /*#__PURE__*/function () {\n    function Resource$Parents(context) {\n      _classCallCheck(this, Resource$Parents);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Parents, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/parents/{parentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'parentId'],\n          pathParams: ['fileId', 'parentId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/parents/{parentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'parentId'],\n          pathParams: ['fileId', 'parentId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/parents').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/parents').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Parents;\n  }();\n\n  drive_v2.Resource$Parents = Resource$Parents;\n\n  var Resource$Permissions = /*#__PURE__*/function () {\n    function Resource$Permissions(context) {\n      _classCallCheck(this, Resource$Permissions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Permissions, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIdForEmail\",\n      value: function getIdForEmail(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/permissionIds/{email}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['email'],\n          pathParams: ['email'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Permissions;\n  }();\n\n  drive_v2.Resource$Permissions = Resource$Permissions;\n\n  var Resource$Properties = /*#__PURE__*/function () {\n    function Resource$Properties(context) {\n      _classCallCheck(this, Resource$Properties);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Properties, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'propertyKey'],\n          pathParams: ['fileId', 'propertyKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'propertyKey'],\n          pathParams: ['fileId', 'propertyKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'propertyKey'],\n          pathParams: ['fileId', 'propertyKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'propertyKey'],\n          pathParams: ['fileId', 'propertyKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Properties;\n  }();\n\n  drive_v2.Resource$Properties = Resource$Properties;\n\n  var Resource$Replies = /*#__PURE__*/function () {\n    function Resource$Replies(context) {\n      _classCallCheck(this, Resource$Replies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Replies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Replies;\n  }();\n\n  drive_v2.Resource$Replies = Resource$Replies;\n\n  var Resource$Revisions = /*#__PURE__*/function () {\n    function Resource$Revisions(context) {\n      _classCallCheck(this, Resource$Revisions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Revisions, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Revisions;\n  }();\n\n  drive_v2.Resource$Revisions = Resource$Revisions;\n\n  var Resource$Teamdrives = /*#__PURE__*/function () {\n    function Resource$Teamdrives(context) {\n      _classCallCheck(this, Resource$Teamdrives);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Teamdrives, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['teamDriveId'],\n          pathParams: ['teamDriveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['teamDriveId'],\n          pathParams: ['teamDriveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['requestId'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['teamDriveId'],\n          pathParams: ['teamDriveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Teamdrives;\n  }();\n\n  drive_v2.Resource$Teamdrives = Resource$Teamdrives;\n})(drive_v2 = exports.drive_v2 || (exports.drive_v2 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/drive/v2.js"],"names":["Object","defineProperty","exports","value","drive_v2","googleapis_common_1","require","Drive","options","google","context","_options","about","Resource$About","apps","Resource$Apps","changes","Resource$Changes","channels","Resource$Channels","children","Resource$Children","comments","Resource$Comments","drives","Resource$Drives","files","Resource$Files","parents","Resource$Parents","permissions","Resource$Permissions","properties","Resource$Properties","replies","Resource$Replies","revisions","Resource$Revisions","teamdrives","Resource$Teamdrives","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","mediaUrl"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drive_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar drive_v2;\n(function (drive_v2) {\n    /**\n     * Drive API\n     *\n     * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const drive = google.drive('v2');\n     * ```\n     */\n    class Drive {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.about = new Resource$About(this.context);\n            this.apps = new Resource$Apps(this.context);\n            this.changes = new Resource$Changes(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.children = new Resource$Children(this.context);\n            this.comments = new Resource$Comments(this.context);\n            this.drives = new Resource$Drives(this.context);\n            this.files = new Resource$Files(this.context);\n            this.parents = new Resource$Parents(this.context);\n            this.permissions = new Resource$Permissions(this.context);\n            this.properties = new Resource$Properties(this.context);\n            this.replies = new Resource$Replies(this.context);\n            this.revisions = new Resource$Revisions(this.context);\n            this.teamdrives = new Resource$Teamdrives(this.context);\n        }\n    }\n    drive_v2.Drive = Drive;\n    class Resource$About {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/about').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$About = Resource$About;\n    class Resource$Apps {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/apps/{appId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appId'],\n                pathParams: ['appId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Apps = Resource$Apps;\n    class Resource$Changes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['changeId'],\n                pathParams: ['changeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getStartPageToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/changes/startPageToken').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/changes/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Changes = Resource$Changes;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Channels = Resource$Channels;\n    class Resource$Children {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{folderId}/children/{childId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['folderId', 'childId'],\n                pathParams: ['childId', 'folderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{folderId}/children/{childId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['folderId', 'childId'],\n                pathParams: ['childId', 'folderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{folderId}/children').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['folderId'],\n                pathParams: ['folderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{folderId}/children').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['folderId'],\n                pathParams: ['folderId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Children = Resource$Children;\n    class Resource$Comments {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Comments = Resource$Comments;\n    class Resource$Drives {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        hide(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/drives/{driveId}/hide').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/drives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['requestId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/drives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unhide(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/drives/{driveId}/unhide').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Drives = Resource$Drives;\n    class Resource$Files {\n        constructor(context) {\n            this.context = context;\n        }\n        copy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/copy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        emptyTrash(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/trash').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'mimeType'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateIds(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/generateIds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        touch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/touch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        trash(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/trash').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        untrash(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/untrash').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Files = Resource$Files;\n    class Resource$Parents {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/parents/{parentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'parentId'],\n                pathParams: ['fileId', 'parentId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/parents/{parentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'parentId'],\n                pathParams: ['fileId', 'parentId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/parents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/parents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Parents = Resource$Parents;\n    class Resource$Permissions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIdForEmail(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/permissionIds/{email}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['email'],\n                pathParams: ['email'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Permissions = Resource$Permissions;\n    class Resource$Properties {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'propertyKey'],\n                pathParams: ['fileId', 'propertyKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'propertyKey'],\n                pathParams: ['fileId', 'propertyKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'propertyKey'],\n                pathParams: ['fileId', 'propertyKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'propertyKey'],\n                pathParams: ['fileId', 'propertyKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Properties = Resource$Properties;\n    class Resource$Replies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Replies = Resource$Replies;\n    class Resource$Revisions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Revisions = Resource$Revisions;\n    class Resource$Teamdrives {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['requestId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Teamdrives = Resource$Teamdrives;\n})(drive_v2 = exports.drive_v2 || (exports.drive_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}