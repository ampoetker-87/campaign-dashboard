{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.books_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar books_v1;\n\n(function (books_v1) {\n  /**\n   * Books API\n   *\n   * The Google Books API allows clients to access the Google Books repository.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const books = google.books('v1');\n   * ```\n   */\n  var Books = function Books(options, google) {\n    _classCallCheck(this, Books);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.bookshelves = new Resource$Bookshelves(this.context);\n    this.cloudloading = new Resource$Cloudloading(this.context);\n    this.dictionary = new Resource$Dictionary(this.context);\n    this.familysharing = new Resource$Familysharing(this.context);\n    this.layers = new Resource$Layers(this.context);\n    this.myconfig = new Resource$Myconfig(this.context);\n    this.mylibrary = new Resource$Mylibrary(this.context);\n    this.notification = new Resource$Notification(this.context);\n    this.onboarding = new Resource$Onboarding(this.context);\n    this.personalizedstream = new Resource$Personalizedstream(this.context);\n    this.promooffer = new Resource$Promooffer(this.context);\n    this.series = new Resource$Series(this.context);\n    this.volumes = new Resource$Volumes(this.context);\n  };\n\n  books_v1.Books = Books;\n\n  var Resource$Bookshelves = /*#__PURE__*/function () {\n    function Resource$Bookshelves(context) {\n      _classCallCheck(this, Resource$Bookshelves);\n\n      this.context = context;\n      this.volumes = new Resource$Bookshelves$Volumes(this.context);\n    }\n\n    _createClass(Resource$Bookshelves, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userId', 'shelf'],\n          pathParams: ['shelf', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userId'],\n          pathParams: ['userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Bookshelves;\n  }();\n\n  books_v1.Resource$Bookshelves = Resource$Bookshelves;\n\n  var Resource$Bookshelves$Volumes = /*#__PURE__*/function () {\n    function Resource$Bookshelves$Volumes(context) {\n      _classCallCheck(this, Resource$Bookshelves$Volumes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Bookshelves$Volumes, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userId', 'shelf'],\n          pathParams: ['shelf', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Bookshelves$Volumes;\n  }();\n\n  books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;\n\n  var Resource$Cloudloading = /*#__PURE__*/function () {\n    function Resource$Cloudloading(context) {\n      _classCallCheck(this, Resource$Cloudloading);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Cloudloading, [{\n      key: \"addBook\",\n      value: function addBook(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteBook\",\n      value: function deleteBook(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['volumeId'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateBook\",\n      value: function updateBook(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Cloudloading;\n  }();\n\n  books_v1.Resource$Cloudloading = Resource$Cloudloading;\n\n  var Resource$Dictionary = /*#__PURE__*/function () {\n    function Resource$Dictionary(context) {\n      _classCallCheck(this, Resource$Dictionary);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Dictionary, [{\n      key: \"listOfflineMetadata\",\n      value: function listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['cpksver'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Dictionary;\n  }();\n\n  books_v1.Resource$Dictionary = Resource$Dictionary;\n\n  var Resource$Familysharing = /*#__PURE__*/function () {\n    function Resource$Familysharing(context) {\n      _classCallCheck(this, Resource$Familysharing);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Familysharing, [{\n      key: \"getFamilyInfo\",\n      value: function getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"share\",\n      value: function share(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"unshare\",\n      value: function unshare(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Familysharing;\n  }();\n\n  books_v1.Resource$Familysharing = Resource$Familysharing;\n\n  var Resource$Layers = /*#__PURE__*/function () {\n    function Resource$Layers(context) {\n      _classCallCheck(this, Resource$Layers);\n\n      this.context = context;\n      this.annotationData = new Resource$Layers$Annotationdata(this.context);\n      this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);\n    }\n\n    _createClass(Resource$Layers, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['volumeId', 'summaryId'],\n          pathParams: ['summaryId', 'volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Layers;\n  }();\n\n  books_v1.Resource$Layers = Resource$Layers;\n\n  var Resource$Layers$Annotationdata = /*#__PURE__*/function () {\n    function Resource$Layers$Annotationdata(context) {\n      _classCallCheck(this, Resource$Layers$Annotationdata);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Layers$Annotationdata, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['volumeId', 'layerId', 'annotationDataId', 'contentVersion'],\n          pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n          pathParams: ['layerId', 'volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Layers$Annotationdata;\n  }();\n\n  books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;\n\n  var Resource$Layers$Volumeannotations = /*#__PURE__*/function () {\n    function Resource$Layers$Volumeannotations(context) {\n      _classCallCheck(this, Resource$Layers$Volumeannotations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Layers$Volumeannotations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['volumeId', 'layerId', 'annotationId'],\n          pathParams: ['annotationId', 'layerId', 'volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n          pathParams: ['layerId', 'volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Layers$Volumeannotations;\n  }();\n\n  books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;\n\n  var Resource$Myconfig = /*#__PURE__*/function () {\n    function Resource$Myconfig(context) {\n      _classCallCheck(this, Resource$Myconfig);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Myconfig, [{\n      key: \"getUserSettings\",\n      value: function getUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"releaseDownloadAccess\",\n      value: function releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['cpksver', 'volumeIds'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"requestAccess\",\n      value: function requestAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['cpksver', 'nonce', 'source', 'volumeId'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"syncVolumeLicenses\",\n      value: function syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['cpksver', 'nonce', 'source'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateUserSettings\",\n      value: function updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Myconfig;\n  }();\n\n  books_v1.Resource$Myconfig = Resource$Myconfig;\n\n  var Resource$Mylibrary = function Resource$Mylibrary(context) {\n    _classCallCheck(this, Resource$Mylibrary);\n\n    this.context = context;\n    this.annotations = new Resource$Mylibrary$Annotations(this.context);\n    this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);\n    this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);\n  };\n\n  books_v1.Resource$Mylibrary = Resource$Mylibrary;\n\n  var Resource$Mylibrary$Annotations = /*#__PURE__*/function () {\n    function Resource$Mylibrary$Annotations(context) {\n      _classCallCheck(this, Resource$Mylibrary$Annotations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Mylibrary$Annotations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['annotationId'],\n          pathParams: ['annotationId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"summary\",\n      value: function summary(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['layerIds', 'volumeId'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['annotationId'],\n          pathParams: ['annotationId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Mylibrary$Annotations;\n  }();\n\n  books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;\n\n  var Resource$Mylibrary$Bookshelves = /*#__PURE__*/function () {\n    function Resource$Mylibrary$Bookshelves(context) {\n      _classCallCheck(this, Resource$Mylibrary$Bookshelves);\n\n      this.context = context;\n      this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);\n    }\n\n    _createClass(Resource$Mylibrary$Bookshelves, [{\n      key: \"addVolume\",\n      value: function addVolume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['shelf', 'volumeId'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"clearVolumes\",\n      value: function clearVolumes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['shelf'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['shelf'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveVolume\",\n      value: function moveVolume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeVolume\",\n      value: function removeVolume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['shelf', 'volumeId'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Mylibrary$Bookshelves;\n  }();\n\n  books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;\n\n  var Resource$Mylibrary$Bookshelves$Volumes = /*#__PURE__*/function () {\n    function Resource$Mylibrary$Bookshelves$Volumes(context) {\n      _classCallCheck(this, Resource$Mylibrary$Bookshelves$Volumes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Mylibrary$Bookshelves$Volumes, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['shelf'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Mylibrary$Bookshelves$Volumes;\n  }();\n\n  books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;\n\n  var Resource$Mylibrary$Readingpositions = /*#__PURE__*/function () {\n    function Resource$Mylibrary$Readingpositions(context) {\n      _classCallCheck(this, Resource$Mylibrary$Readingpositions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Mylibrary$Readingpositions, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setPosition\",\n      value: function setPosition(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['volumeId', 'position', 'timestamp'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Mylibrary$Readingpositions;\n  }();\n\n  books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;\n\n  var Resource$Notification = /*#__PURE__*/function () {\n    function Resource$Notification(context) {\n      _classCallCheck(this, Resource$Notification);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Notification, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['notification_id'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Notification;\n  }();\n\n  books_v1.Resource$Notification = Resource$Notification;\n\n  var Resource$Onboarding = /*#__PURE__*/function () {\n    function Resource$Onboarding(context) {\n      _classCallCheck(this, Resource$Onboarding);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Onboarding, [{\n      key: \"listCategories\",\n      value: function listCategories(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listCategoryVolumes\",\n      value: function listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Onboarding;\n  }();\n\n  books_v1.Resource$Onboarding = Resource$Onboarding;\n\n  var Resource$Personalizedstream = /*#__PURE__*/function () {\n    function Resource$Personalizedstream(context) {\n      _classCallCheck(this, Resource$Personalizedstream);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Personalizedstream, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Personalizedstream;\n  }();\n\n  books_v1.Resource$Personalizedstream = Resource$Personalizedstream;\n\n  var Resource$Promooffer = /*#__PURE__*/function () {\n    function Resource$Promooffer(context) {\n      _classCallCheck(this, Resource$Promooffer);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Promooffer, [{\n      key: \"accept\",\n      value: function accept(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"dismiss\",\n      value: function dismiss(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Promooffer;\n  }();\n\n  books_v1.Resource$Promooffer = Resource$Promooffer;\n\n  var Resource$Series = /*#__PURE__*/function () {\n    function Resource$Series(context) {\n      _classCallCheck(this, Resource$Series);\n\n      this.context = context;\n      this.membership = new Resource$Series$Membership(this.context);\n    }\n\n    _createClass(Resource$Series, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['series_id'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Series;\n  }();\n\n  books_v1.Resource$Series = Resource$Series;\n\n  var Resource$Series$Membership = /*#__PURE__*/function () {\n    function Resource$Series$Membership(context) {\n      _classCallCheck(this, Resource$Series$Membership);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Series$Membership, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['series_id'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Series$Membership;\n  }();\n\n  books_v1.Resource$Series$Membership = Resource$Series$Membership;\n\n  var Resource$Volumes = /*#__PURE__*/function () {\n    function Resource$Volumes(context) {\n      _classCallCheck(this, Resource$Volumes);\n\n      this.context = context;\n      this.associated = new Resource$Volumes$Associated(this.context);\n      this.mybooks = new Resource$Volumes$Mybooks(this.context);\n      this.recommended = new Resource$Volumes$Recommended(this.context);\n      this.useruploaded = new Resource$Volumes$Useruploaded(this.context);\n    }\n\n    _createClass(Resource$Volumes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['q'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Volumes;\n  }();\n\n  books_v1.Resource$Volumes = Resource$Volumes;\n\n  var Resource$Volumes$Associated = /*#__PURE__*/function () {\n    function Resource$Volumes$Associated(context) {\n      _classCallCheck(this, Resource$Volumes$Associated);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Volumes$Associated, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Volumes$Associated;\n  }();\n\n  books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;\n\n  var Resource$Volumes$Mybooks = /*#__PURE__*/function () {\n    function Resource$Volumes$Mybooks(context) {\n      _classCallCheck(this, Resource$Volumes$Mybooks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Volumes$Mybooks, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Volumes$Mybooks;\n  }();\n\n  books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;\n\n  var Resource$Volumes$Recommended = /*#__PURE__*/function () {\n    function Resource$Volumes$Recommended(context) {\n      _classCallCheck(this, Resource$Volumes$Recommended);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Volumes$Recommended, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"rate\",\n      value: function rate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['rating', 'volumeId'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Volumes$Recommended;\n  }();\n\n  books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;\n\n  var Resource$Volumes$Useruploaded = /*#__PURE__*/function () {\n    function Resource$Volumes$Useruploaded(context) {\n      _classCallCheck(this, Resource$Volumes$Useruploaded);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Volumes$Useruploaded, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Volumes$Useruploaded;\n  }();\n\n  books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;\n})(books_v1 = exports.books_v1 || (exports.books_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/books/v1.js"],"names":["Object","defineProperty","exports","value","books_v1","googleapis_common_1","require","Books","options","google","context","_options","bookshelves","Resource$Bookshelves","cloudloading","Resource$Cloudloading","dictionary","Resource$Dictionary","familysharing","Resource$Familysharing","layers","Resource$Layers","myconfig","Resource$Myconfig","mylibrary","Resource$Mylibrary","notification","Resource$Notification","onboarding","Resource$Onboarding","personalizedstream","Resource$Personalizedstream","promooffer","Resource$Promooffer","series","Resource$Series","volumes","Resource$Volumes","Resource$Bookshelves$Volumes","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","annotationData","Resource$Layers$Annotationdata","volumeAnnotations","Resource$Layers$Volumeannotations","annotations","Resource$Mylibrary$Annotations","Resource$Mylibrary$Bookshelves","readingpositions","Resource$Mylibrary$Readingpositions","Resource$Mylibrary$Bookshelves$Volumes","membership","Resource$Series$Membership","associated","Resource$Volumes$Associated","mybooks","Resource$Volumes$Mybooks","recommended","Resource$Volumes$Recommended","useruploaded","Resource$Volumes$Useruploaded"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.books_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar books_v1;\n(function (books_v1) {\n    /**\n     * Books API\n     *\n     * The Google Books API allows clients to access the Google Books repository.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const books = google.books('v1');\n     * ```\n     */\n    class Books {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.bookshelves = new Resource$Bookshelves(this.context);\n            this.cloudloading = new Resource$Cloudloading(this.context);\n            this.dictionary = new Resource$Dictionary(this.context);\n            this.familysharing = new Resource$Familysharing(this.context);\n            this.layers = new Resource$Layers(this.context);\n            this.myconfig = new Resource$Myconfig(this.context);\n            this.mylibrary = new Resource$Mylibrary(this.context);\n            this.notification = new Resource$Notification(this.context);\n            this.onboarding = new Resource$Onboarding(this.context);\n            this.personalizedstream = new Resource$Personalizedstream(this.context);\n            this.promooffer = new Resource$Promooffer(this.context);\n            this.series = new Resource$Series(this.context);\n            this.volumes = new Resource$Volumes(this.context);\n        }\n    }\n    books_v1.Books = Books;\n    class Resource$Bookshelves {\n        constructor(context) {\n            this.context = context;\n            this.volumes = new Resource$Bookshelves$Volumes(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'shelf'],\n                pathParams: ['shelf', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Bookshelves = Resource$Bookshelves;\n    class Resource$Bookshelves$Volumes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'shelf'],\n                pathParams: ['shelf', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;\n    class Resource$Cloudloading {\n        constructor(context) {\n            this.context = context;\n        }\n        addBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Cloudloading = Resource$Cloudloading;\n    class Resource$Dictionary {\n        constructor(context) {\n            this.context = context;\n        }\n        listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['cpksver'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Dictionary = Resource$Dictionary;\n    class Resource$Familysharing {\n        constructor(context) {\n            this.context = context;\n        }\n        getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        share(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unshare(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Familysharing = Resource$Familysharing;\n    class Resource$Layers {\n        constructor(context) {\n            this.context = context;\n            this.annotationData = new Resource$Layers$Annotationdata(this.context);\n            this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'summaryId'],\n                pathParams: ['summaryId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers = Resource$Layers;\n    class Resource$Layers$Annotationdata {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'volumeId',\n                    'layerId',\n                    'annotationDataId',\n                    'contentVersion',\n                ],\n                pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n                pathParams: ['layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;\n    class Resource$Layers$Volumeannotations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'annotationId'],\n                pathParams: ['annotationId', 'layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n                pathParams: ['layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;\n    class Resource$Myconfig {\n        constructor(context) {\n            this.context = context;\n        }\n        getUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cpksver', 'volumeIds'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        requestAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cpksver', 'nonce', 'source', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cpksver', 'nonce', 'source'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Myconfig = Resource$Myconfig;\n    class Resource$Mylibrary {\n        constructor(context) {\n            this.context = context;\n            this.annotations = new Resource$Mylibrary$Annotations(this.context);\n            this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);\n            this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);\n        }\n    }\n    books_v1.Resource$Mylibrary = Resource$Mylibrary;\n    class Resource$Mylibrary$Annotations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['annotationId'],\n                pathParams: ['annotationId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        summary(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['layerIds', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['annotationId'],\n                pathParams: ['annotationId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;\n    class Resource$Mylibrary$Bookshelves {\n        constructor(context) {\n            this.context = context;\n            this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);\n        }\n        addVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        clearVolumes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;\n    class Resource$Mylibrary$Bookshelves$Volumes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;\n    class Resource$Mylibrary$Readingpositions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setPosition(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'position', 'timestamp'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;\n    class Resource$Notification {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['notification_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Notification = Resource$Notification;\n    class Resource$Onboarding {\n        constructor(context) {\n            this.context = context;\n        }\n        listCategories(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Onboarding = Resource$Onboarding;\n    class Resource$Personalizedstream {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Personalizedstream = Resource$Personalizedstream;\n    class Resource$Promooffer {\n        constructor(context) {\n            this.context = context;\n        }\n        accept(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        dismiss(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Promooffer = Resource$Promooffer;\n    class Resource$Series {\n        constructor(context) {\n            this.context = context;\n            this.membership = new Resource$Series$Membership(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['series_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Series = Resource$Series;\n    class Resource$Series$Membership {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['series_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Series$Membership = Resource$Series$Membership;\n    class Resource$Volumes {\n        constructor(context) {\n            this.context = context;\n            this.associated = new Resource$Volumes$Associated(this.context);\n            this.mybooks = new Resource$Volumes$Mybooks(this.context);\n            this.recommended = new Resource$Volumes$Recommended(this.context);\n            this.useruploaded = new Resource$Volumes$Useruploaded(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['q'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes = Resource$Volumes;\n    class Resource$Volumes$Associated {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;\n    class Resource$Volumes$Mybooks {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;\n    class Resource$Volumes$Recommended {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        rate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['rating', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;\n    class Resource$Volumes$Useruploaded {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;\n})(books_v1 = exports.books_v1 || (exports.books_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}