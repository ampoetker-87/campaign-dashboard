{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar cloudsearch_v1;\n\n(function (cloudsearch_v1) {\n  /**\n   * Cloud Search API\n   *\n   * Cloud Search provides cloud-based search capabilities over G Suite data.\n   * The Cloud Search API allows indexing of non-G Suite data into Cloud Search.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const cloudsearch = google.cloudsearch('v1');\n   *\n   * @namespace cloudsearch\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Cloudsearch\n   */\n  var Cloudsearch = function Cloudsearch(options, google) {\n    _classCallCheck(this, Cloudsearch);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.debug = new Resource$Debug(this.context);\n    this.indexing = new Resource$Indexing(this.context);\n    this.media = new Resource$Media(this.context);\n    this.operations = new Resource$Operations(this.context);\n    this.query = new Resource$Query(this.context);\n    this.settings = new Resource$Settings(this.context);\n    this.stats = new Resource$Stats(this.context);\n  };\n\n  cloudsearch_v1.Cloudsearch = Cloudsearch;\n\n  var Resource$Debug = function Resource$Debug(context) {\n    _classCallCheck(this, Resource$Debug);\n\n    this.context = context;\n    this.datasources = new Resource$Debug$Datasources(this.context);\n    this.identitysources = new Resource$Debug$Identitysources(this.context);\n  };\n\n  cloudsearch_v1.Resource$Debug = Resource$Debug;\n\n  var Resource$Debug$Datasources = function Resource$Debug$Datasources(context) {\n    _classCallCheck(this, Resource$Debug$Datasources);\n\n    this.context = context;\n    this.items = new Resource$Debug$Datasources$Items(this.context);\n  };\n\n  cloudsearch_v1.Resource$Debug$Datasources = Resource$Debug$Datasources;\n\n  var Resource$Debug$Datasources$Items = /*#__PURE__*/function () {\n    function Resource$Debug$Datasources$Items(context) {\n      _classCallCheck(this, Resource$Debug$Datasources$Items);\n\n      this.context = context;\n      this.unmappedids = new Resource$Debug$Datasources$Items$Unmappedids(this.context);\n    }\n\n    _createClass(Resource$Debug$Datasources$Items, [{\n      key: \"checkAccess\",\n      value: function checkAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+name}:checkAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"searchByViewUrl\",\n      value: function searchByViewUrl(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+name}/items:searchByViewUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debug$Datasources$Items;\n  }();\n\n  cloudsearch_v1.Resource$Debug$Datasources$Items = Resource$Debug$Datasources$Items;\n\n  var Resource$Debug$Datasources$Items$Unmappedids = /*#__PURE__*/function () {\n    function Resource$Debug$Datasources$Items$Unmappedids(context) {\n      _classCallCheck(this, Resource$Debug$Datasources$Items$Unmappedids);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Debug$Datasources$Items$Unmappedids, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debug$Datasources$Items$Unmappedids;\n  }();\n\n  cloudsearch_v1.Resource$Debug$Datasources$Items$Unmappedids = Resource$Debug$Datasources$Items$Unmappedids;\n\n  var Resource$Debug$Identitysources = function Resource$Debug$Identitysources(context) {\n    _classCallCheck(this, Resource$Debug$Identitysources);\n\n    this.context = context;\n    this.items = new Resource$Debug$Identitysources$Items(this.context);\n    this.unmappedids = new Resource$Debug$Identitysources$Unmappedids(this.context);\n  };\n\n  cloudsearch_v1.Resource$Debug$Identitysources = Resource$Debug$Identitysources;\n\n  var Resource$Debug$Identitysources$Items = /*#__PURE__*/function () {\n    function Resource$Debug$Identitysources$Items(context) {\n      _classCallCheck(this, Resource$Debug$Identitysources$Items);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Debug$Identitysources$Items, [{\n      key: \"listForunmappedidentity\",\n      value: function listForunmappedidentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+parent}/items:forunmappedidentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debug$Identitysources$Items;\n  }();\n\n  cloudsearch_v1.Resource$Debug$Identitysources$Items = Resource$Debug$Identitysources$Items;\n\n  var Resource$Debug$Identitysources$Unmappedids = /*#__PURE__*/function () {\n    function Resource$Debug$Identitysources$Unmappedids(context) {\n      _classCallCheck(this, Resource$Debug$Identitysources$Unmappedids);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Debug$Identitysources$Unmappedids, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debug$Identitysources$Unmappedids;\n  }();\n\n  cloudsearch_v1.Resource$Debug$Identitysources$Unmappedids = Resource$Debug$Identitysources$Unmappedids;\n\n  var Resource$Indexing = function Resource$Indexing(context) {\n    _classCallCheck(this, Resource$Indexing);\n\n    this.context = context;\n    this.datasources = new Resource$Indexing$Datasources(this.context);\n  };\n\n  cloudsearch_v1.Resource$Indexing = Resource$Indexing;\n\n  var Resource$Indexing$Datasources = /*#__PURE__*/function () {\n    function Resource$Indexing$Datasources(context) {\n      _classCallCheck(this, Resource$Indexing$Datasources);\n\n      this.context = context;\n      this.items = new Resource$Indexing$Datasources$Items(this.context);\n    }\n\n    _createClass(Resource$Indexing$Datasources, [{\n      key: \"deleteSchema\",\n      value: function deleteSchema(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getSchema\",\n      value: function getSchema(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateSchema\",\n      value: function updateSchema(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Indexing$Datasources;\n  }();\n\n  cloudsearch_v1.Resource$Indexing$Datasources = Resource$Indexing$Datasources;\n\n  var Resource$Indexing$Datasources$Items = /*#__PURE__*/function () {\n    function Resource$Indexing$Datasources$Items(context) {\n      _classCallCheck(this, Resource$Indexing$Datasources$Items);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Indexing$Datasources$Items, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteQueueItems\",\n      value: function deleteQueueItems(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/items:deleteQueueItems').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"index\",\n      value: function index(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}:index').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/items').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"poll\",\n      value: function poll(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/items:poll').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"push\",\n      value: function push(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}:push').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"unreserve\",\n      value: function unreserve(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/items:unreserve').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"upload\",\n      value: function upload(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Indexing$Datasources$Items;\n  }();\n\n  cloudsearch_v1.Resource$Indexing$Datasources$Items = Resource$Indexing$Datasources$Items;\n\n  var Resource$Media = /*#__PURE__*/function () {\n    function Resource$Media(context) {\n      _classCallCheck(this, Resource$Media);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Media, [{\n      key: \"upload\",\n      value: function upload(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: ['resourceName'],\n          pathParams: ['resourceName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Media;\n  }();\n\n  cloudsearch_v1.Resource$Media = Resource$Media;\n\n  var Resource$Operations = /*#__PURE__*/function () {\n    function Resource$Operations(context) {\n      _classCallCheck(this, Resource$Operations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Operations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Operations;\n  }();\n\n  cloudsearch_v1.Resource$Operations = Resource$Operations;\n\n  var Resource$Query = /*#__PURE__*/function () {\n    function Resource$Query(context) {\n      _classCallCheck(this, Resource$Query);\n\n      this.context = context;\n      this.sources = new Resource$Query$Sources(this.context);\n    }\n\n    _createClass(Resource$Query, [{\n      key: \"search\",\n      value: function search(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/query/search').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"suggest\",\n      value: function suggest(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/query/suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Query;\n  }();\n\n  cloudsearch_v1.Resource$Query = Resource$Query;\n\n  var Resource$Query$Sources = /*#__PURE__*/function () {\n    function Resource$Query$Sources(context) {\n      _classCallCheck(this, Resource$Query$Sources);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Query$Sources, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/query/sources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Query$Sources;\n  }();\n\n  cloudsearch_v1.Resource$Query$Sources = Resource$Query$Sources;\n\n  var Resource$Settings = function Resource$Settings(context) {\n    _classCallCheck(this, Resource$Settings);\n\n    this.context = context;\n    this.datasources = new Resource$Settings$Datasources(this.context);\n    this.searchapplications = new Resource$Settings$Searchapplications(this.context);\n  };\n\n  cloudsearch_v1.Resource$Settings = Resource$Settings;\n\n  var Resource$Settings$Datasources = /*#__PURE__*/function () {\n    function Resource$Settings$Datasources(context) {\n      _classCallCheck(this, Resource$Settings$Datasources);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Settings$Datasources, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Settings$Datasources;\n  }();\n\n  cloudsearch_v1.Resource$Settings$Datasources = Resource$Settings$Datasources;\n\n  var Resource$Settings$Searchapplications = /*#__PURE__*/function () {\n    function Resource$Settings$Searchapplications(context) {\n      _classCallCheck(this, Resource$Settings$Searchapplications);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Settings$Searchapplications, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reset\",\n      value: function reset(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}:reset').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Settings$Searchapplications;\n  }();\n\n  cloudsearch_v1.Resource$Settings$Searchapplications = Resource$Settings$Searchapplications;\n\n  var Resource$Stats = /*#__PURE__*/function () {\n    function Resource$Stats(context) {\n      _classCallCheck(this, Resource$Stats);\n\n      this.context = context;\n      this.index = new Resource$Stats$Index(this.context);\n    }\n\n    _createClass(Resource$Stats, [{\n      key: \"getIndex\",\n      value: function getIndex(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/index').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Stats;\n  }();\n\n  cloudsearch_v1.Resource$Stats = Resource$Stats;\n\n  var Resource$Stats$Index = function Resource$Stats$Index(context) {\n    _classCallCheck(this, Resource$Stats$Index);\n\n    this.context = context;\n    this.datasources = new Resource$Stats$Index$Datasources(this.context);\n  };\n\n  cloudsearch_v1.Resource$Stats$Index = Resource$Stats$Index;\n\n  var Resource$Stats$Index$Datasources = /*#__PURE__*/function () {\n    function Resource$Stats$Index$Datasources(context) {\n      _classCallCheck(this, Resource$Stats$Index$Datasources);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Stats$Index$Datasources, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/index/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Stats$Index$Datasources;\n  }();\n\n  cloudsearch_v1.Resource$Stats$Index$Datasources = Resource$Stats$Index$Datasources;\n})(cloudsearch_v1 = exports.cloudsearch_v1 || (exports.cloudsearch_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/cloudsearch/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","cloudsearch_v1","Cloudsearch","options","google","context","_options","debug","Resource$Debug","indexing","Resource$Indexing","media","Resource$Media","operations","Resource$Operations","query","Resource$Query","settings","Resource$Settings","stats","Resource$Stats","datasources","Resource$Debug$Datasources","identitysources","Resource$Debug$Identitysources","items","Resource$Debug$Datasources$Items","unmappedids","Resource$Debug$Datasources$Items$Unmappedids","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Debug$Identitysources$Items","Resource$Debug$Identitysources$Unmappedids","Resource$Indexing$Datasources","Resource$Indexing$Datasources$Items","mediaUrl","sources","Resource$Query$Sources","Resource$Settings$Datasources","searchapplications","Resource$Settings$Searchapplications","index","Resource$Stats$Index","Resource$Stats$Index$Datasources"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar cloudsearch_v1;\n(function (cloudsearch_v1) {\n    /**\n     * Cloud Search API\n     *\n     * Cloud Search provides cloud-based search capabilities over G Suite data.\n     * The Cloud Search API allows indexing of non-G Suite data into Cloud Search.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const cloudsearch = google.cloudsearch('v1');\n     *\n     * @namespace cloudsearch\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Cloudsearch\n     */\n    class Cloudsearch {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.debug = new Resource$Debug(this.context);\n            this.indexing = new Resource$Indexing(this.context);\n            this.media = new Resource$Media(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.query = new Resource$Query(this.context);\n            this.settings = new Resource$Settings(this.context);\n            this.stats = new Resource$Stats(this.context);\n        }\n    }\n    cloudsearch_v1.Cloudsearch = Cloudsearch;\n    class Resource$Debug {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Debug$Datasources(this.context);\n            this.identitysources = new Resource$Debug$Identitysources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug = Resource$Debug;\n    class Resource$Debug$Datasources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Debug$Datasources$Items(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources = Resource$Debug$Datasources;\n    class Resource$Debug$Datasources$Items {\n        constructor(context) {\n            this.context = context;\n            this.unmappedids =\n                new Resource$Debug$Datasources$Items$Unmappedids(this.context);\n        }\n        checkAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+name}:checkAccess')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        searchByViewUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+name}/items:searchByViewUrl')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources$Items = Resource$Debug$Datasources$Items;\n    class Resource$Debug$Datasources$Items$Unmappedids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/unmappedids')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources$Items$Unmappedids = Resource$Debug$Datasources$Items$Unmappedids;\n    class Resource$Debug$Identitysources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Debug$Identitysources$Items(this.context);\n            this.unmappedids =\n                new Resource$Debug$Identitysources$Unmappedids(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources = Resource$Debug$Identitysources;\n    class Resource$Debug$Identitysources$Items {\n        constructor(context) {\n            this.context = context;\n        }\n        listForunmappedidentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/items:forunmappedidentity')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources$Items = Resource$Debug$Identitysources$Items;\n    class Resource$Debug$Identitysources$Unmappedids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/unmappedids')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources$Unmappedids = Resource$Debug$Identitysources$Unmappedids;\n    class Resource$Indexing {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Indexing$Datasources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Indexing = Resource$Indexing;\n    class Resource$Indexing$Datasources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Indexing$Datasources$Items(this.context);\n        }\n        deleteSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Indexing$Datasources = Resource$Indexing$Datasources;\n    class Resource$Indexing$Datasources$Items {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteQueueItems(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:deleteQueueItems')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        index(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:index')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        poll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:poll')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        push(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:push')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unreserve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:unreserve')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:upload')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Indexing$Datasources$Items = Resource$Indexing$Datasources$Items;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/media/{+resourceName}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v1/media/{+resourceName}')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Media = Resource$Media;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Operations = Resource$Operations;\n    class Resource$Query {\n        constructor(context) {\n            this.context = context;\n            this.sources = new Resource$Query$Sources(this.context);\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        suggest(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Query = Resource$Query;\n    class Resource$Query$Sources {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/sources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Query$Sources = Resource$Query$Sources;\n    class Resource$Settings {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Settings$Datasources(this.context);\n            this.searchapplications =\n                new Resource$Settings$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Settings = Resource$Settings;\n    class Resource$Settings$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/datasources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/datasources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings$Datasources = Resource$Settings$Datasources;\n    class Resource$Settings$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/searchapplications')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/searchapplications')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}:reset')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings$Searchapplications = Resource$Settings$Searchapplications;\n    class Resource$Stats {\n        constructor(context) {\n            this.context = context;\n            this.index = new Resource$Stats$Index(this.context);\n        }\n        getIndex(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/index').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats = Resource$Stats;\n    class Resource$Stats$Index {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Stats$Index$Datasources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Index = Resource$Stats$Index;\n    class Resource$Stats$Index$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/index/{+name}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Index$Datasources = Resource$Stats$Index$Datasources;\n})(cloudsearch_v1 = exports.cloudsearch_v1 || (exports.cloudsearch_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}