{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloudsearch_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar cloudsearch_v1;\n\n(function (cloudsearch_v1) {\n  /**\n   * Cloud Search API\n   *\n   * Cloud Search provides cloud-based search capabilities over G Suite data. The Cloud Search API allows indexing of non-G Suite data into Cloud Search.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const cloudsearch = google.cloudsearch('v1');\n   * ```\n   */\n  var Cloudsearch = function Cloudsearch(options, google) {\n    _classCallCheck(this, Cloudsearch);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.debug = new Resource$Debug(this.context);\n    this.indexing = new Resource$Indexing(this.context);\n    this.media = new Resource$Media(this.context);\n    this.operations = new Resource$Operations(this.context);\n    this.query = new Resource$Query(this.context);\n    this.settings = new Resource$Settings(this.context);\n    this.stats = new Resource$Stats(this.context);\n  };\n\n  cloudsearch_v1.Cloudsearch = Cloudsearch;\n\n  var Resource$Debug = function Resource$Debug(context) {\n    _classCallCheck(this, Resource$Debug);\n\n    this.context = context;\n    this.datasources = new Resource$Debug$Datasources(this.context);\n    this.identitysources = new Resource$Debug$Identitysources(this.context);\n  };\n\n  cloudsearch_v1.Resource$Debug = Resource$Debug;\n\n  var Resource$Debug$Datasources = function Resource$Debug$Datasources(context) {\n    _classCallCheck(this, Resource$Debug$Datasources);\n\n    this.context = context;\n    this.items = new Resource$Debug$Datasources$Items(this.context);\n  };\n\n  cloudsearch_v1.Resource$Debug$Datasources = Resource$Debug$Datasources;\n\n  var Resource$Debug$Datasources$Items = /*#__PURE__*/function () {\n    function Resource$Debug$Datasources$Items(context) {\n      _classCallCheck(this, Resource$Debug$Datasources$Items);\n\n      this.context = context;\n      this.unmappedids = new Resource$Debug$Datasources$Items$Unmappedids(this.context);\n    }\n\n    _createClass(Resource$Debug$Datasources$Items, [{\n      key: \"checkAccess\",\n      value: function checkAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+name}:checkAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"searchByViewUrl\",\n      value: function searchByViewUrl(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+name}/items:searchByViewUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debug$Datasources$Items;\n  }();\n\n  cloudsearch_v1.Resource$Debug$Datasources$Items = Resource$Debug$Datasources$Items;\n\n  var Resource$Debug$Datasources$Items$Unmappedids = /*#__PURE__*/function () {\n    function Resource$Debug$Datasources$Items$Unmappedids(context) {\n      _classCallCheck(this, Resource$Debug$Datasources$Items$Unmappedids);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Debug$Datasources$Items$Unmappedids, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debug$Datasources$Items$Unmappedids;\n  }();\n\n  cloudsearch_v1.Resource$Debug$Datasources$Items$Unmappedids = Resource$Debug$Datasources$Items$Unmappedids;\n\n  var Resource$Debug$Identitysources = function Resource$Debug$Identitysources(context) {\n    _classCallCheck(this, Resource$Debug$Identitysources);\n\n    this.context = context;\n    this.items = new Resource$Debug$Identitysources$Items(this.context);\n    this.unmappedids = new Resource$Debug$Identitysources$Unmappedids(this.context);\n  };\n\n  cloudsearch_v1.Resource$Debug$Identitysources = Resource$Debug$Identitysources;\n\n  var Resource$Debug$Identitysources$Items = /*#__PURE__*/function () {\n    function Resource$Debug$Identitysources$Items(context) {\n      _classCallCheck(this, Resource$Debug$Identitysources$Items);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Debug$Identitysources$Items, [{\n      key: \"listForunmappedidentity\",\n      value: function listForunmappedidentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+parent}/items:forunmappedidentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debug$Identitysources$Items;\n  }();\n\n  cloudsearch_v1.Resource$Debug$Identitysources$Items = Resource$Debug$Identitysources$Items;\n\n  var Resource$Debug$Identitysources$Unmappedids = /*#__PURE__*/function () {\n    function Resource$Debug$Identitysources$Unmappedids(context) {\n      _classCallCheck(this, Resource$Debug$Identitysources$Unmappedids);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Debug$Identitysources$Unmappedids, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debug$Identitysources$Unmappedids;\n  }();\n\n  cloudsearch_v1.Resource$Debug$Identitysources$Unmappedids = Resource$Debug$Identitysources$Unmappedids;\n\n  var Resource$Indexing = function Resource$Indexing(context) {\n    _classCallCheck(this, Resource$Indexing);\n\n    this.context = context;\n    this.datasources = new Resource$Indexing$Datasources(this.context);\n  };\n\n  cloudsearch_v1.Resource$Indexing = Resource$Indexing;\n\n  var Resource$Indexing$Datasources = /*#__PURE__*/function () {\n    function Resource$Indexing$Datasources(context) {\n      _classCallCheck(this, Resource$Indexing$Datasources);\n\n      this.context = context;\n      this.items = new Resource$Indexing$Datasources$Items(this.context);\n    }\n\n    _createClass(Resource$Indexing$Datasources, [{\n      key: \"deleteSchema\",\n      value: function deleteSchema(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getSchema\",\n      value: function getSchema(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateSchema\",\n      value: function updateSchema(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Indexing$Datasources;\n  }();\n\n  cloudsearch_v1.Resource$Indexing$Datasources = Resource$Indexing$Datasources;\n\n  var Resource$Indexing$Datasources$Items = /*#__PURE__*/function () {\n    function Resource$Indexing$Datasources$Items(context) {\n      _classCallCheck(this, Resource$Indexing$Datasources$Items);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Indexing$Datasources$Items, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteQueueItems\",\n      value: function deleteQueueItems(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/items:deleteQueueItems').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"index\",\n      value: function index(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}:index').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/items').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"poll\",\n      value: function poll(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/items:poll').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"push\",\n      value: function push(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}:push').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"unreserve\",\n      value: function unreserve(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}/items:unreserve').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"upload\",\n      value: function upload(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/indexing/{+name}:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Indexing$Datasources$Items;\n  }();\n\n  cloudsearch_v1.Resource$Indexing$Datasources$Items = Resource$Indexing$Datasources$Items;\n\n  var Resource$Media = /*#__PURE__*/function () {\n    function Resource$Media(context) {\n      _classCallCheck(this, Resource$Media);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Media, [{\n      key: \"upload\",\n      value: function upload(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: ['resourceName'],\n          pathParams: ['resourceName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Media;\n  }();\n\n  cloudsearch_v1.Resource$Media = Resource$Media;\n\n  var Resource$Operations = /*#__PURE__*/function () {\n    function Resource$Operations(context) {\n      _classCallCheck(this, Resource$Operations);\n\n      this.context = context;\n      this.lro = new Resource$Operations$Lro(this.context);\n    }\n\n    _createClass(Resource$Operations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Operations;\n  }();\n\n  cloudsearch_v1.Resource$Operations = Resource$Operations;\n\n  var Resource$Operations$Lro = /*#__PURE__*/function () {\n    function Resource$Operations$Lro(context) {\n      _classCallCheck(this, Resource$Operations$Lro);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Operations$Lro, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}/lro').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Operations$Lro;\n  }();\n\n  cloudsearch_v1.Resource$Operations$Lro = Resource$Operations$Lro;\n\n  var Resource$Query = /*#__PURE__*/function () {\n    function Resource$Query(context) {\n      _classCallCheck(this, Resource$Query);\n\n      this.context = context;\n      this.sources = new Resource$Query$Sources(this.context);\n    }\n\n    _createClass(Resource$Query, [{\n      key: \"search\",\n      value: function search(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/query/search').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"suggest\",\n      value: function suggest(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/query/suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Query;\n  }();\n\n  cloudsearch_v1.Resource$Query = Resource$Query;\n\n  var Resource$Query$Sources = /*#__PURE__*/function () {\n    function Resource$Query$Sources(context) {\n      _classCallCheck(this, Resource$Query$Sources);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Query$Sources, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/query/sources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Query$Sources;\n  }();\n\n  cloudsearch_v1.Resource$Query$Sources = Resource$Query$Sources;\n\n  var Resource$Settings = function Resource$Settings(context) {\n    _classCallCheck(this, Resource$Settings);\n\n    this.context = context;\n    this.datasources = new Resource$Settings$Datasources(this.context);\n    this.searchapplications = new Resource$Settings$Searchapplications(this.context);\n  };\n\n  cloudsearch_v1.Resource$Settings = Resource$Settings;\n\n  var Resource$Settings$Datasources = /*#__PURE__*/function () {\n    function Resource$Settings$Datasources(context) {\n      _classCallCheck(this, Resource$Settings$Datasources);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Settings$Datasources, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Settings$Datasources;\n  }();\n\n  cloudsearch_v1.Resource$Settings$Datasources = Resource$Settings$Datasources;\n\n  var Resource$Settings$Searchapplications = /*#__PURE__*/function () {\n    function Resource$Settings$Searchapplications(context) {\n      _classCallCheck(this, Resource$Settings$Searchapplications);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Settings$Searchapplications, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reset\",\n      value: function reset(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}:reset').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Settings$Searchapplications;\n  }();\n\n  cloudsearch_v1.Resource$Settings$Searchapplications = Resource$Settings$Searchapplications;\n\n  var Resource$Stats = /*#__PURE__*/function () {\n    function Resource$Stats(context) {\n      _classCallCheck(this, Resource$Stats);\n\n      this.context = context;\n      this.index = new Resource$Stats$Index(this.context);\n      this.query = new Resource$Stats$Query(this.context);\n      this.session = new Resource$Stats$Session(this.context);\n      this.user = new Resource$Stats$User(this.context);\n    }\n\n    _createClass(Resource$Stats, [{\n      key: \"getIndex\",\n      value: function getIndex(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/index').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getQuery\",\n      value: function getQuery(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/query').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getSession\",\n      value: function getSession(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/session').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getUser\",\n      value: function getUser(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/user').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Stats;\n  }();\n\n  cloudsearch_v1.Resource$Stats = Resource$Stats;\n\n  var Resource$Stats$Index = function Resource$Stats$Index(context) {\n    _classCallCheck(this, Resource$Stats$Index);\n\n    this.context = context;\n    this.datasources = new Resource$Stats$Index$Datasources(this.context);\n  };\n\n  cloudsearch_v1.Resource$Stats$Index = Resource$Stats$Index;\n\n  var Resource$Stats$Index$Datasources = /*#__PURE__*/function () {\n    function Resource$Stats$Index$Datasources(context) {\n      _classCallCheck(this, Resource$Stats$Index$Datasources);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Stats$Index$Datasources, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/index/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Stats$Index$Datasources;\n  }();\n\n  cloudsearch_v1.Resource$Stats$Index$Datasources = Resource$Stats$Index$Datasources;\n\n  var Resource$Stats$Query = function Resource$Stats$Query(context) {\n    _classCallCheck(this, Resource$Stats$Query);\n\n    this.context = context;\n    this.searchapplications = new Resource$Stats$Query$Searchapplications(this.context);\n  };\n\n  cloudsearch_v1.Resource$Stats$Query = Resource$Stats$Query;\n\n  var Resource$Stats$Query$Searchapplications = /*#__PURE__*/function () {\n    function Resource$Stats$Query$Searchapplications(context) {\n      _classCallCheck(this, Resource$Stats$Query$Searchapplications);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Stats$Query$Searchapplications, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/query/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Stats$Query$Searchapplications;\n  }();\n\n  cloudsearch_v1.Resource$Stats$Query$Searchapplications = Resource$Stats$Query$Searchapplications;\n\n  var Resource$Stats$Session = function Resource$Stats$Session(context) {\n    _classCallCheck(this, Resource$Stats$Session);\n\n    this.context = context;\n    this.searchapplications = new Resource$Stats$Session$Searchapplications(this.context);\n  };\n\n  cloudsearch_v1.Resource$Stats$Session = Resource$Stats$Session;\n\n  var Resource$Stats$Session$Searchapplications = /*#__PURE__*/function () {\n    function Resource$Stats$Session$Searchapplications(context) {\n      _classCallCheck(this, Resource$Stats$Session$Searchapplications);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Stats$Session$Searchapplications, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/session/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Stats$Session$Searchapplications;\n  }();\n\n  cloudsearch_v1.Resource$Stats$Session$Searchapplications = Resource$Stats$Session$Searchapplications;\n\n  var Resource$Stats$User = function Resource$Stats$User(context) {\n    _classCallCheck(this, Resource$Stats$User);\n\n    this.context = context;\n    this.searchapplications = new Resource$Stats$User$Searchapplications(this.context);\n  };\n\n  cloudsearch_v1.Resource$Stats$User = Resource$Stats$User;\n\n  var Resource$Stats$User$Searchapplications = /*#__PURE__*/function () {\n    function Resource$Stats$User$Searchapplications(context) {\n      _classCallCheck(this, Resource$Stats$User$Searchapplications);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Stats$User$Searchapplications, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/stats/user/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Stats$User$Searchapplications;\n  }();\n\n  cloudsearch_v1.Resource$Stats$User$Searchapplications = Resource$Stats$User$Searchapplications;\n})(cloudsearch_v1 = exports.cloudsearch_v1 || (exports.cloudsearch_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/cloudsearch/v1.js"],"names":["Object","defineProperty","exports","value","cloudsearch_v1","googleapis_common_1","require","Cloudsearch","options","google","context","_options","debug","Resource$Debug","indexing","Resource$Indexing","media","Resource$Media","operations","Resource$Operations","query","Resource$Query","settings","Resource$Settings","stats","Resource$Stats","datasources","Resource$Debug$Datasources","identitysources","Resource$Debug$Identitysources","items","Resource$Debug$Datasources$Items","unmappedids","Resource$Debug$Datasources$Items$Unmappedids","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Debug$Identitysources$Items","Resource$Debug$Identitysources$Unmappedids","Resource$Indexing$Datasources","Resource$Indexing$Datasources$Items","mediaUrl","lro","Resource$Operations$Lro","sources","Resource$Query$Sources","Resource$Settings$Datasources","searchapplications","Resource$Settings$Searchapplications","index","Resource$Stats$Index","Resource$Stats$Query","session","Resource$Stats$Session","user","Resource$Stats$User","Resource$Stats$Index$Datasources","Resource$Stats$Query$Searchapplications","Resource$Stats$Session$Searchapplications","Resource$Stats$User$Searchapplications"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloudsearch_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar cloudsearch_v1;\n(function (cloudsearch_v1) {\n    /**\n     * Cloud Search API\n     *\n     * Cloud Search provides cloud-based search capabilities over G Suite data. The Cloud Search API allows indexing of non-G Suite data into Cloud Search.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const cloudsearch = google.cloudsearch('v1');\n     * ```\n     */\n    class Cloudsearch {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.debug = new Resource$Debug(this.context);\n            this.indexing = new Resource$Indexing(this.context);\n            this.media = new Resource$Media(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.query = new Resource$Query(this.context);\n            this.settings = new Resource$Settings(this.context);\n            this.stats = new Resource$Stats(this.context);\n        }\n    }\n    cloudsearch_v1.Cloudsearch = Cloudsearch;\n    class Resource$Debug {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Debug$Datasources(this.context);\n            this.identitysources = new Resource$Debug$Identitysources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug = Resource$Debug;\n    class Resource$Debug$Datasources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Debug$Datasources$Items(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources = Resource$Debug$Datasources;\n    class Resource$Debug$Datasources$Items {\n        constructor(context) {\n            this.context = context;\n            this.unmappedids = new Resource$Debug$Datasources$Items$Unmappedids(this.context);\n        }\n        checkAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+name}:checkAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        searchByViewUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+name}/items:searchByViewUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources$Items = Resource$Debug$Datasources$Items;\n    class Resource$Debug$Datasources$Items$Unmappedids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources$Items$Unmappedids = Resource$Debug$Datasources$Items$Unmappedids;\n    class Resource$Debug$Identitysources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Debug$Identitysources$Items(this.context);\n            this.unmappedids = new Resource$Debug$Identitysources$Unmappedids(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources = Resource$Debug$Identitysources;\n    class Resource$Debug$Identitysources$Items {\n        constructor(context) {\n            this.context = context;\n        }\n        listForunmappedidentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/items:forunmappedidentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources$Items = Resource$Debug$Identitysources$Items;\n    class Resource$Debug$Identitysources$Unmappedids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources$Unmappedids = Resource$Debug$Identitysources$Unmappedids;\n    class Resource$Indexing {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Indexing$Datasources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Indexing = Resource$Indexing;\n    class Resource$Indexing$Datasources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Indexing$Datasources$Items(this.context);\n        }\n        deleteSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Indexing$Datasources = Resource$Indexing$Datasources;\n    class Resource$Indexing$Datasources$Items {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteQueueItems(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:deleteQueueItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        index(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:index').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        poll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:poll').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        push(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:push').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unreserve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:unreserve').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Indexing$Datasources$Items = Resource$Indexing$Datasources$Items;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Media = Resource$Media;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n            this.lro = new Resource$Operations$Lro(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Operations = Resource$Operations;\n    class Resource$Operations$Lro {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/lro').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Operations$Lro = Resource$Operations$Lro;\n    class Resource$Query {\n        constructor(context) {\n            this.context = context;\n            this.sources = new Resource$Query$Sources(this.context);\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        suggest(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Query = Resource$Query;\n    class Resource$Query$Sources {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/sources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Query$Sources = Resource$Query$Sources;\n    class Resource$Settings {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Settings$Datasources(this.context);\n            this.searchapplications = new Resource$Settings$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Settings = Resource$Settings;\n    class Resource$Settings$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings$Datasources = Resource$Settings$Datasources;\n    class Resource$Settings$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}:reset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings$Searchapplications = Resource$Settings$Searchapplications;\n    class Resource$Stats {\n        constructor(context) {\n            this.context = context;\n            this.index = new Resource$Stats$Index(this.context);\n            this.query = new Resource$Stats$Query(this.context);\n            this.session = new Resource$Stats$Session(this.context);\n            this.user = new Resource$Stats$User(this.context);\n        }\n        getIndex(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/index').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getQuery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/query').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getSession(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/session').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getUser(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/user').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats = Resource$Stats;\n    class Resource$Stats$Index {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Stats$Index$Datasources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Index = Resource$Stats$Index;\n    class Resource$Stats$Index$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/index/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Index$Datasources = Resource$Stats$Index$Datasources;\n    class Resource$Stats$Query {\n        constructor(context) {\n            this.context = context;\n            this.searchapplications = new Resource$Stats$Query$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Query = Resource$Stats$Query;\n    class Resource$Stats$Query$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/query/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Query$Searchapplications = Resource$Stats$Query$Searchapplications;\n    class Resource$Stats$Session {\n        constructor(context) {\n            this.context = context;\n            this.searchapplications = new Resource$Stats$Session$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Session = Resource$Stats$Session;\n    class Resource$Stats$Session$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/session/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Session$Searchapplications = Resource$Stats$Session$Searchapplications;\n    class Resource$Stats$User {\n        constructor(context) {\n            this.context = context;\n            this.searchapplications = new Resource$Stats$User$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$User = Resource$Stats$User;\n    class Resource$Stats$User$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/user/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$User$Searchapplications = Resource$Stats$User$Searchapplications;\n})(cloudsearch_v1 = exports.cloudsearch_v1 || (exports.cloudsearch_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}