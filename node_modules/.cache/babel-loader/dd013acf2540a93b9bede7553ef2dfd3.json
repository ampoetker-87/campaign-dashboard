{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar dns_v1;\n\n(function (dns_v1) {\n  /**\n   * Google Cloud DNS API\n   *\n   * Configures and serves authoritative DNS records.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const dns = google.dns('v1');\n   *\n   * @namespace dns\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Dns\n   */\n  var Dns = function Dns(options, google) {\n    _classCallCheck(this, Dns);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.changes = new Resource$Changes(this.context);\n    this.dnsKeys = new Resource$Dnskeys(this.context);\n    this.managedZoneOperations = new Resource$Managedzoneoperations(this.context);\n    this.managedZones = new Resource$Managedzones(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.resourceRecordSets = new Resource$Resourcerecordsets(this.context);\n  };\n\n  dns_v1.Dns = Dns;\n\n  var Resource$Changes = /*#__PURE__*/function () {\n    function Resource$Changes(context) {\n      _classCallCheck(this, Resource$Changes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Changes, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone', 'changeId'],\n          pathParams: ['changeId', 'managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Changes;\n  }();\n\n  dns_v1.Resource$Changes = Resource$Changes;\n\n  var Resource$Dnskeys = /*#__PURE__*/function () {\n    function Resource$Dnskeys(context) {\n      _classCallCheck(this, Resource$Dnskeys);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Dnskeys, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone', 'dnsKeyId'],\n          pathParams: ['dnsKeyId', 'managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Dnskeys;\n  }();\n\n  dns_v1.Resource$Dnskeys = Resource$Dnskeys;\n\n  var Resource$Managedzoneoperations = /*#__PURE__*/function () {\n    function Resource$Managedzoneoperations(context) {\n      _classCallCheck(this, Resource$Managedzoneoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedzoneoperations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone', 'operation'],\n          pathParams: ['managedZone', 'operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedzoneoperations;\n  }();\n\n  dns_v1.Resource$Managedzoneoperations = Resource$Managedzoneoperations;\n\n  var Resource$Managedzones = /*#__PURE__*/function () {\n    function Resource$Managedzones(context) {\n      _classCallCheck(this, Resource$Managedzones);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedzones, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedzones;\n  }();\n\n  dns_v1.Resource$Managedzones = Resource$Managedzones;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  dns_v1.Resource$Projects = Resource$Projects;\n\n  var Resource$Resourcerecordsets = /*#__PURE__*/function () {\n    function Resource$Resourcerecordsets(context) {\n      _classCallCheck(this, Resource$Resourcerecordsets);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resourcerecordsets, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/dns/v1/projects/{project}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'managedZone'],\n          pathParams: ['managedZone', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resourcerecordsets;\n  }();\n\n  dns_v1.Resource$Resourcerecordsets = Resource$Resourcerecordsets;\n})(dns_v1 = exports.dns_v1 || (exports.dns_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/dns/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","dns_v1","Dns","options","google","context","_options","changes","Resource$Changes","dnsKeys","Resource$Dnskeys","managedZoneOperations","Resource$Managedzoneoperations","managedZones","Resource$Managedzones","projects","Resource$Projects","resourceRecordSets","Resource$Resourcerecordsets","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar dns_v1;\n(function (dns_v1) {\n    /**\n     * Google Cloud DNS API\n     *\n     * Configures and serves authoritative DNS records.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const dns = google.dns('v1');\n     *\n     * @namespace dns\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Dns\n     */\n    class Dns {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.changes = new Resource$Changes(this.context);\n            this.dnsKeys = new Resource$Dnskeys(this.context);\n            this.managedZoneOperations =\n                new Resource$Managedzoneoperations(this.context);\n            this.managedZones = new Resource$Managedzones(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.resourceRecordSets = new Resource$Resourcerecordsets(this.context);\n        }\n    }\n    dns_v1.Dns = Dns;\n    class Resource$Changes {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/changes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/changes/{changeId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone', 'changeId'],\n                pathParams: ['changeId', 'managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/changes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Changes = Resource$Changes;\n    class Resource$Dnskeys {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone', 'dnsKeyId'],\n                pathParams: ['dnsKeyId', 'managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Dnskeys = Resource$Dnskeys;\n    class Resource$Managedzoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone', 'operation'],\n                pathParams: ['managedZone', 'operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Managedzoneoperations = Resource$Managedzoneoperations;\n    class Resource$Managedzones {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Managedzones = Resource$Managedzones;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1/projects/{project}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Projects = Resource$Projects;\n    class Resource$Resourcerecordsets {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1/projects/{project}/managedZones/{managedZone}/rrsets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1.Resource$Resourcerecordsets = Resource$Resourcerecordsets;\n})(dns_v1 = exports.dns_v1 || (exports.dns_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}