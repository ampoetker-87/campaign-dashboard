{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar compute_v1;\n\n(function (compute_v1) {\n  /**\n   * Compute Engine API\n   *\n   * Creates and runs virtual machines on Google Cloud Platform.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const compute = google.compute('v1');\n   *\n   * @namespace compute\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Compute\n   */\n  var Compute = function Compute(options, google) {\n    _classCallCheck(this, Compute);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n    this.addresses = new Resource$Addresses(this.context);\n    this.autoscalers = new Resource$Autoscalers(this.context);\n    this.backendBuckets = new Resource$Backendbuckets(this.context);\n    this.backendServices = new Resource$Backendservices(this.context);\n    this.disks = new Resource$Disks(this.context);\n    this.diskTypes = new Resource$Disktypes(this.context);\n    this.firewalls = new Resource$Firewalls(this.context);\n    this.forwardingRules = new Resource$Forwardingrules(this.context);\n    this.globalAddresses = new Resource$Globaladdresses(this.context);\n    this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n    this.globalOperations = new Resource$Globaloperations(this.context);\n    this.healthChecks = new Resource$Healthchecks(this.context);\n    this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n    this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n    this.images = new Resource$Images(this.context);\n    this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n    this.instanceGroups = new Resource$Instancegroups(this.context);\n    this.instances = new Resource$Instances(this.context);\n    this.instanceTemplates = new Resource$Instancetemplates(this.context);\n    this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n    this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n    this.interconnects = new Resource$Interconnects(this.context);\n    this.licenseCodes = new Resource$Licensecodes(this.context);\n    this.licenses = new Resource$Licenses(this.context);\n    this.machineTypes = new Resource$Machinetypes(this.context);\n    this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n    this.networks = new Resource$Networks(this.context);\n    this.nodeGroups = new Resource$Nodegroups(this.context);\n    this.nodeTemplates = new Resource$Nodetemplates(this.context);\n    this.nodeTypes = new Resource$Nodetypes(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n    this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n    this.regionCommitments = new Resource$Regioncommitments(this.context);\n    this.regionDisks = new Resource$Regiondisks(this.context);\n    this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n    this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n    this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n    this.regionOperations = new Resource$Regionoperations(this.context);\n    this.regions = new Resource$Regions(this.context);\n    this.routers = new Resource$Routers(this.context);\n    this.routes = new Resource$Routes(this.context);\n    this.securityPolicies = new Resource$Securitypolicies(this.context);\n    this.snapshots = new Resource$Snapshots(this.context);\n    this.sslCertificates = new Resource$Sslcertificates(this.context);\n    this.sslPolicies = new Resource$Sslpolicies(this.context);\n    this.subnetworks = new Resource$Subnetworks(this.context);\n    this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n    this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n    this.targetInstances = new Resource$Targetinstances(this.context);\n    this.targetPools = new Resource$Targetpools(this.context);\n    this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n    this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n    this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n    this.urlMaps = new Resource$Urlmaps(this.context);\n    this.vpnTunnels = new Resource$Vpntunnels(this.context);\n    this.zoneOperations = new Resource$Zoneoperations(this.context);\n    this.zones = new Resource$Zones(this.context);\n  };\n\n  compute_v1.Compute = Compute;\n\n  var Resource$Acceleratortypes = /*#__PURE__*/function () {\n    function Resource$Acceleratortypes(context) {\n      _classCallCheck(this, Resource$Acceleratortypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Acceleratortypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'acceleratorType'],\n          pathParams: ['acceleratorType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Acceleratortypes;\n  }();\n\n  compute_v1.Resource$Acceleratortypes = Resource$Acceleratortypes;\n\n  var Resource$Addresses = /*#__PURE__*/function () {\n    function Resource$Addresses(context) {\n      _classCallCheck(this, Resource$Addresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Addresses, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Addresses;\n  }();\n\n  compute_v1.Resource$Addresses = Resource$Addresses;\n\n  var Resource$Autoscalers = /*#__PURE__*/function () {\n    function Resource$Autoscalers(context) {\n      _classCallCheck(this, Resource$Autoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Autoscalers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Autoscalers;\n  }();\n\n  compute_v1.Resource$Autoscalers = Resource$Autoscalers;\n\n  var Resource$Backendbuckets = /*#__PURE__*/function () {\n    function Resource$Backendbuckets(context) {\n      _classCallCheck(this, Resource$Backendbuckets);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendbuckets, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket', 'keyName'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendbuckets;\n  }();\n\n  compute_v1.Resource$Backendbuckets = Resource$Backendbuckets;\n\n  var Resource$Backendservices = /*#__PURE__*/function () {\n    function Resource$Backendservices(context) {\n      _classCallCheck(this, Resource$Backendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendservices, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService', 'keyName'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSecurityPolicy\",\n      value: function setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendservices;\n  }();\n\n  compute_v1.Resource$Backendservices = Resource$Backendservices;\n\n  var Resource$Disks = /*#__PURE__*/function () {\n    function Resource$Disks(context) {\n      _classCallCheck(this, Resource$Disks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disks, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disks;\n  }();\n\n  compute_v1.Resource$Disks = Resource$Disks;\n\n  var Resource$Disktypes = /*#__PURE__*/function () {\n    function Resource$Disktypes(context) {\n      _classCallCheck(this, Resource$Disktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disktypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'diskType'],\n          pathParams: ['diskType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disktypes;\n  }();\n\n  compute_v1.Resource$Disktypes = Resource$Disktypes;\n\n  var Resource$Firewalls = /*#__PURE__*/function () {\n    function Resource$Firewalls(context) {\n      _classCallCheck(this, Resource$Firewalls);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Firewalls, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Firewalls;\n  }();\n\n  compute_v1.Resource$Firewalls = Resource$Firewalls;\n\n  var Resource$Forwardingrules = /*#__PURE__*/function () {\n    function Resource$Forwardingrules(context) {\n      _classCallCheck(this, Resource$Forwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Forwardingrules, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Forwardingrules;\n  }();\n\n  compute_v1.Resource$Forwardingrules = Resource$Forwardingrules;\n\n  var Resource$Globaladdresses = /*#__PURE__*/function () {\n    function Resource$Globaladdresses(context) {\n      _classCallCheck(this, Resource$Globaladdresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaladdresses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaladdresses;\n  }();\n\n  compute_v1.Resource$Globaladdresses = Resource$Globaladdresses;\n\n  var Resource$Globalforwardingrules = /*#__PURE__*/function () {\n    function Resource$Globalforwardingrules(context) {\n      _classCallCheck(this, Resource$Globalforwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globalforwardingrules, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globalforwardingrules;\n  }();\n\n  compute_v1.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n\n  var Resource$Globaloperations = /*#__PURE__*/function () {\n    function Resource$Globaloperations(context) {\n      _classCallCheck(this, Resource$Globaloperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaloperations, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaloperations;\n  }();\n\n  compute_v1.Resource$Globaloperations = Resource$Globaloperations;\n\n  var Resource$Healthchecks = /*#__PURE__*/function () {\n    function Resource$Healthchecks(context) {\n      _classCallCheck(this, Resource$Healthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Healthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Healthchecks;\n  }();\n\n  compute_v1.Resource$Healthchecks = Resource$Healthchecks;\n\n  var Resource$Httphealthchecks = /*#__PURE__*/function () {\n    function Resource$Httphealthchecks(context) {\n      _classCallCheck(this, Resource$Httphealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httphealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httphealthchecks;\n  }();\n\n  compute_v1.Resource$Httphealthchecks = Resource$Httphealthchecks;\n\n  var Resource$Httpshealthchecks = /*#__PURE__*/function () {\n    function Resource$Httpshealthchecks(context) {\n      _classCallCheck(this, Resource$Httpshealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httpshealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httpshealthchecks;\n  }();\n\n  compute_v1.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n\n  var Resource$Images = /*#__PURE__*/function () {\n    function Resource$Images(context) {\n      _classCallCheck(this, Resource$Images);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Images, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deprecate\",\n      value: function deprecate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getFromFamily\",\n      value: function getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'family'],\n          pathParams: ['family', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Images;\n  }();\n\n  compute_v1.Resource$Images = Resource$Images;\n\n  var Resource$Instancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Instancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Instancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroupmanagers;\n  }();\n\n  compute_v1.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n\n  var Resource$Instancegroups = /*#__PURE__*/function () {\n    function Resource$Instancegroups(context) {\n      _classCallCheck(this, Resource$Instancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroups, [{\n      key: \"addInstances\",\n      value: function addInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstances\",\n      value: function removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroups;\n  }();\n\n  compute_v1.Resource$Instancegroups = Resource$Instancegroups;\n\n  var Resource$Instances = /*#__PURE__*/function () {\n    function Resource$Instances(context) {\n      _classCallCheck(this, Resource$Instances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instances, [{\n      key: \"addAccessConfig\",\n      value: function addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachDisk\",\n      value: function attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteAccessConfig\",\n      value: function deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachDisk\",\n      value: function detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getSerialPortOutput\",\n      value: function getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getShieldedInstanceIdentity\",\n      value: function getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listReferrers\",\n      value: function listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reset\",\n      value: function reset(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDeletionProtection\",\n      value: function setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDiskAutoDelete\",\n      value: function setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineResources\",\n      value: function setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineType\",\n      value: function setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMetadata\",\n      value: function setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMinCpuPlatform\",\n      value: function setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setScheduling\",\n      value: function setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setServiceAccount\",\n      value: function setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setShieldedInstanceIntegrityPolicy\",\n      value: function setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTags\",\n      value: function setTags(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"simulateMaintenanceEvent\",\n      value: function simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"start\",\n      value: function start(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"startWithEncryptionKey\",\n      value: function startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateAccessConfig\",\n      value: function updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateNetworkInterface\",\n      value: function updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateShieldedInstanceConfig\",\n      value: function updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instances;\n  }();\n\n  compute_v1.Resource$Instances = Resource$Instances;\n\n  var Resource$Instancetemplates = /*#__PURE__*/function () {\n    function Resource$Instancetemplates(context) {\n      _classCallCheck(this, Resource$Instancetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancetemplates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancetemplates;\n  }();\n\n  compute_v1.Resource$Instancetemplates = Resource$Instancetemplates;\n\n  var Resource$Interconnectattachments = /*#__PURE__*/function () {\n    function Resource$Interconnectattachments(context) {\n      _classCallCheck(this, Resource$Interconnectattachments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectattachments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectattachments;\n  }();\n\n  compute_v1.Resource$Interconnectattachments = Resource$Interconnectattachments;\n\n  var Resource$Interconnectlocations = /*#__PURE__*/function () {\n    function Resource$Interconnectlocations(context) {\n      _classCallCheck(this, Resource$Interconnectlocations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectlocations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnectLocation'],\n          pathParams: ['interconnectLocation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectlocations;\n  }();\n\n  compute_v1.Resource$Interconnectlocations = Resource$Interconnectlocations;\n\n  var Resource$Interconnects = /*#__PURE__*/function () {\n    function Resource$Interconnects(context) {\n      _classCallCheck(this, Resource$Interconnects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnects, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getDiagnostics\",\n      value: function getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnects;\n  }();\n\n  compute_v1.Resource$Interconnects = Resource$Interconnects;\n\n  var Resource$Licensecodes = /*#__PURE__*/function () {\n    function Resource$Licensecodes(context) {\n      _classCallCheck(this, Resource$Licensecodes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licensecodes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'licenseCode'],\n          pathParams: ['licenseCode', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenseCodes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licensecodes;\n  }();\n\n  compute_v1.Resource$Licensecodes = Resource$Licensecodes;\n\n  var Resource$Licenses = /*#__PURE__*/function () {\n    function Resource$Licenses(context) {\n      _classCallCheck(this, Resource$Licenses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licenses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licenses;\n  }();\n\n  compute_v1.Resource$Licenses = Resource$Licenses;\n\n  var Resource$Machinetypes = /*#__PURE__*/function () {\n    function Resource$Machinetypes(context) {\n      _classCallCheck(this, Resource$Machinetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Machinetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'machineType'],\n          pathParams: ['machineType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Machinetypes;\n  }();\n\n  compute_v1.Resource$Machinetypes = Resource$Machinetypes;\n\n  var Resource$Networkendpointgroups = /*#__PURE__*/function () {\n    function Resource$Networkendpointgroups(context) {\n      _classCallCheck(this, Resource$Networkendpointgroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networkendpointgroups, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachNetworkEndpoints\",\n      value: function attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachNetworkEndpoints\",\n      value: function detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNetworkEndpoints\",\n      value: function listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networkendpointgroups;\n  }();\n\n  compute_v1.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n\n  var Resource$Networks = /*#__PURE__*/function () {\n    function Resource$Networks(context) {\n      _classCallCheck(this, Resource$Networks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networks, [{\n      key: \"addPeering\",\n      value: function addPeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removePeering\",\n      value: function removePeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"switchToCustomMode\",\n      value: function switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networks;\n  }();\n\n  compute_v1.Resource$Networks = Resource$Networks;\n\n  var Resource$Nodegroups = /*#__PURE__*/function () {\n    function Resource$Nodegroups(context) {\n      _classCallCheck(this, Resource$Nodegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodegroups, [{\n      key: \"addNodes\",\n      value: function addNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteNodes\",\n      value: function deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'initialNodeCount'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNodes\",\n      value: function listNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNodeTemplate\",\n      value: function setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodegroups;\n  }();\n\n  compute_v1.Resource$Nodegroups = Resource$Nodegroups;\n\n  var Resource$Nodetemplates = /*#__PURE__*/function () {\n    function Resource$Nodetemplates(context) {\n      _classCallCheck(this, Resource$Nodetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetemplates, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetemplates;\n  }();\n\n  compute_v1.Resource$Nodetemplates = Resource$Nodetemplates;\n\n  var Resource$Nodetypes = /*#__PURE__*/function () {\n    function Resource$Nodetypes(context) {\n      _classCallCheck(this, Resource$Nodetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeType'],\n          pathParams: ['nodeType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetypes;\n  }();\n\n  compute_v1.Resource$Nodetypes = Resource$Nodetypes;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"disableXpnHost\",\n      value: function disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"disableXpnResource\",\n      value: function disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnHost\",\n      value: function enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnResource\",\n      value: function enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnHost\",\n      value: function getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnResources\",\n      value: function getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listXpnHosts\",\n      value: function listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveDisk\",\n      value: function moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveInstance\",\n      value: function moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setCommonInstanceMetadata\",\n      value: function setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDefaultNetworkTier\",\n      value: function setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUsageExportBucket\",\n      value: function setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  compute_v1.Resource$Projects = Resource$Projects;\n\n  var Resource$Regionautoscalers = /*#__PURE__*/function () {\n    function Resource$Regionautoscalers(context) {\n      _classCallCheck(this, Resource$Regionautoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionautoscalers, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionautoscalers;\n  }();\n\n  compute_v1.Resource$Regionautoscalers = Resource$Regionautoscalers;\n\n  var Resource$Regionbackendservices = /*#__PURE__*/function () {\n    function Resource$Regionbackendservices(context) {\n      _classCallCheck(this, Resource$Regionbackendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionbackendservices, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionbackendservices;\n  }();\n\n  compute_v1.Resource$Regionbackendservices = Resource$Regionbackendservices;\n\n  var Resource$Regioncommitments = /*#__PURE__*/function () {\n    function Resource$Regioncommitments(context) {\n      _classCallCheck(this, Resource$Regioncommitments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioncommitments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'commitment'],\n          pathParams: ['commitment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioncommitments;\n  }();\n\n  compute_v1.Resource$Regioncommitments = Resource$Regioncommitments;\n\n  var Resource$Regiondisks = /*#__PURE__*/function () {\n    function Resource$Regiondisks(context) {\n      _classCallCheck(this, Resource$Regiondisks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisks, [{\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisks;\n  }();\n\n  compute_v1.Resource$Regiondisks = Resource$Regiondisks;\n\n  var Resource$Regiondisktypes = /*#__PURE__*/function () {\n    function Resource$Regiondisktypes(context) {\n      _classCallCheck(this, Resource$Regiondisktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisktypes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'diskType'],\n          pathParams: ['diskType', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisktypes;\n  }();\n\n  compute_v1.Resource$Regiondisktypes = Resource$Regiondisktypes;\n\n  var Resource$Regioninstancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Regioninstancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroupmanagers;\n  }();\n\n  compute_v1.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n\n  var Resource$Regioninstancegroups = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroups(context) {\n      _classCallCheck(this, Resource$Regioninstancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroups, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroups;\n  }();\n\n  compute_v1.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n\n  var Resource$Regionoperations = /*#__PURE__*/function () {\n    function Resource$Regionoperations(context) {\n      _classCallCheck(this, Resource$Regionoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionoperations;\n  }();\n\n  compute_v1.Resource$Regionoperations = Resource$Regionoperations;\n\n  var Resource$Regions = /*#__PURE__*/function () {\n    function Resource$Regions(context) {\n      _classCallCheck(this, Resource$Regions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regions, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regions;\n  }();\n\n  compute_v1.Resource$Regions = Resource$Regions;\n\n  var Resource$Routers = /*#__PURE__*/function () {\n    function Resource$Routers(context) {\n      _classCallCheck(this, Resource$Routers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getNatMappingInfo\",\n      value: function getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRouterStatus\",\n      value: function getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"preview\",\n      value: function preview(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routers;\n  }();\n\n  compute_v1.Resource$Routers = Resource$Routers;\n\n  var Resource$Routes = /*#__PURE__*/function () {\n    function Resource$Routes(context) {\n      _classCallCheck(this, Resource$Routes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routes, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routes;\n  }();\n\n  compute_v1.Resource$Routes = Resource$Routes;\n\n  var Resource$Securitypolicies = /*#__PURE__*/function () {\n    function Resource$Securitypolicies(context) {\n      _classCallCheck(this, Resource$Securitypolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Securitypolicies, [{\n      key: \"addRule\",\n      value: function addRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRule\",\n      value: function getRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchRule\",\n      value: function patchRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeRule\",\n      value: function removeRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Securitypolicies;\n  }();\n\n  compute_v1.Resource$Securitypolicies = Resource$Securitypolicies;\n\n  var Resource$Snapshots = /*#__PURE__*/function () {\n    function Resource$Snapshots(context) {\n      _classCallCheck(this, Resource$Snapshots);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Snapshots, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Snapshots;\n  }();\n\n  compute_v1.Resource$Snapshots = Resource$Snapshots;\n\n  var Resource$Sslcertificates = /*#__PURE__*/function () {\n    function Resource$Sslcertificates(context) {\n      _classCallCheck(this, Resource$Sslcertificates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslcertificates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslcertificates;\n  }();\n\n  compute_v1.Resource$Sslcertificates = Resource$Sslcertificates;\n\n  var Resource$Sslpolicies = /*#__PURE__*/function () {\n    function Resource$Sslpolicies(context) {\n      _classCallCheck(this, Resource$Sslpolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslpolicies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listAvailableFeatures\",\n      value: function listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslpolicies;\n  }();\n\n  compute_v1.Resource$Sslpolicies = Resource$Sslpolicies;\n\n  var Resource$Subnetworks = /*#__PURE__*/function () {\n    function Resource$Subnetworks(context) {\n      _classCallCheck(this, Resource$Subnetworks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Subnetworks, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"expandIpCidrRange\",\n      value: function expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listUsable\",\n      value: function listUsable(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setPrivateIpGoogleAccess\",\n      value: function setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Subnetworks;\n  }();\n\n  compute_v1.Resource$Subnetworks = Resource$Subnetworks;\n\n  var Resource$Targethttpproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpproxies(context) {\n      _classCallCheck(this, Resource$Targethttpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpproxies;\n  }();\n\n  compute_v1.Resource$Targethttpproxies = Resource$Targethttpproxies;\n\n  var Resource$Targethttpsproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpsproxies(context) {\n      _classCallCheck(this, Resource$Targethttpsproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpsproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setQuicOverride\",\n      value: function setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpsproxies;\n  }();\n\n  compute_v1.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n\n  var Resource$Targetinstances = /*#__PURE__*/function () {\n    function Resource$Targetinstances(context) {\n      _classCallCheck(this, Resource$Targetinstances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetinstances, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetinstances;\n  }();\n\n  compute_v1.Resource$Targetinstances = Resource$Targetinstances;\n\n  var Resource$Targetpools = /*#__PURE__*/function () {\n    function Resource$Targetpools(context) {\n      _classCallCheck(this, Resource$Targetpools);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetpools, [{\n      key: \"addHealthCheck\",\n      value: function addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"addInstance\",\n      value: function addInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeHealthCheck\",\n      value: function removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstance\",\n      value: function removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackup\",\n      value: function setBackup(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetpools;\n  }();\n\n  compute_v1.Resource$Targetpools = Resource$Targetpools;\n\n  var Resource$Targetsslproxies = /*#__PURE__*/function () {\n    function Resource$Targetsslproxies(context) {\n      _classCallCheck(this, Resource$Targetsslproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetsslproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetsslproxies;\n  }();\n\n  compute_v1.Resource$Targetsslproxies = Resource$Targetsslproxies;\n\n  var Resource$Targettcpproxies = /*#__PURE__*/function () {\n    function Resource$Targettcpproxies(context) {\n      _classCallCheck(this, Resource$Targettcpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targettcpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targettcpproxies;\n  }();\n\n  compute_v1.Resource$Targettcpproxies = Resource$Targettcpproxies;\n\n  var Resource$Targetvpngateways = /*#__PURE__*/function () {\n    function Resource$Targetvpngateways(context) {\n      _classCallCheck(this, Resource$Targetvpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetvpngateways, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetvpngateways;\n  }();\n\n  compute_v1.Resource$Targetvpngateways = Resource$Targetvpngateways;\n\n  var Resource$Urlmaps = /*#__PURE__*/function () {\n    function Resource$Urlmaps(context) {\n      _classCallCheck(this, Resource$Urlmaps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Urlmaps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"invalidateCache\",\n      value: function invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Urlmaps;\n  }();\n\n  compute_v1.Resource$Urlmaps = Resource$Urlmaps;\n\n  var Resource$Vpntunnels = /*#__PURE__*/function () {\n    function Resource$Vpntunnels(context) {\n      _classCallCheck(this, Resource$Vpntunnels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Vpntunnels, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Vpntunnels;\n  }();\n\n  compute_v1.Resource$Vpntunnels = Resource$Vpntunnels;\n\n  var Resource$Zoneoperations = /*#__PURE__*/function () {\n    function Resource$Zoneoperations(context) {\n      _classCallCheck(this, Resource$Zoneoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zoneoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zoneoperations;\n  }();\n\n  compute_v1.Resource$Zoneoperations = Resource$Zoneoperations;\n\n  var Resource$Zones = /*#__PURE__*/function () {\n    function Resource$Zones(context) {\n      _classCallCheck(this, Resource$Zones);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zones, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zones;\n  }();\n\n  compute_v1.Resource$Zones = Resource$Zones;\n})(compute_v1 = exports.compute_v1 || (exports.compute_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/compute/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","compute_v1","Compute","options","google","context","_options","acceleratorTypes","Resource$Acceleratortypes","addresses","Resource$Addresses","autoscalers","Resource$Autoscalers","backendBuckets","Resource$Backendbuckets","backendServices","Resource$Backendservices","disks","Resource$Disks","diskTypes","Resource$Disktypes","firewalls","Resource$Firewalls","forwardingRules","Resource$Forwardingrules","globalAddresses","Resource$Globaladdresses","globalForwardingRules","Resource$Globalforwardingrules","globalOperations","Resource$Globaloperations","healthChecks","Resource$Healthchecks","httpHealthChecks","Resource$Httphealthchecks","httpsHealthChecks","Resource$Httpshealthchecks","images","Resource$Images","instanceGroupManagers","Resource$Instancegroupmanagers","instanceGroups","Resource$Instancegroups","instances","Resource$Instances","instanceTemplates","Resource$Instancetemplates","interconnectAttachments","Resource$Interconnectattachments","interconnectLocations","Resource$Interconnectlocations","interconnects","Resource$Interconnects","licenseCodes","Resource$Licensecodes","licenses","Resource$Licenses","machineTypes","Resource$Machinetypes","networkEndpointGroups","Resource$Networkendpointgroups","networks","Resource$Networks","nodeGroups","Resource$Nodegroups","nodeTemplates","Resource$Nodetemplates","nodeTypes","Resource$Nodetypes","projects","Resource$Projects","regionAutoscalers","Resource$Regionautoscalers","regionBackendServices","Resource$Regionbackendservices","regionCommitments","Resource$Regioncommitments","regionDisks","Resource$Regiondisks","regionDiskTypes","Resource$Regiondisktypes","regionInstanceGroupManagers","Resource$Regioninstancegroupmanagers","regionInstanceGroups","Resource$Regioninstancegroups","regionOperations","Resource$Regionoperations","regions","Resource$Regions","routers","Resource$Routers","routes","Resource$Routes","securityPolicies","Resource$Securitypolicies","snapshots","Resource$Snapshots","sslCertificates","Resource$Sslcertificates","sslPolicies","Resource$Sslpolicies","subnetworks","Resource$Subnetworks","targetHttpProxies","Resource$Targethttpproxies","targetHttpsProxies","Resource$Targethttpsproxies","targetInstances","Resource$Targetinstances","targetPools","Resource$Targetpools","targetSslProxies","Resource$Targetsslproxies","targetTcpProxies","Resource$Targettcpproxies","targetVpnGateways","Resource$Targetvpngateways","urlMaps","Resource$Urlmaps","vpnTunnels","Resource$Vpntunnels","zoneOperations","Resource$Zoneoperations","zones","Resource$Zones","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar compute_v1;\n(function (compute_v1) {\n    /**\n     * Compute Engine API\n     *\n     * Creates and runs virtual machines on Google Cloud Platform.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const compute = google.compute('v1');\n     *\n     * @namespace compute\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Compute\n     */\n    class Compute {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n            this.addresses = new Resource$Addresses(this.context);\n            this.autoscalers = new Resource$Autoscalers(this.context);\n            this.backendBuckets = new Resource$Backendbuckets(this.context);\n            this.backendServices = new Resource$Backendservices(this.context);\n            this.disks = new Resource$Disks(this.context);\n            this.diskTypes = new Resource$Disktypes(this.context);\n            this.firewalls = new Resource$Firewalls(this.context);\n            this.forwardingRules = new Resource$Forwardingrules(this.context);\n            this.globalAddresses = new Resource$Globaladdresses(this.context);\n            this.globalForwardingRules =\n                new Resource$Globalforwardingrules(this.context);\n            this.globalOperations = new Resource$Globaloperations(this.context);\n            this.healthChecks = new Resource$Healthchecks(this.context);\n            this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n            this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n            this.images = new Resource$Images(this.context);\n            this.instanceGroupManagers =\n                new Resource$Instancegroupmanagers(this.context);\n            this.instanceGroups = new Resource$Instancegroups(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.instanceTemplates = new Resource$Instancetemplates(this.context);\n            this.interconnectAttachments =\n                new Resource$Interconnectattachments(this.context);\n            this.interconnectLocations =\n                new Resource$Interconnectlocations(this.context);\n            this.interconnects = new Resource$Interconnects(this.context);\n            this.licenseCodes = new Resource$Licensecodes(this.context);\n            this.licenses = new Resource$Licenses(this.context);\n            this.machineTypes = new Resource$Machinetypes(this.context);\n            this.networkEndpointGroups =\n                new Resource$Networkendpointgroups(this.context);\n            this.networks = new Resource$Networks(this.context);\n            this.nodeGroups = new Resource$Nodegroups(this.context);\n            this.nodeTemplates = new Resource$Nodetemplates(this.context);\n            this.nodeTypes = new Resource$Nodetypes(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n            this.regionBackendServices =\n                new Resource$Regionbackendservices(this.context);\n            this.regionCommitments = new Resource$Regioncommitments(this.context);\n            this.regionDisks = new Resource$Regiondisks(this.context);\n            this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n            this.regionInstanceGroupManagers =\n                new Resource$Regioninstancegroupmanagers(this.context);\n            this.regionInstanceGroups =\n                new Resource$Regioninstancegroups(this.context);\n            this.regionOperations = new Resource$Regionoperations(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.routers = new Resource$Routers(this.context);\n            this.routes = new Resource$Routes(this.context);\n            this.securityPolicies = new Resource$Securitypolicies(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.sslCertificates = new Resource$Sslcertificates(this.context);\n            this.sslPolicies = new Resource$Sslpolicies(this.context);\n            this.subnetworks = new Resource$Subnetworks(this.context);\n            this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n            this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n            this.targetInstances = new Resource$Targetinstances(this.context);\n            this.targetPools = new Resource$Targetpools(this.context);\n            this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n            this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n            this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n            this.urlMaps = new Resource$Urlmaps(this.context);\n            this.vpnTunnels = new Resource$Vpntunnels(this.context);\n            this.zoneOperations = new Resource$Zoneoperations(this.context);\n            this.zones = new Resource$Zones(this.context);\n        }\n    }\n    compute_v1.Compute = Compute;\n    class Resource$Acceleratortypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/acceleratorTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'acceleratorType'],\n                pathParams: ['acceleratorType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Acceleratortypes = Resource$Acceleratortypes;\n    class Resource$Addresses {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Addresses = Resource$Addresses;\n    class Resource$Autoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Autoscalers = Resource$Autoscalers;\n    class Resource$Backendbuckets {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket', 'keyName'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Backendbuckets = Resource$Backendbuckets;\n    class Resource$Backendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService', 'keyName'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Backendservices = Resource$Backendservices;\n    class Resource$Disks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/aggregated/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Disks = Resource$Disks;\n    class Resource$Disktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/diskTypes/{diskType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'diskType'],\n                pathParams: ['diskType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Disktypes = Resource$Disktypes;\n    class Resource$Firewalls {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Firewalls = Resource$Firewalls;\n    class Resource$Forwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Forwardingrules = Resource$Forwardingrules;\n    class Resource$Globaladdresses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Globaladdresses = Resource$Globaladdresses;\n    class Resource$Globalforwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n    class Resource$Globaloperations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Globaloperations = Resource$Globaloperations;\n    class Resource$Healthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Healthchecks = Resource$Healthchecks;\n    class Resource$Httphealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Httphealthchecks = Resource$Httphealthchecks;\n    class Resource$Httpshealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n    class Resource$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{image}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deprecate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{image}/deprecate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{image}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/family/{family}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'family'],\n                pathParams: ['family', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/images')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/images')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Images = Resource$Images;\n    class Resource$Instancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n    class Resource$Instancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Instancegroups = Resource$Instancegroups;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/attachDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/detachDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/serialPort')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/referrers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/reset')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineType')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMetadata')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setScheduling')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTags(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setTags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        start(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/start')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/stop')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Instances = Resource$Instances;\n    class Resource$Instancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{instanceTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{instanceTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Instancetemplates = Resource$Instancetemplates;\n    class Resource$Interconnectattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Interconnectattachments = Resource$Interconnectattachments;\n    class Resource$Interconnectlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnectLocations/{interconnectLocation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectLocation'],\n                pathParams: ['interconnectLocation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnectLocations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Interconnectlocations = Resource$Interconnectlocations;\n    class Resource$Interconnects {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects/{interconnect}/getDiagnostics')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Interconnects = Resource$Interconnects;\n    class Resource$Licensecodes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenseCodes/{licenseCode}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'licenseCode'],\n                pathParams: ['licenseCode', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenseCodes/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Licensecodes = Resource$Licensecodes;\n    class Resource$Licenses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{license}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{license}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/licenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/licenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Licenses = Resource$Licenses;\n    class Resource$Machinetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/machineTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/machineTypes/{machineType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'machineType'],\n                pathParams: ['machineType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/machineTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Machinetypes = Resource$Machinetypes;\n    class Resource$Networkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n    class Resource$Networks {\n        constructor(context) {\n            this.context = context;\n        }\n        addPeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}/addPeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/networks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/networks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}/removePeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}/switchToCustomMode')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Networks = Resource$Networks;\n    class Resource$Nodegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'initialNodeCount'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Nodegroups = Resource$Nodegroups;\n    class Resource$Nodetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Nodetemplates = Resource$Nodetemplates;\n    class Resource$Nodetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/nodeTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeTypes/{nodeType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeType'],\n                pathParams: ['nodeType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Nodetypes = Resource$Nodetypes;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/disableXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/disableXpnResource')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/enableXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/enableXpnResource')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/getXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/getXpnResources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/listXpnHosts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/moveDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/moveInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/setCommonInstanceMetadata')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/setDefaultNetworkTier')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/setUsageExportBucket')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Projects = Resource$Projects;\n    class Resource$Regionautoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regionautoscalers = Resource$Regionautoscalers;\n    class Resource$Regionbackendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regionbackendservices = Resource$Regionbackendservices;\n    class Resource$Regioncommitments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/commitments/{commitment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regioncommitments = Resource$Regioncommitments;\n    class Resource$Regiondisks {\n        constructor(context) {\n            this.context = context;\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{disk}/createSnapshot')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{disk}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regiondisks = Resource$Regiondisks;\n    class Resource$Regiondisktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/diskTypes/{diskType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'diskType'],\n                pathParams: ['diskType', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regiondisktypes = Resource$Regiondisktypes;\n    class Resource$Regioninstancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n    class Resource$Regioninstancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n    class Resource$Regionoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regionoperations = Resource$Regionoperations;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/regions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regions = Resource$Regions;\n    class Resource$Routers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}/getRouterStatus')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        preview(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}/preview')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Routers = Resource$Routers;\n    class Resource$Routes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/routes/{route}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/routes/{route}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/routes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/routes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Routes = Resource$Routes;\n    class Resource$Securitypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/addRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/getRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Securitypolicies = Resource$Securitypolicies;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{snapshot}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{snapshot}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Sslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Sslcertificates = Resource$Sslcertificates;\n    class Resource$Sslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies/listAvailableFeatures')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Sslpolicies = Resource$Sslpolicies;\n    class Resource$Subnetworks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listUsable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/subnetworks/listUsable')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Subnetworks = Resource$Subnetworks;\n    class Resource$Targethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targethttpproxies = Resource$Targethttpproxies;\n    class Resource$Targethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n    class Resource$Targetinstances {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/targetInstances/{targetInstance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/targetInstances/{targetInstance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targetinstances = Resource$Targetinstances;\n    class Resource$Targetpools {\n        constructor(context) {\n            this.context = context;\n        }\n        addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targetpools = Resource$Targetpools;\n    class Resource$Targetsslproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targetsslproxies = Resource$Targetsslproxies;\n    class Resource$Targettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targettcpproxies = Resource$Targettcpproxies;\n    class Resource$Targetvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targetvpngateways = Resource$Targetvpngateways;\n    class Resource$Urlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}/invalidateCache')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}/validate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Urlmaps = Resource$Urlmaps;\n    class Resource$Vpntunnels {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Vpntunnels = Resource$Vpntunnels;\n    class Resource$Zoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Zoneoperations = Resource$Zoneoperations;\n    class Resource$Zones {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/zones')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Zones = Resource$Zones;\n})(compute_v1 = exports.compute_v1 || (exports.compute_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}