{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appengine_v1alpha = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar appengine_v1alpha;\n\n(function (appengine_v1alpha) {\n  /**\n   * App Engine Admin API\n   *\n   * Provisions and manages developers&#39; App Engine applications.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const appengine = google.appengine('v1alpha');\n   * ```\n   */\n  var Appengine = function Appengine(options, google) {\n    _classCallCheck(this, Appengine);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.apps = new Resource$Apps(this.context);\n  };\n\n  appengine_v1alpha.Appengine = Appengine;\n\n  var Resource$Apps = function Resource$Apps(context) {\n    _classCallCheck(this, Resource$Apps);\n\n    this.context = context;\n    this.authorizedCertificates = new Resource$Apps$Authorizedcertificates(this.context);\n    this.authorizedDomains = new Resource$Apps$Authorizeddomains(this.context);\n    this.domainMappings = new Resource$Apps$Domainmappings(this.context);\n    this.locations = new Resource$Apps$Locations(this.context);\n    this.operations = new Resource$Apps$Operations(this.context);\n  };\n\n  appengine_v1alpha.Resource$Apps = Resource$Apps;\n\n  var Resource$Apps$Authorizedcertificates = /*#__PURE__*/function () {\n    function Resource$Apps$Authorizedcertificates(context) {\n      _classCallCheck(this, Resource$Apps$Authorizedcertificates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Authorizedcertificates, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Authorizedcertificates;\n  }();\n\n  appengine_v1alpha.Resource$Apps$Authorizedcertificates = Resource$Apps$Authorizedcertificates;\n\n  var Resource$Apps$Authorizeddomains = /*#__PURE__*/function () {\n    function Resource$Apps$Authorizeddomains(context) {\n      _classCallCheck(this, Resource$Apps$Authorizeddomains);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Authorizeddomains, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedDomains').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Authorizeddomains;\n  }();\n\n  appengine_v1alpha.Resource$Apps$Authorizeddomains = Resource$Apps$Authorizeddomains;\n\n  var Resource$Apps$Domainmappings = /*#__PURE__*/function () {\n    function Resource$Apps$Domainmappings(context) {\n      _classCallCheck(this, Resource$Apps$Domainmappings);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Domainmappings, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Domainmappings;\n  }();\n\n  appengine_v1alpha.Resource$Apps$Domainmappings = Resource$Apps$Domainmappings;\n\n  var Resource$Apps$Locations = /*#__PURE__*/function () {\n    function Resource$Apps$Locations(context) {\n      _classCallCheck(this, Resource$Apps$Locations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Locations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appsId', 'locationsId'],\n          pathParams: ['appsId', 'locationsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Locations;\n  }();\n\n  appengine_v1alpha.Resource$Apps$Locations = Resource$Apps$Locations;\n\n  var Resource$Apps$Operations = /*#__PURE__*/function () {\n    function Resource$Apps$Operations(context) {\n      _classCallCheck(this, Resource$Apps$Operations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Operations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appsId', 'operationsId'],\n          pathParams: ['appsId', 'operationsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Operations;\n  }();\n\n  appengine_v1alpha.Resource$Apps$Operations = Resource$Apps$Operations;\n})(appengine_v1alpha = exports.appengine_v1alpha || (exports.appengine_v1alpha = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/appengine/v1alpha.js"],"names":["Object","defineProperty","exports","value","appengine_v1alpha","googleapis_common_1","require","Appengine","options","google","context","_options","apps","Resource$Apps","authorizedCertificates","Resource$Apps$Authorizedcertificates","authorizedDomains","Resource$Apps$Authorizeddomains","domainMappings","Resource$Apps$Domainmappings","locations","Resource$Apps$Locations","operations","Resource$Apps$Operations","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.appengine_v1alpha = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar appengine_v1alpha;\n(function (appengine_v1alpha) {\n    /**\n     * App Engine Admin API\n     *\n     * Provisions and manages developers&#39; App Engine applications.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const appengine = google.appengine('v1alpha');\n     * ```\n     */\n    class Appengine {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.apps = new Resource$Apps(this.context);\n        }\n    }\n    appengine_v1alpha.Appengine = Appengine;\n    class Resource$Apps {\n        constructor(context) {\n            this.context = context;\n            this.authorizedCertificates = new Resource$Apps$Authorizedcertificates(this.context);\n            this.authorizedDomains = new Resource$Apps$Authorizeddomains(this.context);\n            this.domainMappings = new Resource$Apps$Domainmappings(this.context);\n            this.locations = new Resource$Apps$Locations(this.context);\n            this.operations = new Resource$Apps$Operations(this.context);\n        }\n    }\n    appengine_v1alpha.Resource$Apps = Resource$Apps;\n    class Resource$Apps$Authorizedcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Authorizedcertificates = Resource$Apps$Authorizedcertificates;\n    class Resource$Apps$Authorizeddomains {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedDomains').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Authorizeddomains = Resource$Apps$Authorizeddomains;\n    class Resource$Apps$Domainmappings {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Domainmappings = Resource$Apps$Domainmappings;\n    class Resource$Apps$Locations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'locationsId'],\n                pathParams: ['appsId', 'locationsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Locations = Resource$Apps$Locations;\n    class Resource$Apps$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'operationsId'],\n                pathParams: ['appsId', 'operationsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Operations = Resource$Apps$Operations;\n})(appengine_v1alpha = exports.appengine_v1alpha || (exports.appengine_v1alpha = {}));\n//# sourceMappingURL=v1alpha.js.map"]},"metadata":{},"sourceType":"script"}