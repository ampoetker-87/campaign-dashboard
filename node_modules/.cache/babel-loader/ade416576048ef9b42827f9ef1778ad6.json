{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.games_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar games_v1;\n\n(function (games_v1) {\n  /**\n   * Google Play Game Services\n   *\n   * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const games = google.games('v1');\n   * ```\n   */\n  var Games = function Games(options, google) {\n    _classCallCheck(this, Games);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.achievementDefinitions = new Resource$Achievementdefinitions(this.context);\n    this.achievements = new Resource$Achievements(this.context);\n    this.applications = new Resource$Applications(this.context);\n    this.events = new Resource$Events(this.context);\n    this.leaderboards = new Resource$Leaderboards(this.context);\n    this.metagame = new Resource$Metagame(this.context);\n    this.players = new Resource$Players(this.context);\n    this.revisions = new Resource$Revisions(this.context);\n    this.scores = new Resource$Scores(this.context);\n    this.snapshots = new Resource$Snapshots(this.context);\n    this.snapshotsExtended = new Resource$Snapshotsextended(this.context);\n    this.stats = new Resource$Stats(this.context);\n  };\n\n  games_v1.Games = Games;\n\n  var Resource$Achievementdefinitions = /*#__PURE__*/function () {\n    function Resource$Achievementdefinitions(context) {\n      _classCallCheck(this, Resource$Achievementdefinitions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Achievementdefinitions, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Achievementdefinitions;\n  }();\n\n  games_v1.Resource$Achievementdefinitions = Resource$Achievementdefinitions;\n\n  var Resource$Achievements = /*#__PURE__*/function () {\n    function Resource$Achievements(context) {\n      _classCallCheck(this, Resource$Achievements);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Achievements, [{\n      key: \"increment\",\n      value: function increment(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/achievements/{achievementId}/increment').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['achievementId', 'stepsToIncrement'],\n          pathParams: ['achievementId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/players/{playerId}/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['playerId'],\n          pathParams: ['playerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reveal\",\n      value: function reveal(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/achievements/{achievementId}/reveal').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['achievementId'],\n          pathParams: ['achievementId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setStepsAtLeast\",\n      value: function setStepsAtLeast(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/achievements/{achievementId}/setStepsAtLeast').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['achievementId', 'steps'],\n          pathParams: ['achievementId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"unlock\",\n      value: function unlock(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/achievements/{achievementId}/unlock').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['achievementId'],\n          pathParams: ['achievementId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateMultiple\",\n      value: function updateMultiple(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/achievements/updateMultiple').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Achievements;\n  }();\n\n  games_v1.Resource$Achievements = Resource$Achievements;\n\n  var Resource$Applications = /*#__PURE__*/function () {\n    function Resource$Applications(context) {\n      _classCallCheck(this, Resource$Applications);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Applications, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/applications/{applicationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['applicationId'],\n          pathParams: ['applicationId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"played\",\n      value: function played(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/applications/played').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"verify\",\n      value: function verify(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/applications/{applicationId}/verify').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['applicationId'],\n          pathParams: ['applicationId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Applications;\n  }();\n\n  games_v1.Resource$Applications = Resource$Applications;\n\n  var Resource$Events = /*#__PURE__*/function () {\n    function Resource$Events(context) {\n      _classCallCheck(this, Resource$Events);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Events, [{\n      key: \"listByPlayer\",\n      value: function listByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listDefinitions\",\n      value: function listDefinitions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/eventDefinitions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"record\",\n      value: function record(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Events;\n  }();\n\n  games_v1.Resource$Events = Resource$Events;\n\n  var Resource$Leaderboards = /*#__PURE__*/function () {\n    function Resource$Leaderboards(context) {\n      _classCallCheck(this, Resource$Leaderboards);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Leaderboards, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['leaderboardId'],\n          pathParams: ['leaderboardId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/leaderboards').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Leaderboards;\n  }();\n\n  games_v1.Resource$Leaderboards = Resource$Leaderboards;\n\n  var Resource$Metagame = /*#__PURE__*/function () {\n    function Resource$Metagame(context) {\n      _classCallCheck(this, Resource$Metagame);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Metagame, [{\n      key: \"getMetagameConfig\",\n      value: function getMetagameConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/metagameConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listCategoriesByPlayer\",\n      value: function listCategoriesByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/players/{playerId}/categories/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['playerId', 'collection'],\n          pathParams: ['collection', 'playerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Metagame;\n  }();\n\n  games_v1.Resource$Metagame = Resource$Metagame;\n\n  var Resource$Players = /*#__PURE__*/function () {\n    function Resource$Players(context) {\n      _classCallCheck(this, Resource$Players);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Players, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/players/{playerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['playerId'],\n          pathParams: ['playerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/players/me/players/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['collection'],\n          pathParams: ['collection'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Players;\n  }();\n\n  games_v1.Resource$Players = Resource$Players;\n\n  var Resource$Revisions = /*#__PURE__*/function () {\n    function Resource$Revisions(context) {\n      _classCallCheck(this, Resource$Revisions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Revisions, [{\n      key: \"check\",\n      value: function check(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/revisions/check').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['clientRevision'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Revisions;\n  }();\n\n  games_v1.Resource$Revisions = Resource$Revisions;\n\n  var Resource$Scores = /*#__PURE__*/function () {\n    function Resource$Scores(context) {\n      _classCallCheck(this, Resource$Scores);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Scores, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['playerId', 'leaderboardId', 'timeSpan'],\n          pathParams: ['leaderboardId', 'playerId', 'timeSpan'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/scores/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n          pathParams: ['collection', 'leaderboardId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listWindow\",\n      value: function listWindow(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/window/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n          pathParams: ['collection', 'leaderboardId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"submit\",\n      value: function submit(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['leaderboardId', 'score'],\n          pathParams: ['leaderboardId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"submitMultiple\",\n      value: function submitMultiple(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/leaderboards/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Scores;\n  }();\n\n  games_v1.Resource$Scores = Resource$Scores;\n\n  var Resource$Snapshots = /*#__PURE__*/function () {\n    function Resource$Snapshots(context) {\n      _classCallCheck(this, Resource$Snapshots);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Snapshots, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['snapshotId'],\n          pathParams: ['snapshotId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/players/{playerId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['playerId'],\n          pathParams: ['playerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Snapshots;\n  }();\n\n  games_v1.Resource$Snapshots = Resource$Snapshots;\n\n  var Resource$Snapshotsextended = /*#__PURE__*/function () {\n    function Resource$Snapshotsextended(context) {\n      _classCallCheck(this, Resource$Snapshotsextended);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Snapshotsextended, [{\n      key: \"resolveSnapshotHead\",\n      value: function resolveSnapshotHead(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/snapshotsExtended/{snapshotName}:resolveHead').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['snapshotName'],\n          pathParams: ['snapshotName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Snapshotsextended;\n  }();\n\n  games_v1.Resource$Snapshotsextended = Resource$Snapshotsextended;\n\n  var Resource$Stats = /*#__PURE__*/function () {\n    function Resource$Stats(context) {\n      _classCallCheck(this, Resource$Stats);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Stats, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/games/v1/stats').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Stats;\n  }();\n\n  games_v1.Resource$Stats = Resource$Stats;\n})(games_v1 = exports.games_v1 || (exports.games_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/googleapis/build/src/apis/games/v1.js"],"names":["Object","defineProperty","exports","value","games_v1","googleapis_common_1","require","Games","options","google","context","_options","achievementDefinitions","Resource$Achievementdefinitions","achievements","Resource$Achievements","applications","Resource$Applications","events","Resource$Events","leaderboards","Resource$Leaderboards","metagame","Resource$Metagame","players","Resource$Players","revisions","Resource$Revisions","scores","Resource$Scores","snapshots","Resource$Snapshots","snapshotsExtended","Resource$Snapshotsextended","stats","Resource$Stats","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.games_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar games_v1;\n(function (games_v1) {\n    /**\n     * Google Play Game Services\n     *\n     * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const games = google.games('v1');\n     * ```\n     */\n    class Games {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.achievementDefinitions = new Resource$Achievementdefinitions(this.context);\n            this.achievements = new Resource$Achievements(this.context);\n            this.applications = new Resource$Applications(this.context);\n            this.events = new Resource$Events(this.context);\n            this.leaderboards = new Resource$Leaderboards(this.context);\n            this.metagame = new Resource$Metagame(this.context);\n            this.players = new Resource$Players(this.context);\n            this.revisions = new Resource$Revisions(this.context);\n            this.scores = new Resource$Scores(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.snapshotsExtended = new Resource$Snapshotsextended(this.context);\n            this.stats = new Resource$Stats(this.context);\n        }\n    }\n    games_v1.Games = Games;\n    class Resource$Achievementdefinitions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Achievementdefinitions = Resource$Achievementdefinitions;\n    class Resource$Achievements {\n        constructor(context) {\n            this.context = context;\n        }\n        increment(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/increment').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId', 'stepsToIncrement'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId'],\n                pathParams: ['playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reveal(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/reveal').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setStepsAtLeast(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/setStepsAtLeast').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId', 'steps'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unlock(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/unlock').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateMultiple(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/updateMultiple').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Achievements = Resource$Achievements;\n    class Resource$Applications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/{applicationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['applicationId'],\n                pathParams: ['applicationId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        played(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/played').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        verify(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/{applicationId}/verify').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['applicationId'],\n                pathParams: ['applicationId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Applications = Resource$Applications;\n    class Resource$Events {\n        constructor(context) {\n            this.context = context;\n        }\n        listByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listDefinitions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/eventDefinitions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        record(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Events = Resource$Events;\n    class Resource$Leaderboards {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId'],\n                pathParams: ['leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Leaderboards = Resource$Leaderboards;\n    class Resource$Metagame {\n        constructor(context) {\n            this.context = context;\n        }\n        getMetagameConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/metagameConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listCategoriesByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}/categories/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId', 'collection'],\n                pathParams: ['collection', 'playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Metagame = Resource$Metagame;\n    class Resource$Players {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId'],\n                pathParams: ['playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/me/players/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['collection'],\n                pathParams: ['collection'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Players = Resource$Players;\n    class Resource$Revisions {\n        constructor(context) {\n            this.context = context;\n        }\n        check(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/revisions/check').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['clientRevision'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Revisions = Resource$Revisions;\n    class Resource$Scores {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId', 'leaderboardId', 'timeSpan'],\n                pathParams: ['leaderboardId', 'playerId', 'timeSpan'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/games/v1/leaderboards/{leaderboardId}/scores/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n                pathParams: ['collection', 'leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listWindow(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/games/v1/leaderboards/{leaderboardId}/window/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n                pathParams: ['collection', 'leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        submit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId', 'score'],\n                pathParams: ['leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        submitMultiple(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Scores = Resource$Scores;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['snapshotId'],\n                pathParams: ['snapshotId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId'],\n                pathParams: ['playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Snapshotsextended {\n        constructor(context) {\n            this.context = context;\n        }\n        resolveSnapshotHead(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/snapshotsExtended/{snapshotName}:resolveHead').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['snapshotName'],\n                pathParams: ['snapshotName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Snapshotsextended = Resource$Snapshotsextended;\n    class Resource$Stats {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/stats').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Stats = Resource$Stats;\n})(games_v1 = exports.games_v1 || (exports.games_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}