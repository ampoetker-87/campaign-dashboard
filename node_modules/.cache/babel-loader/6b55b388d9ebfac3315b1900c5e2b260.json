{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar _regeneratorRuntime = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gaxios_1 = require(\"gaxios\");\n\nvar jsonBigint = require('json-bigint');\n\nexports.HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.BASE_URL = exports.HOST_ADDRESS + exports.BASE_PATH;\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n}); // Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\n\nfunction validate(options) {\n  Object.keys(options).forEach(function (key) {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n\n      default:\n        throw new Error(\"'\".concat(key, \"' is not a valid configuration option.\"));\n    }\n  });\n}\n\nfunction metadataAccessor(type, options) {\n  var noResponseRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var property, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = options || {};\n\n            if (typeof options === 'string') {\n              options = {\n                property: options\n              };\n            }\n\n            property = '';\n\n            if (typeof options === 'object' && options.property) {\n              property = '/' + options.property;\n            }\n\n            validate(options);\n            _context.prev = 5;\n            _context.next = 8;\n            return gaxios_1.request({\n              url: \"\".concat(exports.BASE_URL, \"/\").concat(type).concat(property),\n              headers: Object.assign({}, exports.HEADERS, options.headers),\n              retryConfig: {\n                noResponseRetries\n              },\n              params: options.params,\n              responseType: 'text'\n            });\n\n          case 8:\n            res = _context.sent;\n\n            if (!(res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE)) {\n              _context.next = 13;\n              break;\n            }\n\n            throw new Error(\"Invalid response from metadata service: incorrect \".concat(exports.HEADER_NAME, \" header.\"));\n\n          case 13:\n            if (res.data) {\n              _context.next = 15;\n              break;\n            }\n\n            throw new Error('Invalid response from the metadata service');\n\n          case 15:\n            if (!(typeof res.data === 'string')) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.prev = 16;\n            return _context.abrupt(\"return\", jsonBigint.parse(res.data));\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](16);\n\n          case 22:\n            return _context.abrupt(\"return\", res.data);\n\n          case 25:\n            _context.prev = 25;\n            _context.t1 = _context[\"catch\"](5);\n\n            if (_context.t1.response && _context.t1.response.status !== 200) {\n              _context.t1.message = \"Unsuccessful response status code. \".concat(_context.t1.message);\n            }\n\n            throw _context.t1;\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 25], [16, 20]]);\n  }));\n} // tslint:disable-next-line no-any\n\n\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n\nexports.instance = instance; // tslint:disable-next-line no-any\n\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n\nexports.project = project;\n/**\n * Determine if the metadata server is currently available.\n */\n\nfunction isAvailable() {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return metadataAccessor('instance', undefined, 0);\n\n          case 3:\n            return _context2.abrupt(\"return\", true);\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n\n            if (!(_context2.t0.code && (_context2.t0.code === 'ENOTFOUND' || _context2.t0.code === 'ENOENT'))) {\n              _context2.next = 10;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 10:\n            throw _context2.t0;\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 6]]);\n  }));\n}\n\nexports.isAvailable = isAvailable;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require('json-bigint');\nexports.HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.BASE_URL = exports.HOST_ADDRESS + exports.BASE_PATH;\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({ [exports.HEADER_NAME]: exports.HEADER_VALUE });\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n    Object.keys(options).forEach(key => {\n        switch (key) {\n            case 'params':\n            case 'property':\n            case 'headers':\n                break;\n            case 'qs':\n                throw new Error(`'qs' is not a valid configuration option. Please use 'params' instead.`);\n            default:\n                throw new Error(`'${key}' is not a valid configuration option.`);\n        }\n    });\n}\nfunction metadataAccessor(type, options, noResponseRetries = 3) {\n    return __awaiter(this, void 0, void 0, function* () {\n        options = options || {};\n        if (typeof options === 'string') {\n            options = { property: options };\n        }\n        let property = '';\n        if (typeof options === 'object' && options.property) {\n            property = '/' + options.property;\n        }\n        validate(options);\n        try {\n            const res = yield gaxios_1.request({\n                url: `${exports.BASE_URL}/${type}${property}`,\n                headers: Object.assign({}, exports.HEADERS, options.headers),\n                retryConfig: { noResponseRetries },\n                params: options.params,\n                responseType: 'text'\n            });\n            // NOTE: node.js converts all incoming headers to lower case.\n            if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n                throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n            }\n            else if (!res.data) {\n                throw new Error('Invalid response from the metadata service');\n            }\n            if (typeof res.data === 'string') {\n                try {\n                    return jsonBigint.parse(res.data);\n                }\n                catch (_a) {\n                    /* ignore */\n                }\n            }\n            return res.data;\n        }\n        catch (e) {\n            if (e.response && e.response.status !== 200) {\n                e.message = `Unsuccessful response status code. ${e.message}`;\n            }\n            throw e;\n        }\n    });\n}\n// tslint:disable-next-line no-any\nfunction instance(options) {\n    return metadataAccessor('instance', options);\n}\nexports.instance = instance;\n// tslint:disable-next-line no-any\nfunction project(options) {\n    return metadataAccessor('project', options);\n}\nexports.project = project;\n/**\n * Determine if the metadata server is currently available.\n */\nfunction isAvailable() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            // Attempt to read instance metadata. As configured, this will\n            // retry 3 times if there is a valid response, and fail fast\n            // if there is an ETIMEDOUT or ENOTFOUND error.\n            yield metadataAccessor('instance', undefined, 0);\n            return true;\n        }\n        catch (err) {\n            // Failure to resolve the metadata service means that it is not available.\n            if (err.code && (err.code === 'ENOTFOUND' || err.code === 'ENOENT')) {\n                return false;\n            }\n            // Throw unexpected errors.\n            throw err;\n        }\n    });\n}\nexports.isAvailable = isAvailable;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}