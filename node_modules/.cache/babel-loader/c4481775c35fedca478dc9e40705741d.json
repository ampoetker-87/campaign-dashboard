{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar androidenterprise_v1;\n\n(function (androidenterprise_v1) {\n  /**\n   * Google Play EMM API\n   *\n   * Manages the deployment of apps to Android for Work users.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const androidenterprise = google.androidenterprise('v1');\n   *\n   * @namespace androidenterprise\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Androidenterprise\n   */\n  var Androidenterprise = function Androidenterprise(options, google) {\n    _classCallCheck(this, Androidenterprise);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.devices = new Resource$Devices(this.context);\n    this.enterprises = new Resource$Enterprises(this.context);\n    this.entitlements = new Resource$Entitlements(this.context);\n    this.grouplicenses = new Resource$Grouplicenses(this.context);\n    this.grouplicenseusers = new Resource$Grouplicenseusers(this.context);\n    this.installs = new Resource$Installs(this.context);\n    this.managedconfigurationsfordevice = new Resource$Managedconfigurationsfordevice(this.context);\n    this.managedconfigurationsforuser = new Resource$Managedconfigurationsforuser(this.context);\n    this.managedconfigurationssettings = new Resource$Managedconfigurationssettings(this.context);\n    this.permissions = new Resource$Permissions(this.context);\n    this.products = new Resource$Products(this.context);\n    this.serviceaccountkeys = new Resource$Serviceaccountkeys(this.context);\n    this.storelayoutclusters = new Resource$Storelayoutclusters(this.context);\n    this.storelayoutpages = new Resource$Storelayoutpages(this.context);\n    this.users = new Resource$Users(this.context);\n    this.webapps = new Resource$Webapps(this.context);\n  };\n\n  androidenterprise_v1.Androidenterprise = Androidenterprise;\n\n  var Resource$Devices = /*#__PURE__*/function () {\n    function Resource$Devices(context) {\n      _classCallCheck(this, Resource$Devices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Devices, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getState\",\n      value: function getState(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setState\",\n      value: function setState(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Devices;\n  }();\n\n  androidenterprise_v1.Resource$Devices = Resource$Devices;\n\n  var Resource$Enterprises = /*#__PURE__*/function () {\n    function Resource$Enterprises(context) {\n      _classCallCheck(this, Resource$Enterprises);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Enterprises, [{\n      key: \"acknowledgeNotificationSet\",\n      value: function acknowledgeNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/acknowledgeNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"completeSignup\",\n      value: function completeSignup(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/completeSignup').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createWebToken\",\n      value: function createWebToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/createWebToken').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enroll\",\n      value: function enroll(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/enroll').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['token'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateSignupUrl\",\n      value: function generateSignupUrl(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/signupUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getServiceAccount\",\n      value: function getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getStoreLayout\",\n      value: function getStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['domain'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"pullNotificationSet\",\n      value: function pullNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/pullNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"sendTestPushNotification\",\n      value: function sendTestPushNotification(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAccount\",\n      value: function setAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/account').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setStoreLayout\",\n      value: function setStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"unenroll\",\n      value: function unenroll(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/unenroll').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Enterprises;\n  }();\n\n  androidenterprise_v1.Resource$Enterprises = Resource$Enterprises;\n\n  var Resource$Entitlements = /*#__PURE__*/function () {\n    function Resource$Entitlements(context) {\n      _classCallCheck(this, Resource$Entitlements);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Entitlements, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n          pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n          pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n          pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n          pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Entitlements;\n  }();\n\n  androidenterprise_v1.Resource$Entitlements = Resource$Entitlements;\n\n  var Resource$Grouplicenses = /*#__PURE__*/function () {\n    function Resource$Grouplicenses(context) {\n      _classCallCheck(this, Resource$Grouplicenses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Grouplicenses, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'groupLicenseId'],\n          pathParams: ['enterpriseId', 'groupLicenseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Grouplicenses;\n  }();\n\n  androidenterprise_v1.Resource$Grouplicenses = Resource$Grouplicenses;\n\n  var Resource$Grouplicenseusers = /*#__PURE__*/function () {\n    function Resource$Grouplicenseusers(context) {\n      _classCallCheck(this, Resource$Grouplicenseusers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Grouplicenseusers, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'groupLicenseId'],\n          pathParams: ['enterpriseId', 'groupLicenseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Grouplicenseusers;\n  }();\n\n  androidenterprise_v1.Resource$Grouplicenseusers = Resource$Grouplicenseusers;\n\n  var Resource$Installs = /*#__PURE__*/function () {\n    function Resource$Installs(context) {\n      _classCallCheck(this, Resource$Installs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Installs, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n          pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n          pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n          pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n          pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Installs;\n  }();\n\n  androidenterprise_v1.Resource$Installs = Resource$Installs;\n\n  var Resource$Managedconfigurationsfordevice = /*#__PURE__*/function () {\n    function Resource$Managedconfigurationsfordevice(context) {\n      _classCallCheck(this, Resource$Managedconfigurationsfordevice);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedconfigurationsfordevice, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n          pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedconfigurationsfordevice;\n  }();\n\n  androidenterprise_v1.Resource$Managedconfigurationsfordevice = Resource$Managedconfigurationsfordevice;\n\n  var Resource$Managedconfigurationsforuser = /*#__PURE__*/function () {\n    function Resource$Managedconfigurationsforuser(context) {\n      _classCallCheck(this, Resource$Managedconfigurationsforuser);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedconfigurationsforuser, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n          pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n          pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n          pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n          pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedconfigurationsforuser;\n  }();\n\n  androidenterprise_v1.Resource$Managedconfigurationsforuser = Resource$Managedconfigurationsforuser;\n\n  var Resource$Managedconfigurationssettings = /*#__PURE__*/function () {\n    function Resource$Managedconfigurationssettings(context) {\n      _classCallCheck(this, Resource$Managedconfigurationssettings);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Managedconfigurationssettings, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Managedconfigurationssettings;\n  }();\n\n  androidenterprise_v1.Resource$Managedconfigurationssettings = Resource$Managedconfigurationssettings;\n\n  var Resource$Permissions = /*#__PURE__*/function () {\n    function Resource$Permissions(context) {\n      _classCallCheck(this, Resource$Permissions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Permissions, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['permissionId'],\n          pathParams: ['permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Permissions;\n  }();\n\n  androidenterprise_v1.Resource$Permissions = Resource$Permissions;\n\n  var Resource$Products = /*#__PURE__*/function () {\n    function Resource$Products(context) {\n      _classCallCheck(this, Resource$Products);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Products, [{\n      key: \"approve\",\n      value: function approve(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateApprovalUrl\",\n      value: function generateApprovalUrl(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getAppRestrictionsSchema\",\n      value: function getAppRestrictionsSchema(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getPermissions\",\n      value: function getPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"unapprove\",\n      value: function unapprove(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'productId'],\n          pathParams: ['enterpriseId', 'productId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Products;\n  }();\n\n  androidenterprise_v1.Resource$Products = Resource$Products;\n\n  var Resource$Serviceaccountkeys = /*#__PURE__*/function () {\n    function Resource$Serviceaccountkeys(context) {\n      _classCallCheck(this, Resource$Serviceaccountkeys);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Serviceaccountkeys, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'keyId'],\n          pathParams: ['enterpriseId', 'keyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Serviceaccountkeys;\n  }();\n\n  androidenterprise_v1.Resource$Serviceaccountkeys = Resource$Serviceaccountkeys;\n\n  var Resource$Storelayoutclusters = /*#__PURE__*/function () {\n    function Resource$Storelayoutclusters(context) {\n      _classCallCheck(this, Resource$Storelayoutclusters);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Storelayoutclusters, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n          pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n          pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n          pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n          pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Storelayoutclusters;\n  }();\n\n  androidenterprise_v1.Resource$Storelayoutclusters = Resource$Storelayoutclusters;\n\n  var Resource$Storelayoutpages = /*#__PURE__*/function () {\n    function Resource$Storelayoutpages(context) {\n      _classCallCheck(this, Resource$Storelayoutpages);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Storelayoutpages, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'pageId'],\n          pathParams: ['enterpriseId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Storelayoutpages;\n  }();\n\n  androidenterprise_v1.Resource$Storelayoutpages = Resource$Storelayoutpages;\n\n  var Resource$Users = /*#__PURE__*/function () {\n    function Resource$Users(context) {\n      _classCallCheck(this, Resource$Users);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Users, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateAuthenticationToken\",\n      value: function generateAuthenticationToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateToken\",\n      value: function generateToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getAvailableProductSet\",\n      value: function getAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'email'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"revokeDeviceAccess\",\n      value: function revokeDeviceAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"revokeToken\",\n      value: function revokeToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAvailableProductSet\",\n      value: function setAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'userId'],\n          pathParams: ['enterpriseId', 'userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users;\n  }();\n\n  androidenterprise_v1.Resource$Users = Resource$Users;\n\n  var Resource$Webapps = /*#__PURE__*/function () {\n    function Resource$Webapps(context) {\n      _classCallCheck(this, Resource$Webapps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Webapps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'webAppId'],\n          pathParams: ['enterpriseId', 'webAppId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'webAppId'],\n          pathParams: ['enterpriseId', 'webAppId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId'],\n          pathParams: ['enterpriseId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'webAppId'],\n          pathParams: ['enterpriseId', 'webAppId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['enterpriseId', 'webAppId'],\n          pathParams: ['enterpriseId', 'webAppId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Webapps;\n  }();\n\n  androidenterprise_v1.Resource$Webapps = Resource$Webapps;\n})(androidenterprise_v1 = exports.androidenterprise_v1 || (exports.androidenterprise_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/androidenterprise/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","androidenterprise_v1","Androidenterprise","options","google","context","_options","devices","Resource$Devices","enterprises","Resource$Enterprises","entitlements","Resource$Entitlements","grouplicenses","Resource$Grouplicenses","grouplicenseusers","Resource$Grouplicenseusers","installs","Resource$Installs","managedconfigurationsfordevice","Resource$Managedconfigurationsfordevice","managedconfigurationsforuser","Resource$Managedconfigurationsforuser","managedconfigurationssettings","Resource$Managedconfigurationssettings","permissions","Resource$Permissions","products","Resource$Products","serviceaccountkeys","Resource$Serviceaccountkeys","storelayoutclusters","Resource$Storelayoutclusters","storelayoutpages","Resource$Storelayoutpages","users","Resource$Users","webapps","Resource$Webapps","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC,C,CACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,oBAAJ;;AACA,CAAC,UAAUA,oBAAV,EAAgC;AAC7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfiC,MAgBvBC,iBAhBuB,GAiBzB,2BAAYC,OAAZ,EAAqBC,MAArB,EAA6B;AAAA;;AACzB,SAAKC,OAAL,GAAe;AAAEC,MAAAA,QAAQ,EAAEH,OAAO,IAAI,EAAvB;AAA2BC,MAAAA;AAA3B,KAAf;AACA,SAAKG,OAAL,GAAe,IAAIC,gBAAJ,CAAqB,KAAKH,OAA1B,CAAf;AACA,SAAKI,WAAL,GAAmB,IAAIC,oBAAJ,CAAyB,KAAKL,OAA9B,CAAnB;AACA,SAAKM,YAAL,GAAoB,IAAIC,qBAAJ,CAA0B,KAAKP,OAA/B,CAApB;AACA,SAAKQ,aAAL,GAAqB,IAAIC,sBAAJ,CAA2B,KAAKT,OAAhC,CAArB;AACA,SAAKU,iBAAL,GAAyB,IAAIC,0BAAJ,CAA+B,KAAKX,OAApC,CAAzB;AACA,SAAKY,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKb,OAA3B,CAAhB;AACA,SAAKc,8BAAL,GACI,IAAIC,uCAAJ,CAA4C,KAAKf,OAAjD,CADJ;AAEA,SAAKgB,4BAAL,GACI,IAAIC,qCAAJ,CAA0C,KAAKjB,OAA/C,CADJ;AAEA,SAAKkB,6BAAL,GACI,IAAIC,sCAAJ,CAA2C,KAAKnB,OAAhD,CADJ;AAEA,SAAKoB,WAAL,GAAmB,IAAIC,oBAAJ,CAAyB,KAAKrB,OAA9B,CAAnB;AACA,SAAKsB,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKvB,OAA3B,CAAhB;AACA,SAAKwB,kBAAL,GAA0B,IAAIC,2BAAJ,CAAgC,KAAKzB,OAArC,CAA1B;AACA,SAAK0B,mBAAL,GAA2B,IAAIC,4BAAJ,CAAiC,KAAK3B,OAAtC,CAA3B;AACA,SAAK4B,gBAAL,GAAwB,IAAIC,yBAAJ,CAA8B,KAAK7B,OAAnC,CAAxB;AACA,SAAK8B,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAK/B,OAAxB,CAAb;AACA,SAAKgC,OAAL,GAAe,IAAIC,gBAAJ,CAAqB,KAAKjC,OAA1B,CAAf;AACH,GAtCwB;;AAwC7BJ,EAAAA,oBAAoB,CAACC,iBAArB,GAAyCA,iBAAzC;;AAxC6B,MAyCvBM,gBAzCuB;AA0CzB,8BAAYH,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AA5CwB;AAAA;AAAA,0BA6CrBkC,gBA7CqB,EA6CHC,iBA7CG,EA6CgBC,QA7ChB,EA6C0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,QAA7B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5EwB;AAAA;AAAA,+BA6EhBL,gBA7EgB,EA6EEC,iBA7EF,EA6EqBC,QA7ErB,EA6E+B;AACpD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,0FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,QAA7B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5GwB;AAAA;AAAA,2BA6GpBL,gBA7GoB,EA6GFC,iBA7GE,EA6GiBC,QA7GjB,EA6G2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5IwB;AAAA;AAAA,4BA6InBL,gBA7ImB,EA6IDC,iBA7IC,EA6IkBC,QA7IlB,EA6I4B;AACjD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,QAA7B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5KwB;AAAA;AAAA,+BA6KhBL,gBA7KgB,EA6KEC,iBA7KF,EA6KqBC,QA7KrB,EA6K+B;AACpD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,0FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,QAA7B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5MwB;AAAA;AAAA,6BA6MlBL,gBA7MkB,EA6MAC,iBA7MA,EA6MmBC,QA7MnB,EA6M6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,QAA7B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5OwB;;AAAA;AAAA;;AA8O7B3C,EAAAA,oBAAoB,CAACO,gBAArB,GAAwCA,gBAAxC;;AA9O6B,MA+OvBE,oBA/OuB;AAgPzB,kCAAYL,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAlPwB;AAAA;AAAA,iDAmPEkC,gBAnPF,EAmPoBC,iBAnPpB,EAmPuCC,QAnPvC,EAmPiD;AACtE,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,EARD;AASfC,UAAAA,UAAU,EAAE,EATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAlRwB;AAAA;AAAA,qCAmRVL,gBAnRU,EAmRQC,iBAnRR,EAmR2BC,QAnR3B,EAmRqC;AAC1D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,kDAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,YAAAA,MAAM,EAAE;AAHW,WAAd,EAIN7C,OAJM,CADM;AAMfuC,UAAAA,MANe;AAOfO,UAAAA,cAAc,EAAE,EAPD;AAQfC,UAAAA,UAAU,EAAE,EARG;AASf7C,UAAAA,OAAO,EAAE,KAAKA;AATC,SAAnB;;AAWA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAjTwB;AAAA;AAAA,qCAkTVL,gBAlTU,EAkTQC,iBAlTR,EAkT2BC,QAlT3B,EAkTqC;AAC1D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAjVwB;AAAA;AAAA,6BAkVlBL,gBAlVkB,EAkVAC,iBAlVA,EAkVmBC,QAlVnB,EAkV6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,0CAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,YAAAA,MAAM,EAAE;AAHW,WAAd,EAIN7C,OAJM,CADM;AAMfuC,UAAAA,MANe;AAOfO,UAAAA,cAAc,EAAE,CAAC,OAAD,CAPD;AAQfC,UAAAA,UAAU,EAAE,EARG;AASf7C,UAAAA,OAAO,EAAE,KAAKA;AATC,SAAnB;;AAWA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAhXwB;AAAA;AAAA,wCAiXPL,gBAjXO,EAiXWC,iBAjXX,EAiX8BC,QAjX9B,EAiXwC;AAC7D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,6CAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,YAAAA,MAAM,EAAE;AAHW,WAAd,EAIN7C,OAJM,CADM;AAMfuC,UAAAA,MANe;AAOfO,UAAAA,cAAc,EAAE,EAPD;AAQfC,UAAAA,UAAU,EAAE,EARG;AASf7C,UAAAA,OAAO,EAAE,KAAKA;AATC,SAAnB;;AAWA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA/YwB;AAAA;AAAA,0BAgZrBL,gBAhZqB,EAgZHC,iBAhZG,EAgZgBC,QAhZhB,EAgZ0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,kDAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,YAAAA,MAAM,EAAE;AAHW,WAAd,EAIN7C,OAJM,CADM;AAMfuC,UAAAA,MANe;AAOfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CAPD;AAQfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CARG;AASf7C,UAAAA,OAAO,EAAE,KAAKA;AATC,SAAnB;;AAWA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA9awB;AAAA;AAAA,wCA+aPL,gBA/aO,EA+aWC,iBA/aX,EA+a8BC,QA/a9B,EA+awC;AAC7D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA9cwB;AAAA;AAAA,qCA+cVL,gBA/cU,EA+cQC,iBA/cR,EA+c2BC,QA/c3B,EA+cqC;AAC1D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA9ewB;AAAA;AAAA,2BA+epBL,gBA/eoB,EA+eFC,iBA/eE,EA+eiBC,QA/ejB,EA+e2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,mCAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,YAAAA,MAAM,EAAE;AAHW,WAAd,EAIN7C,OAJM,CADM;AAMfuC,UAAAA,MANe;AAOfO,UAAAA,cAAc,EAAE,CAAC,QAAD,CAPD;AAQfC,UAAAA,UAAU,EAAE,EARG;AASf7C,UAAAA,OAAO,EAAE,KAAKA;AATC,SAAnB;;AAWA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA7gBwB;AAAA;AAAA,0CA8gBLL,gBA9gBK,EA8gBaC,iBA9gBb,EA8gBgCC,QA9gBhC,EA8gB0C;AAC/D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,EARD;AASfC,UAAAA,UAAU,EAAE,EATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA7iBwB;AAAA;AAAA,+CA8iBAL,gBA9iBA,EA8iBkBC,iBA9iBlB,EA8iBqCC,QA9iBrC,EA8iB+C;AACpE,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA7kBwB;AAAA;AAAA,iCA8kBdL,gBA9kBc,EA8kBIC,iBA9kBJ,EA8kBuBC,QA9kBvB,EA8kBiC;AACtD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,0DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA7mBwB;AAAA;AAAA,qCA8mBVL,gBA9mBU,EA8mBQC,iBA9mBR,EA8mB2BC,QA9mB3B,EA8mBqC;AAC1D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA7oBwB;AAAA;AAAA,+BA8oBhBL,gBA9oBgB,EA8oBEC,iBA9oBF,EA8oBqBC,QA9oBrB,EA8oB+B;AACpD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA7qBwB;;AAAA;AAAA;;AA+qB7B3C,EAAAA,oBAAoB,CAACS,oBAArB,GAA4CA,oBAA5C;;AA/qB6B,MAgrBvBE,qBAhrBuB;AAirBzB,mCAAYP,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAnrBwB;AAAA;AAAA,8BAorBlBkC,gBAprBkB,EAorBAC,iBAprBA,EAorBmBC,QAprBnB,EAorB6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,eAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,eAAjB,EAAkC,QAAlC,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAntBwB;AAAA;AAAA,0BAotBrBL,gBAptBqB,EAotBHC,iBAptBG,EAotBgBC,QAptBhB,EAotB0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,eAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,eAAjB,EAAkC,QAAlC,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAnvBwB;AAAA;AAAA,2BAovBpBL,gBApvBoB,EAovBFC,iBApvBE,EAovBiBC,QApvBjB,EAovB2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAnxBwB;AAAA;AAAA,4BAoxBnBL,gBApxBmB,EAoxBDC,iBApxBC,EAoxBkBC,QApxBlB,EAoxB4B;AACjD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,eAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,eAAjB,EAAkC,QAAlC,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAnzBwB;AAAA;AAAA,6BAozBlBL,gBApzBkB,EAozBAC,iBApzBA,EAozBmBC,QApzBnB,EAozB6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,eAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,eAAjB,EAAkC,QAAlC,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAn1BwB;;AAAA;AAAA;;AAq1B7B3C,EAAAA,oBAAoB,CAACW,qBAArB,GAA6CA,qBAA7C;;AAr1B6B,MAs1BvBE,sBAt1BuB;AAu1BzB,oCAAYT,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAz1BwB;AAAA;AAAA,0BA01BrBkC,gBA11BqB,EA01BHC,iBA11BG,EA01BgBC,QA11BhB,EA01B0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAz3BwB;AAAA;AAAA,2BA03BpBL,gBA13BoB,EA03BFC,iBA13BE,EA03BiBC,QA13BjB,EA03B2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAz5BwB;;AAAA;AAAA;;AA25B7B3C,EAAAA,oBAAoB,CAACa,sBAArB,GAA8CA,sBAA9C;;AA35B6B,MA45BvBE,0BA55BuB;AA65BzB,wCAAYX,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AA/5BwB;AAAA;AAAA,2BAg6BpBkC,gBAh6BoB,EAg6BFC,iBAh6BE,EAg6BiBC,QAh6BjB,EAg6B2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,gBAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA/7BwB;;AAAA;AAAA;;AAi8B7B3C,EAAAA,oBAAoB,CAACe,0BAArB,GAAkDA,0BAAlD;;AAj8B6B,MAk8BvBE,iBAl8BuB;AAm8BzB,+BAAYb,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAr8BwB;AAAA;AAAA,8BAs8BlBkC,gBAt8BkB,EAs8BAC,iBAt8BA,EAs8BmBC,QAt8BnB,EAs8B6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,EAAuC,WAAvC,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,WAA7B,EAA0C,QAA1C,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAr+BwB;AAAA;AAAA,0BAs+BrBL,gBAt+BqB,EAs+BHC,iBAt+BG,EAs+BgBC,QAt+BhB,EAs+B0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,EAAuC,WAAvC,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,WAA7B,EAA0C,QAA1C,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AArgCwB;AAAA;AAAA,2BAsgCpBL,gBAtgCoB,EAsgCFC,iBAtgCE,EAsgCiBC,QAtgCjB,EAsgC2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,QAA7B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAriCwB;AAAA;AAAA,4BAsiCnBL,gBAtiCmB,EAsiCDC,iBAtiCC,EAsiCkBC,QAtiClB,EAsiC4B;AACjD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,EAAuC,WAAvC,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,WAA7B,EAA0C,QAA1C,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AArkCwB;AAAA;AAAA,6BAskClBL,gBAtkCkB,EAskCAC,iBAtkCA,EAskCmBC,QAtkCnB,EAskC6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,EAAuC,WAAvC,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,WAA7B,EAA0C,QAA1C,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AArmCwB;;AAAA;AAAA;;AAumC7B3C,EAAAA,oBAAoB,CAACiB,iBAArB,GAAyCA,iBAAzC;;AAvmC6B,MAwmCvBE,uCAxmCuB;AAymCzB,qDAAYf,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AA3mCwB;AAAA;AAAA,8BA4mClBkC,gBA5mCkB,EA4mCAC,iBA5mCA,EA4mCmBC,QA5mCnB,EA4mC6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qJADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CACZ,cADY,EACI,QADJ,EACc,UADd,EAEZ,iCAFY,CARD;AAYfC,UAAAA,UAAU,EAAE,CACR,UADQ,EACI,cADJ,EACoB,iCADpB,EAER,QAFQ,CAZG;AAgBf7C,UAAAA,OAAO,EAAE,KAAKA;AAhBC,SAAnB;;AAkBA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAjpCwB;AAAA;AAAA,0BAkpCrBL,gBAlpCqB,EAkpCHC,iBAlpCG,EAkpCgBC,QAlpChB,EAkpC0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qJADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CACZ,cADY,EACI,QADJ,EACc,UADd,EAEZ,iCAFY,CARD;AAYfC,UAAAA,UAAU,EAAE,CACR,UADQ,EACI,cADJ,EACoB,iCADpB,EAER,QAFQ,CAZG;AAgBf7C,UAAAA,OAAO,EAAE,KAAKA;AAhBC,SAAnB;;AAkBA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAvrCwB;AAAA;AAAA,2BAwrCpBL,gBAxrCoB,EAwrCFC,iBAxrCE,EAwrCiBC,QAxrCjB,EAwrC2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mHADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,UAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,cAAb,EAA6B,QAA7B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAvtCwB;AAAA;AAAA,4BAwtCnBL,gBAxtCmB,EAwtCDC,iBAxtCC,EAwtCkBC,QAxtClB,EAwtC4B;AACjD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qJADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CACZ,cADY,EACI,QADJ,EACc,UADd,EAEZ,iCAFY,CARD;AAYfC,UAAAA,UAAU,EAAE,CACR,UADQ,EACI,cADJ,EACoB,iCADpB,EAER,QAFQ,CAZG;AAgBf7C,UAAAA,OAAO,EAAE,KAAKA;AAhBC,SAAnB;;AAkBA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA7vCwB;AAAA;AAAA,6BA8vClBL,gBA9vCkB,EA8vCAC,iBA9vCA,EA8vCmBC,QA9vCnB,EA8vC6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qJADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CACZ,cADY,EACI,QADJ,EACc,UADd,EAEZ,iCAFY,CARD;AAYfC,UAAAA,UAAU,EAAE,CACR,UADQ,EACI,cADJ,EACoB,iCADpB,EAER,QAFQ,CAZG;AAgBf7C,UAAAA,OAAO,EAAE,KAAKA;AAhBC,SAAnB;;AAkBA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAnyCwB;;AAAA;AAAA;;AAqyC7B3C,EAAAA,oBAAoB,CAACmB,uCAArB,GAA+DA,uCAA/D;;AAryC6B,MAsyCvBE,qCAtyCuB;AAuyCzB,mDAAYjB,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAzyCwB;AAAA;AAAA,8BA0yClBkC,gBA1yCkB,EA0yCAC,iBA1yCA,EA0yCmBC,QA1yCnB,EA0yC6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8HADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,+BAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,+BAAjB,EAAkD,QAAlD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAz0CwB;AAAA;AAAA,0BA00CrBL,gBA10CqB,EA00CHC,iBA10CG,EA00CgBC,QA10ChB,EA00C0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8HADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,+BAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,+BAAjB,EAAkD,QAAlD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAz2CwB;AAAA;AAAA,2BA02CpBL,gBA12CoB,EA02CFC,iBA12CE,EA02CiBC,QA12CjB,EA02C2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAz4CwB;AAAA;AAAA,4BA04CnBL,gBA14CmB,EA04CDC,iBA14CC,EA04CkBC,QA14ClB,EA04C4B;AACjD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8HADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,+BAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,+BAAjB,EAAkD,QAAlD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAz6CwB;AAAA;AAAA,6BA06ClBL,gBA16CkB,EA06CAC,iBA16CA,EA06CmBC,QA16CnB,EA06C6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8HADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,+BAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,+BAAjB,EAAkD,QAAlD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAz8CwB;;AAAA;AAAA;;AA28C7B3C,EAAAA,oBAAoB,CAACqB,qCAArB,GAA6DA,qCAA7D;;AA38C6B,MA48CvBE,sCA58CuB;AA68CzB,oDAAYnB,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AA/8CwB;AAAA;AAAA,2BAg9CpBkC,gBAh9CoB,EAg9CFC,iBAh9CE,EAg9CiBC,QAh9CjB,EAg9C2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA/+CwB;;AAAA;AAAA;;AAi/C7B3C,EAAAA,oBAAoB,CAACuB,sCAArB,GAA8DA,sCAA9D;;AAj/C6B,MAk/CvBE,oBAl/CuB;AAm/CzB,kCAAYrB,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAr/CwB;AAAA;AAAA,0BAs/CrBkC,gBAt/CqB,EAs/CHC,iBAt/CG,EAs/CgBC,QAt/ChB,EAs/C0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,kDAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,YAAAA,MAAM,EAAE;AAHW,WAAd,EAIN7C,OAJM,CADM;AAMfuC,UAAAA,MANe;AAOfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CAPD;AAQfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CARG;AASf7C,UAAAA,OAAO,EAAE,KAAKA;AATC,SAAnB;;AAWA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAphDwB;;AAAA;AAAA;;AAshD7B3C,EAAAA,oBAAoB,CAACyB,oBAArB,GAA4CA,oBAA5C;;AAthD6B,MAuhDvBE,iBAvhDuB;AAwhDzB,+BAAYvB,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AA1hDwB;AAAA;AAAA,8BA2hDjBkC,gBA3hDiB,EA2hDCC,iBA3hDD,EA2hDoBC,QA3hDpB,EA2hD8B;AACnD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,+EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA1jDwB;AAAA;AAAA,0CA2jDLL,gBA3jDK,EA2jDaC,iBA3jDb,EA2jDgCC,QA3jDhC,EA2jD0C;AAC/D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA1lDwB;AAAA;AAAA,0BA2lDrBL,gBA3lDqB,EA2lDHC,iBA3lDG,EA2lDgBC,QA3lDhB,EA2lD0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA1nDwB;AAAA;AAAA,+CA2nDAL,gBA3nDA,EA2nDkBC,iBA3nDlB,EA2nDqCC,QA3nDrC,EA2nD+C;AACpE,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA1pDwB;AAAA;AAAA,qCA2pDVL,gBA3pDU,EA2pDQC,iBA3pDR,EA2pD2BC,QA3pD3B,EA2pDqC;AAC1D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA1rDwB;AAAA;AAAA,2BA2rDpBL,gBA3rDoB,EA2rDFC,iBA3rDE,EA2rDiBC,QA3rDjB,EA2rD2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA1tDwB;AAAA;AAAA,gCA2tDfL,gBA3tDe,EA2tDGC,iBA3tDH,EA2tDsBC,QA3tDtB,EA2tDgC;AACrD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,WAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA1vDwB;;AAAA;AAAA;;AA4vD7B3C,EAAAA,oBAAoB,CAAC2B,iBAArB,GAAyCA,iBAAzC;;AA5vD6B,MA6vDvBE,2BA7vDuB;AA8vDzB,yCAAYzB,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAhwDwB;AAAA;AAAA,8BAiwDlBkC,gBAjwDkB,EAiwDAC,iBAjwDA,EAiwDmBC,QAjwDnB,EAiwD6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,OAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,OAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAhyDwB;AAAA;AAAA,6BAiyDlBL,gBAjyDkB,EAiyDAC,iBAjyDA,EAiyDmBC,QAjyDnB,EAiyD6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAh0DwB;AAAA;AAAA,2BAi0DpBL,gBAj0DoB,EAi0DFC,iBAj0DE,EAi0DiBC,QAj0DjB,EAi0D2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAh2DwB;;AAAA;AAAA;;AAk2D7B3C,EAAAA,oBAAoB,CAAC6B,2BAArB,GAAmDA,2BAAnD;;AAl2D6B,MAm2DvBE,4BAn2DuB;AAo2DzB,0CAAY3B,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAt2DwB;AAAA;AAAA,8BAu2DlBkC,gBAv2DkB,EAu2DAC,iBAv2DA,EAu2DmBC,QAv2DnB,EAu2D6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,WAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,cAAd,EAA8B,QAA9B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAt4DwB;AAAA;AAAA,0BAu4DrBL,gBAv4DqB,EAu4DHC,iBAv4DG,EAu4DgBC,QAv4DhB,EAu4D0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,WAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,cAAd,EAA8B,QAA9B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAt6DwB;AAAA;AAAA,6BAu6DlBL,gBAv6DkB,EAu6DAC,iBAv6DA,EAu6DmBC,QAv6DnB,EAu6D6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAt8DwB;AAAA;AAAA,2BAu8DpBL,gBAv8DoB,EAu8DFC,iBAv8DE,EAu8DiBC,QAv8DjB,EAu8D2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAt+DwB;AAAA;AAAA,4BAu+DnBL,gBAv+DmB,EAu+DDC,iBAv+DC,EAu+DkBC,QAv+DlB,EAu+D4B;AACjD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,WAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,cAAd,EAA8B,QAA9B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAtgEwB;AAAA;AAAA,6BAugElBL,gBAvgEkB,EAugEAC,iBAvgEA,EAugEmBC,QAvgEnB,EAugE6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,EAA2B,WAA3B,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,cAAd,EAA8B,QAA9B,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAtiEwB;;AAAA;AAAA;;AAwiE7B3C,EAAAA,oBAAoB,CAAC+B,4BAArB,GAAoDA,4BAApD;;AAxiE6B,MAyiEvBE,yBAziEuB;AA0iEzB,uCAAY7B,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AA5iEwB;AAAA;AAAA,8BA6iElBkC,gBA7iEkB,EA6iEAC,iBA7iEA,EA6iEmBC,QA7iEnB,EA6iE6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5kEwB;AAAA;AAAA,0BA6kErBL,gBA7kEqB,EA6kEHC,iBA7kEG,EA6kEgBC,QA7kEhB,EA6kE0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5mEwB;AAAA;AAAA,6BA6mElBL,gBA7mEkB,EA6mEAC,iBA7mEA,EA6mEmBC,QA7mEnB,EA6mE6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5oEwB;AAAA;AAAA,2BA6oEpBL,gBA7oEoB,EA6oEFC,iBA7oEE,EA6oEiBC,QA7oEjB,EA6oE2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5qEwB;AAAA;AAAA,4BA6qEnBL,gBA7qEmB,EA6qEDC,iBA7qEC,EA6qEkBC,QA7qElB,EA6qE4B;AACjD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5sEwB;AAAA;AAAA,6BA6sElBL,gBA7sEkB,EA6sEAC,iBA7sEA,EA6sEmBC,QA7sEnB,EA6sE6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AA5uEwB;;AAAA;AAAA;;AA8uE7B3C,EAAAA,oBAAoB,CAACiC,yBAArB,GAAiDA,yBAAjD;;AA9uE6B,MA+uEvBE,cA/uEuB;AAgvEzB,4BAAY/B,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAlvEwB;AAAA;AAAA,8BAmvElBkC,gBAnvEkB,EAmvEAC,iBAnvEA,EAmvEmBC,QAnvEnB,EAmvE6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAlxEwB;AAAA;AAAA,kDAmxEGL,gBAnxEH,EAmxEqBC,iBAnxErB,EAmxEwCC,QAnxExC,EAmxEkD;AACvE,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAlzEwB;AAAA;AAAA,oCAmzEXL,gBAnzEW,EAmzEOC,iBAnzEP,EAmzE0BC,QAnzE1B,EAmzEoC;AACzD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAl1EwB;AAAA;AAAA,0BAm1ErBL,gBAn1EqB,EAm1EHC,iBAn1EG,EAm1EgBC,QAn1EhB,EAm1E0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAl3EwB;AAAA;AAAA,6CAm3EFL,gBAn3EE,EAm3EgBC,iBAn3EhB,EAm3EmCC,QAn3EnC,EAm3E6C;AAClE,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAl5EwB;AAAA;AAAA,6BAm5ElBL,gBAn5EkB,EAm5EAC,iBAn5EA,EAm5EmBC,QAn5EnB,EAm5E6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAl7EwB;AAAA;AAAA,2BAm7EpBL,gBAn7EoB,EAm7EFC,iBAn7EE,EAm7EiBC,QAn7EjB,EAm7E2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,OAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAl9EwB;AAAA;AAAA,4BAm9EnBL,gBAn9EmB,EAm9EDC,iBAn9EC,EAm9EkBC,QAn9ElB,EAm9E4B;AACjD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAl/EwB;AAAA;AAAA,yCAm/ENL,gBAn/EM,EAm/EYC,iBAn/EZ,EAm/E+BC,QAn/E/B,EAm/EyC;AAC9D,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAlhFwB;AAAA;AAAA,kCAmhFbL,gBAnhFa,EAmhFKC,iBAnhFL,EAmhFwBC,QAnhFxB,EAmhFkC;AACvD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAljFwB;AAAA;AAAA,6CAmjFFL,gBAnjFE,EAmjFgBC,iBAnjFhB,EAmjFmCC,QAnjFnC,EAmjF6C;AAClE,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAllFwB;AAAA;AAAA,6BAmlFlBL,gBAnlFkB,EAmlFAC,iBAnlFA,EAmlFmBC,QAnlFnB,EAmlF6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,QAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,QAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAlnFwB;;AAAA;AAAA;;AAonF7B3C,EAAAA,oBAAoB,CAACmC,cAArB,GAAsCA,cAAtC;;AApnF6B,MAqnFvBE,gBArnFuB;AAsnFzB,8BAAYjC,OAAZ,EAAqB;AAAA;;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AAxnFwB;AAAA;AAAA,8BAynFlBkC,gBAznFkB,EAynFAC,iBAznFA,EAynFmBC,QAznFnB,EAynF6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,UAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,UAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAxpFwB;AAAA;AAAA,0BAypFrBL,gBAzpFqB,EAypFHC,iBAzpFG,EAypFgBC,QAzpFhB,EAypF0B;AAC/C,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,UAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,UAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAxrFwB;AAAA;AAAA,6BAyrFlBL,gBAzrFkB,EAyrFAC,iBAzrFA,EAyrFmBC,QAzrFnB,EAyrF6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,0DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAxtFwB;AAAA;AAAA,2BAytFpBL,gBAztFoB,EAytFFC,iBAztFE,EAytFiBC,QAztFjB,EAytF2B;AAChD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,0DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAxvFwB;AAAA;AAAA,4BAyvFnBL,gBAzvFmB,EAyvFDC,iBAzvFC,EAyvFkBC,QAzvFlB,EAyvF4B;AACjD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,UAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,UAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAxxFwB;AAAA;AAAA,6BAyxFlBL,gBAzxFkB,EAyxFAC,iBAzxFA,EAyxFmBC,QAzxFnB,EAyxF6B;AAClD,YAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,YAAIpC,OAAO,GAAIqC,iBAAiB,IAAI,EAApC;;AACA,YAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,UAAAA,QAAQ,GAAGF,gBAAX;AACAG,UAAAA,MAAM,GAAG,EAAT;AACAvC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAI,OAAOqC,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,UAAAA,QAAQ,GAAGD,iBAAX;AACArC,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMwC,OAAO,GAAGxC,OAAO,CAACwC,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfzC,UAAAA,OAAO,EAAER,MAAM,CAACkD,MAAP,CAAc;AACnBC,YAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,YAAAA,MAAM,EAAE;AAJW,WAAd,EAKN7C,OALM,CADM;AAOfuC,UAAAA,MAPe;AAQfO,UAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,UAAjB,CARD;AASfC,UAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,UAAjB,CATG;AAUf7C,UAAAA,OAAO,EAAE,KAAKA;AAVC,SAAnB;;AAYA,YAAIoC,QAAJ,EAAc;AACV1C,UAAAA,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,SAFD,MAGK;AACD,iBAAO1C,mBAAmB,CAACoD,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;AAxzFwB;;AAAA;AAAA;;AA0zF7B3C,EAAAA,oBAAoB,CAACqC,gBAArB,GAAwCA,gBAAxC;AACH,CA3zFD,EA2zFGrC,oBAAoB,GAAGJ,OAAO,CAACI,oBAAR,KAAiCJ,OAAO,CAACI,oBAAR,GAA+B,EAAhE,CA3zF1B","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar androidenterprise_v1;\n(function (androidenterprise_v1) {\n    /**\n     * Google Play EMM API\n     *\n     * Manages the deployment of apps to Android for Work users.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const androidenterprise = google.androidenterprise('v1');\n     *\n     * @namespace androidenterprise\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Androidenterprise\n     */\n    class Androidenterprise {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.devices = new Resource$Devices(this.context);\n            this.enterprises = new Resource$Enterprises(this.context);\n            this.entitlements = new Resource$Entitlements(this.context);\n            this.grouplicenses = new Resource$Grouplicenses(this.context);\n            this.grouplicenseusers = new Resource$Grouplicenseusers(this.context);\n            this.installs = new Resource$Installs(this.context);\n            this.managedconfigurationsfordevice =\n                new Resource$Managedconfigurationsfordevice(this.context);\n            this.managedconfigurationsforuser =\n                new Resource$Managedconfigurationsforuser(this.context);\n            this.managedconfigurationssettings =\n                new Resource$Managedconfigurationssettings(this.context);\n            this.permissions = new Resource$Permissions(this.context);\n            this.products = new Resource$Products(this.context);\n            this.serviceaccountkeys = new Resource$Serviceaccountkeys(this.context);\n            this.storelayoutclusters = new Resource$Storelayoutclusters(this.context);\n            this.storelayoutpages = new Resource$Storelayoutpages(this.context);\n            this.users = new Resource$Users(this.context);\n            this.webapps = new Resource$Webapps(this.context);\n        }\n    }\n    androidenterprise_v1.Androidenterprise = Androidenterprise;\n    class Resource$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Devices = Resource$Devices;\n    class Resource$Enterprises {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledgeNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/acknowledgeNotificationSet')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        completeSignup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/completeSignup')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createWebToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/createWebToken')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enroll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/enroll')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['token'],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateSignupUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/signupUrl')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['domain'],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        pullNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/pullNotificationSet')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sendTestPushNotification(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/account')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unenroll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/unenroll')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Enterprises = Resource$Enterprises;\n    class Resource$Entitlements {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Entitlements = Resource$Entitlements;\n    class Resource$Grouplicenses {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'groupLicenseId'],\n                pathParams: ['enterpriseId', 'groupLicenseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Grouplicenses = Resource$Grouplicenses;\n    class Resource$Grouplicenseusers {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'groupLicenseId'],\n                pathParams: ['enterpriseId', 'groupLicenseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Grouplicenseusers = Resource$Grouplicenseusers;\n    class Resource$Installs {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Installs = Resource$Installs;\n    class Resource$Managedconfigurationsfordevice {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId', 'userId', 'deviceId',\n                    'managedConfigurationForDeviceId'\n                ],\n                pathParams: [\n                    'deviceId', 'enterpriseId', 'managedConfigurationForDeviceId',\n                    'userId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId', 'userId', 'deviceId',\n                    'managedConfigurationForDeviceId'\n                ],\n                pathParams: [\n                    'deviceId', 'enterpriseId', 'managedConfigurationForDeviceId',\n                    'userId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId', 'userId', 'deviceId',\n                    'managedConfigurationForDeviceId'\n                ],\n                pathParams: [\n                    'deviceId', 'enterpriseId', 'managedConfigurationForDeviceId',\n                    'userId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId', 'userId', 'deviceId',\n                    'managedConfigurationForDeviceId'\n                ],\n                pathParams: [\n                    'deviceId', 'enterpriseId', 'managedConfigurationForDeviceId',\n                    'userId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationsfordevice = Resource$Managedconfigurationsfordevice;\n    class Resource$Managedconfigurationsforuser {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationsforuser = Resource$Managedconfigurationsforuser;\n    class Resource$Managedconfigurationssettings {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationssettings = Resource$Managedconfigurationssettings;\n    class Resource$Permissions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/permissions/{permissionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['permissionId'],\n                pathParams: ['permissionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Permissions = Resource$Permissions;\n    class Resource$Products {\n        constructor(context) {\n            this.context = context;\n        }\n        approve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateApprovalUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAppRestrictionsSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unapprove(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Products = Resource$Products;\n    class Resource$Serviceaccountkeys {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'keyId'],\n                pathParams: ['enterpriseId', 'keyId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Serviceaccountkeys = Resource$Serviceaccountkeys;\n    class Resource$Storelayoutclusters {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Storelayoutclusters = Resource$Storelayoutclusters;\n    class Resource$Storelayoutpages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Storelayoutpages = Resource$Storelayoutpages;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateAuthenticationToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'email'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        revokeDeviceAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        revokeToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Users = Resource$Users;\n    class Resource$Webapps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Webapps = Resource$Webapps;\n})(androidenterprise_v1 = exports.androidenterprise_v1 || (exports.androidenterprise_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}