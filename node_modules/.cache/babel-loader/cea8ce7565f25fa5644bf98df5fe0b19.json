{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar monitoring_v3;\n\n(function (monitoring_v3) {\n  /**\n   * Stackdriver Monitoring API\n   *\n   * Manages your Stackdriver Monitoring data and configurations. Most projects\n   * must be associated with a Stackdriver account, with a few exceptions as\n   * noted on the individual method pages.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const monitoring = google.monitoring('v3');\n   *\n   * @namespace monitoring\n   * @type {Function}\n   * @version v3\n   * @variation v3\n   * @param {object=} options Options for Monitoring\n   */\n  var Monitoring = function Monitoring(options, google) {\n    _classCallCheck(this, Monitoring);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.projects = new Resource$Projects(this.context);\n    this.uptimeCheckIps = new Resource$Uptimecheckips(this.context);\n  };\n\n  monitoring_v3.Monitoring = Monitoring;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.alertPolicies = new Resource$Projects$Alertpolicies(this.context);\n    this.collectdTimeSeries = new Resource$Projects$Collectdtimeseries(this.context);\n    this.groups = new Resource$Projects$Groups(this.context);\n    this.metricDescriptors = new Resource$Projects$Metricdescriptors(this.context);\n    this.monitoredResourceDescriptors = new Resource$Projects$Monitoredresourcedescriptors(this.context);\n    this.notificationChannelDescriptors = new Resource$Projects$Notificationchanneldescriptors(this.context);\n    this.notificationChannels = new Resource$Projects$Notificationchannels(this.context);\n    this.timeSeries = new Resource$Projects$Timeseries(this.context);\n    this.uptimeCheckConfigs = new Resource$Projects$Uptimecheckconfigs(this.context);\n  };\n\n  monitoring_v3.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Alertpolicies = /*#__PURE__*/function () {\n    function Resource$Projects$Alertpolicies(context) {\n      _classCallCheck(this, Resource$Projects$Alertpolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Alertpolicies, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/alertPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/alertPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Alertpolicies;\n  }();\n\n  monitoring_v3.Resource$Projects$Alertpolicies = Resource$Projects$Alertpolicies;\n\n  var Resource$Projects$Collectdtimeseries = /*#__PURE__*/function () {\n    function Resource$Projects$Collectdtimeseries(context) {\n      _classCallCheck(this, Resource$Projects$Collectdtimeseries);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Collectdtimeseries, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/collectdTimeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Collectdtimeseries;\n  }();\n\n  monitoring_v3.Resource$Projects$Collectdtimeseries = Resource$Projects$Collectdtimeseries;\n\n  var Resource$Projects$Groups = /*#__PURE__*/function () {\n    function Resource$Projects$Groups(context) {\n      _classCallCheck(this, Resource$Projects$Groups);\n\n      this.context = context;\n      this.members = new Resource$Projects$Groups$Members(this.context);\n    }\n\n    _createClass(Resource$Projects$Groups, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Groups;\n  }();\n\n  monitoring_v3.Resource$Projects$Groups = Resource$Projects$Groups;\n\n  var Resource$Projects$Groups$Members = /*#__PURE__*/function () {\n    function Resource$Projects$Groups$Members(context) {\n      _classCallCheck(this, Resource$Projects$Groups$Members);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Groups$Members, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Groups$Members;\n  }();\n\n  monitoring_v3.Resource$Projects$Groups$Members = Resource$Projects$Groups$Members;\n\n  var Resource$Projects$Metricdescriptors = /*#__PURE__*/function () {\n    function Resource$Projects$Metricdescriptors(context) {\n      _classCallCheck(this, Resource$Projects$Metricdescriptors);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Metricdescriptors, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/metricDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/metricDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Metricdescriptors;\n  }();\n\n  monitoring_v3.Resource$Projects$Metricdescriptors = Resource$Projects$Metricdescriptors;\n\n  var Resource$Projects$Monitoredresourcedescriptors = /*#__PURE__*/function () {\n    function Resource$Projects$Monitoredresourcedescriptors(context) {\n      _classCallCheck(this, Resource$Projects$Monitoredresourcedescriptors);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Monitoredresourcedescriptors, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/monitoredResourceDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Monitoredresourcedescriptors;\n  }();\n\n  monitoring_v3.Resource$Projects$Monitoredresourcedescriptors = Resource$Projects$Monitoredresourcedescriptors;\n\n  var Resource$Projects$Notificationchanneldescriptors = /*#__PURE__*/function () {\n    function Resource$Projects$Notificationchanneldescriptors(context) {\n      _classCallCheck(this, Resource$Projects$Notificationchanneldescriptors);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Notificationchanneldescriptors, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/notificationChannelDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Notificationchanneldescriptors;\n  }();\n\n  monitoring_v3.Resource$Projects$Notificationchanneldescriptors = Resource$Projects$Notificationchanneldescriptors;\n\n  var Resource$Projects$Notificationchannels = /*#__PURE__*/function () {\n    function Resource$Projects$Notificationchannels(context) {\n      _classCallCheck(this, Resource$Projects$Notificationchannels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Notificationchannels, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/notificationChannels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getVerificationCode\",\n      value: function getVerificationCode(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}:getVerificationCode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/notificationChannels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"sendVerificationCode\",\n      value: function sendVerificationCode(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}:sendVerificationCode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"verify\",\n      value: function verify(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}:verify').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Notificationchannels;\n  }();\n\n  monitoring_v3.Resource$Projects$Notificationchannels = Resource$Projects$Notificationchannels;\n\n  var Resource$Projects$Timeseries = /*#__PURE__*/function () {\n    function Resource$Projects$Timeseries(context) {\n      _classCallCheck(this, Resource$Projects$Timeseries);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Timeseries, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Timeseries;\n  }();\n\n  monitoring_v3.Resource$Projects$Timeseries = Resource$Projects$Timeseries;\n\n  var Resource$Projects$Uptimecheckconfigs = /*#__PURE__*/function () {\n    function Resource$Projects$Uptimecheckconfigs(context) {\n      _classCallCheck(this, Resource$Projects$Uptimecheckconfigs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Uptimecheckconfigs, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+parent}/uptimeCheckConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+parent}/uptimeCheckConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Uptimecheckconfigs;\n  }();\n\n  monitoring_v3.Resource$Projects$Uptimecheckconfigs = Resource$Projects$Uptimecheckconfigs;\n\n  var Resource$Uptimecheckips = /*#__PURE__*/function () {\n    function Resource$Uptimecheckips(context) {\n      _classCallCheck(this, Resource$Uptimecheckips);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Uptimecheckips, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/uptimeCheckIps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Uptimecheckips;\n  }();\n\n  monitoring_v3.Resource$Uptimecheckips = Resource$Uptimecheckips;\n})(monitoring_v3 = exports.monitoring_v3 || (exports.monitoring_v3 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/monitoring/v3.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","monitoring_v3","Monitoring","options","google","context","_options","projects","Resource$Projects","uptimeCheckIps","Resource$Uptimecheckips","alertPolicies","Resource$Projects$Alertpolicies","collectdTimeSeries","Resource$Projects$Collectdtimeseries","groups","Resource$Projects$Groups","metricDescriptors","Resource$Projects$Metricdescriptors","monitoredResourceDescriptors","Resource$Projects$Monitoredresourcedescriptors","notificationChannelDescriptors","Resource$Projects$Notificationchanneldescriptors","notificationChannels","Resource$Projects$Notificationchannels","timeSeries","Resource$Projects$Timeseries","uptimeCheckConfigs","Resource$Projects$Uptimecheckconfigs","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","members","Resource$Projects$Groups$Members"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar monitoring_v3;\n(function (monitoring_v3) {\n    /**\n     * Stackdriver Monitoring API\n     *\n     * Manages your Stackdriver Monitoring data and configurations. Most projects\n     * must be associated with a Stackdriver account, with a few exceptions as\n     * noted on the individual method pages.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const monitoring = google.monitoring('v3');\n     *\n     * @namespace monitoring\n     * @type {Function}\n     * @version v3\n     * @variation v3\n     * @param {object=} options Options for Monitoring\n     */\n    class Monitoring {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.projects = new Resource$Projects(this.context);\n            this.uptimeCheckIps = new Resource$Uptimecheckips(this.context);\n        }\n    }\n    monitoring_v3.Monitoring = Monitoring;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.alertPolicies = new Resource$Projects$Alertpolicies(this.context);\n            this.collectdTimeSeries =\n                new Resource$Projects$Collectdtimeseries(this.context);\n            this.groups = new Resource$Projects$Groups(this.context);\n            this.metricDescriptors =\n                new Resource$Projects$Metricdescriptors(this.context);\n            this.monitoredResourceDescriptors =\n                new Resource$Projects$Monitoredresourcedescriptors(this.context);\n            this.notificationChannelDescriptors =\n                new Resource$Projects$Notificationchanneldescriptors(this.context);\n            this.notificationChannels =\n                new Resource$Projects$Notificationchannels(this.context);\n            this.timeSeries = new Resource$Projects$Timeseries(this.context);\n            this.uptimeCheckConfigs =\n                new Resource$Projects$Uptimecheckconfigs(this.context);\n        }\n    }\n    monitoring_v3.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Alertpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/alertPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/alertPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Alertpolicies = Resource$Projects$Alertpolicies;\n    class Resource$Projects$Collectdtimeseries {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/collectdTimeSeries')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Collectdtimeseries = Resource$Projects$Collectdtimeseries;\n    class Resource$Projects$Groups {\n        constructor(context) {\n            this.context = context;\n            this.members = new Resource$Projects$Groups$Members(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/groups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/groups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Groups = Resource$Projects$Groups;\n    class Resource$Projects$Groups$Members {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/members')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Groups$Members = Resource$Projects$Groups$Members;\n    class Resource$Projects$Metricdescriptors {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/metricDescriptors')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/metricDescriptors')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Metricdescriptors = Resource$Projects$Metricdescriptors;\n    class Resource$Projects$Monitoredresourcedescriptors {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/monitoredResourceDescriptors')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Monitoredresourcedescriptors = Resource$Projects$Monitoredresourcedescriptors;\n    class Resource$Projects$Notificationchanneldescriptors {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/notificationChannelDescriptors')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Notificationchanneldescriptors = Resource$Projects$Notificationchanneldescriptors;\n    class Resource$Projects$Notificationchannels {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/notificationChannels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getVerificationCode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}:getVerificationCode')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/notificationChannels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sendVerificationCode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}:sendVerificationCode')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        verify(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}:verify')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Notificationchannels = Resource$Projects$Notificationchannels;\n    class Resource$Projects$Timeseries {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/timeSeries')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/timeSeries')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Timeseries = Resource$Projects$Timeseries;\n    class Resource$Projects$Uptimecheckconfigs {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+parent}/uptimeCheckConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+parent}/uptimeCheckConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Uptimecheckconfigs = Resource$Projects$Uptimecheckconfigs;\n    class Resource$Uptimecheckips {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/uptimeCheckIps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Uptimecheckips = Resource$Uptimecheckips;\n})(monitoring_v3 = exports.monitoring_v3 || (exports.monitoring_v3 = {}));\n//# sourceMappingURL=v3.js.map"]},"metadata":{},"sourceType":"script"}