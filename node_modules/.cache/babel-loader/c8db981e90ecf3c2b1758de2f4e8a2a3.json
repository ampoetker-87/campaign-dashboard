{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.texttospeech_v1beta1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar texttospeech_v1beta1;\n\n(function (texttospeech_v1beta1) {\n  /**\n   * Cloud Text-to-Speech API\n   *\n   * Synthesizes natural-sounding speech by applying powerful neural network models.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const texttospeech = google.texttospeech('v1beta1');\n   * ```\n   */\n  var Texttospeech = function Texttospeech(options, google) {\n    _classCallCheck(this, Texttospeech);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.text = new Resource$Text(this.context);\n    this.voices = new Resource$Voices(this.context);\n  };\n\n  texttospeech_v1beta1.Texttospeech = Texttospeech;\n\n  var Resource$Text = /*#__PURE__*/function () {\n    function Resource$Text(context) {\n      _classCallCheck(this, Resource$Text);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Text, [{\n      key: \"synthesize\",\n      value: function synthesize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://texttospeech.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/text:synthesize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Text;\n  }();\n\n  texttospeech_v1beta1.Resource$Text = Resource$Text;\n\n  var Resource$Voices = /*#__PURE__*/function () {\n    function Resource$Voices(context) {\n      _classCallCheck(this, Resource$Voices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Voices, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://texttospeech.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/voices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Voices;\n  }();\n\n  texttospeech_v1beta1.Resource$Voices = Resource$Voices;\n})(texttospeech_v1beta1 = exports.texttospeech_v1beta1 || (exports.texttospeech_v1beta1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/texttospeech/v1beta1.js"],"names":["Object","defineProperty","exports","value","texttospeech_v1beta1","googleapis_common_1","require","Texttospeech","options","google","context","_options","text","Resource$Text","voices","Resource$Voices","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.texttospeech_v1beta1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar texttospeech_v1beta1;\n(function (texttospeech_v1beta1) {\n    /**\n     * Cloud Text-to-Speech API\n     *\n     * Synthesizes natural-sounding speech by applying powerful neural network models.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const texttospeech = google.texttospeech('v1beta1');\n     * ```\n     */\n    class Texttospeech {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.text = new Resource$Text(this.context);\n            this.voices = new Resource$Voices(this.context);\n        }\n    }\n    texttospeech_v1beta1.Texttospeech = Texttospeech;\n    class Resource$Text {\n        constructor(context) {\n            this.context = context;\n        }\n        synthesize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://texttospeech.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/text:synthesize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    texttospeech_v1beta1.Resource$Text = Resource$Text;\n    class Resource$Voices {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://texttospeech.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/voices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    texttospeech_v1beta1.Resource$Voices = Resource$Voices;\n})(texttospeech_v1beta1 = exports.texttospeech_v1beta1 || (exports.texttospeech_v1beta1 = {}));\n//# sourceMappingURL=v1beta1.js.map"]},"metadata":{},"sourceType":"script"}