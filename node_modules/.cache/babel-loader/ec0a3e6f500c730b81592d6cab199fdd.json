{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar cloudtrace_v2;\n\n(function (cloudtrace_v2) {\n  /**\n   * Stackdriver Trace API\n   *\n   * Sends application trace data to Stackdriver Trace for viewing. Trace data\n   * is collected for all App Engine applications by default. Trace data from\n   * other applications can be provided using this API. This library is used to\n   * interact with the Trace API directly. If you are looking to instrument your\n   * application for Stackdriver Trace, we recommend using OpenCensus.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const cloudtrace = google.cloudtrace('v2');\n   *\n   * @namespace cloudtrace\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Cloudtrace\n   */\n  var Cloudtrace = function Cloudtrace(options, google) {\n    _classCallCheck(this, Cloudtrace);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.projects = new Resource$Projects(this.context);\n  };\n\n  cloudtrace_v2.Cloudtrace = Cloudtrace;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.traces = new Resource$Projects$Traces(this.context);\n  };\n\n  cloudtrace_v2.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Traces = /*#__PURE__*/function () {\n    function Resource$Projects$Traces(context) {\n      _classCallCheck(this, Resource$Projects$Traces);\n\n      this.context = context;\n      this.spans = new Resource$Projects$Traces$Spans(this.context);\n    }\n\n    _createClass(Resource$Projects$Traces, [{\n      key: \"batchWrite\",\n      value: function batchWrite(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}/traces:batchWrite').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Traces;\n  }();\n\n  cloudtrace_v2.Resource$Projects$Traces = Resource$Projects$Traces;\n\n  var Resource$Projects$Traces$Spans = /*#__PURE__*/function () {\n    function Resource$Projects$Traces$Spans(context) {\n      _classCallCheck(this, Resource$Projects$Traces$Spans);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Traces$Spans, [{\n      key: \"createSpan\",\n      value: function createSpan(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Traces$Spans;\n  }();\n\n  cloudtrace_v2.Resource$Projects$Traces$Spans = Resource$Projects$Traces$Spans;\n})(cloudtrace_v2 = exports.cloudtrace_v2 || (exports.cloudtrace_v2 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/cloudtrace/v2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","cloudtrace_v2","Cloudtrace","options","google","context","_options","projects","Resource$Projects","traces","Resource$Projects$Traces","spans","Resource$Projects$Traces$Spans","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar cloudtrace_v2;\n(function (cloudtrace_v2) {\n    /**\n     * Stackdriver Trace API\n     *\n     * Sends application trace data to Stackdriver Trace for viewing. Trace data\n     * is collected for all App Engine applications by default. Trace data from\n     * other applications can be provided using this API. This library is used to\n     * interact with the Trace API directly. If you are looking to instrument your\n     * application for Stackdriver Trace, we recommend using OpenCensus.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const cloudtrace = google.cloudtrace('v2');\n     *\n     * @namespace cloudtrace\n     * @type {Function}\n     * @version v2\n     * @variation v2\n     * @param {object=} options Options for Cloudtrace\n     */\n    class Cloudtrace {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    cloudtrace_v2.Cloudtrace = Cloudtrace;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.traces = new Resource$Projects$Traces(this.context);\n        }\n    }\n    cloudtrace_v2.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Traces {\n        constructor(context) {\n            this.context = context;\n            this.spans = new Resource$Projects$Traces$Spans(this.context);\n        }\n        batchWrite(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}/traces:batchWrite')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudtrace_v2.Resource$Projects$Traces = Resource$Projects$Traces;\n    class Resource$Projects$Traces$Spans {\n        constructor(context) {\n            this.context = context;\n        }\n        createSpan(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudtrace.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    cloudtrace_v2.Resource$Projects$Traces$Spans = Resource$Projects$Traces$Spans;\n})(cloudtrace_v2 = exports.cloudtrace_v2 || (exports.cloudtrace_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}