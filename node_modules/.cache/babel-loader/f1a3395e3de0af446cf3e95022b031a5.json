{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.datalabeling_v1beta1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar datalabeling_v1beta1;\n\n(function (datalabeling_v1beta1) {\n  /**\n   * Data Labeling API\n   *\n   * Public API for Google Cloud AI Data Labeling Service.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const datalabeling = google.datalabeling('v1beta1');\n   * ```\n   */\n  var Datalabeling = function Datalabeling(options, google) {\n    _classCallCheck(this, Datalabeling);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.projects = new Resource$Projects(this.context);\n  };\n\n  datalabeling_v1beta1.Datalabeling = Datalabeling;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.annotationSpecSets = new Resource$Projects$Annotationspecsets(this.context);\n    this.datasets = new Resource$Projects$Datasets(this.context);\n    this.evaluationJobs = new Resource$Projects$Evaluationjobs(this.context);\n    this.evaluations = new Resource$Projects$Evaluations(this.context);\n    this.instructions = new Resource$Projects$Instructions(this.context);\n    this.operations = new Resource$Projects$Operations(this.context);\n  };\n\n  datalabeling_v1beta1.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Annotationspecsets = /*#__PURE__*/function () {\n    function Resource$Projects$Annotationspecsets(context) {\n      _classCallCheck(this, Resource$Projects$Annotationspecsets);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Annotationspecsets, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/annotationSpecSets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/annotationSpecSets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Annotationspecsets;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Annotationspecsets = Resource$Projects$Annotationspecsets;\n\n  var Resource$Projects$Datasets = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets(context) {\n      _classCallCheck(this, Resource$Projects$Datasets);\n\n      this.context = context;\n      this.annotatedDatasets = new Resource$Projects$Datasets$Annotateddatasets(this.context);\n      this.dataItems = new Resource$Projects$Datasets$Dataitems(this.context);\n      this.evaluations = new Resource$Projects$Datasets$Evaluations(this.context);\n      this.image = new Resource$Projects$Datasets$Image(this.context);\n      this.text = new Resource$Projects$Datasets$Text(this.context);\n      this.video = new Resource$Projects$Datasets$Video(this.context);\n    }\n\n    _createClass(Resource$Projects$Datasets, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"exportData\",\n      value: function exportData(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}:exportData').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"importData\",\n      value: function importData(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}:importData').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets = Resource$Projects$Datasets;\n\n  var Resource$Projects$Datasets$Annotateddatasets = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Annotateddatasets(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Annotateddatasets);\n\n      this.context = context;\n      this.dataItems = new Resource$Projects$Datasets$Annotateddatasets$Dataitems(this.context);\n      this.examples = new Resource$Projects$Datasets$Annotateddatasets$Examples(this.context);\n      this.feedbackThreads = new Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads(this.context);\n    }\n\n    _createClass(Resource$Projects$Datasets$Annotateddatasets, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/annotatedDatasets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Annotateddatasets;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets = Resource$Projects$Datasets$Annotateddatasets;\n\n  var Resource$Projects$Datasets$Annotateddatasets$Dataitems = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Annotateddatasets$Dataitems(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Annotateddatasets$Dataitems);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Datasets$Annotateddatasets$Dataitems, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/dataItems').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Annotateddatasets$Dataitems;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets$Dataitems = Resource$Projects$Datasets$Annotateddatasets$Dataitems;\n\n  var Resource$Projects$Datasets$Annotateddatasets$Examples = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Annotateddatasets$Examples(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Annotateddatasets$Examples);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Datasets$Annotateddatasets$Examples, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/examples').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Annotateddatasets$Examples;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets$Examples = Resource$Projects$Datasets$Annotateddatasets$Examples;\n\n  var Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads);\n\n      this.context = context;\n      this.feedbackMessages = new Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages(this.context);\n    }\n\n    _createClass(Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/feedbackThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads = Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads;\n\n  var Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/feedbackMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/feedbackMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages = Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages;\n\n  var Resource$Projects$Datasets$Dataitems = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Dataitems(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Dataitems);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Datasets$Dataitems, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/dataItems').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Dataitems;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Dataitems = Resource$Projects$Datasets$Dataitems;\n\n  var Resource$Projects$Datasets$Evaluations = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Evaluations(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Evaluations);\n\n      this.context = context;\n      this.exampleComparisons = new Resource$Projects$Datasets$Evaluations$Examplecomparisons(this.context);\n    }\n\n    _createClass(Resource$Projects$Datasets$Evaluations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Evaluations;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Evaluations = Resource$Projects$Datasets$Evaluations;\n\n  var Resource$Projects$Datasets$Evaluations$Examplecomparisons = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Evaluations$Examplecomparisons(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Evaluations$Examplecomparisons);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Datasets$Evaluations$Examplecomparisons, [{\n      key: \"search\",\n      value: function search(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/exampleComparisons:search').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Evaluations$Examplecomparisons;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Evaluations$Examplecomparisons = Resource$Projects$Datasets$Evaluations$Examplecomparisons;\n\n  var Resource$Projects$Datasets$Image = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Image(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Image);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Datasets$Image, [{\n      key: \"label\",\n      value: function label(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/image:label').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Image;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Image = Resource$Projects$Datasets$Image;\n\n  var Resource$Projects$Datasets$Text = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Text(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Text);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Datasets$Text, [{\n      key: \"label\",\n      value: function label(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/text:label').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Text;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Text = Resource$Projects$Datasets$Text;\n\n  var Resource$Projects$Datasets$Video = /*#__PURE__*/function () {\n    function Resource$Projects$Datasets$Video(context) {\n      _classCallCheck(this, Resource$Projects$Datasets$Video);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Datasets$Video, [{\n      key: \"label\",\n      value: function label(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/video:label').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasets$Video;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Datasets$Video = Resource$Projects$Datasets$Video;\n\n  var Resource$Projects$Evaluationjobs = /*#__PURE__*/function () {\n    function Resource$Projects$Evaluationjobs(context) {\n      _classCallCheck(this, Resource$Projects$Evaluationjobs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Evaluationjobs, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/evaluationJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/evaluationJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"pause\",\n      value: function pause(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resume\",\n      value: function resume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Evaluationjobs;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Evaluationjobs = Resource$Projects$Evaluationjobs;\n\n  var Resource$Projects$Evaluations = /*#__PURE__*/function () {\n    function Resource$Projects$Evaluations(context) {\n      _classCallCheck(this, Resource$Projects$Evaluations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Evaluations, [{\n      key: \"search\",\n      value: function search(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/evaluations:search').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Evaluations;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Evaluations = Resource$Projects$Evaluations;\n\n  var Resource$Projects$Instructions = /*#__PURE__*/function () {\n    function Resource$Projects$Instructions(context) {\n      _classCallCheck(this, Resource$Projects$Instructions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Instructions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/instructions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+parent}/instructions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Instructions;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Instructions = Resource$Projects$Instructions;\n\n  var Resource$Projects$Operations = /*#__PURE__*/function () {\n    function Resource$Projects$Operations(context) {\n      _classCallCheck(this, Resource$Projects$Operations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Operations, [{\n      key: \"cancel\",\n      value: function cancel(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Operations;\n  }();\n\n  datalabeling_v1beta1.Resource$Projects$Operations = Resource$Projects$Operations;\n})(datalabeling_v1beta1 = exports.datalabeling_v1beta1 || (exports.datalabeling_v1beta1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/googleapis/build/src/apis/datalabeling/v1beta1.js"],"names":["Object","defineProperty","exports","value","datalabeling_v1beta1","googleapis_common_1","require","Datalabeling","options","google","context","_options","projects","Resource$Projects","annotationSpecSets","Resource$Projects$Annotationspecsets","datasets","Resource$Projects$Datasets","evaluationJobs","Resource$Projects$Evaluationjobs","evaluations","Resource$Projects$Evaluations","instructions","Resource$Projects$Instructions","operations","Resource$Projects$Operations","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","annotatedDatasets","Resource$Projects$Datasets$Annotateddatasets","dataItems","Resource$Projects$Datasets$Dataitems","Resource$Projects$Datasets$Evaluations","image","Resource$Projects$Datasets$Image","text","Resource$Projects$Datasets$Text","video","Resource$Projects$Datasets$Video","Resource$Projects$Datasets$Annotateddatasets$Dataitems","examples","Resource$Projects$Datasets$Annotateddatasets$Examples","feedbackThreads","Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads","feedbackMessages","Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages","exampleComparisons","Resource$Projects$Datasets$Evaluations$Examplecomparisons"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.datalabeling_v1beta1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar datalabeling_v1beta1;\n(function (datalabeling_v1beta1) {\n    /**\n     * Data Labeling API\n     *\n     * Public API for Google Cloud AI Data Labeling Service.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const datalabeling = google.datalabeling('v1beta1');\n     * ```\n     */\n    class Datalabeling {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    datalabeling_v1beta1.Datalabeling = Datalabeling;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.annotationSpecSets = new Resource$Projects$Annotationspecsets(this.context);\n            this.datasets = new Resource$Projects$Datasets(this.context);\n            this.evaluationJobs = new Resource$Projects$Evaluationjobs(this.context);\n            this.evaluations = new Resource$Projects$Evaluations(this.context);\n            this.instructions = new Resource$Projects$Instructions(this.context);\n            this.operations = new Resource$Projects$Operations(this.context);\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Annotationspecsets {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/annotationSpecSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/annotationSpecSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Annotationspecsets = Resource$Projects$Annotationspecsets;\n    class Resource$Projects$Datasets {\n        constructor(context) {\n            this.context = context;\n            this.annotatedDatasets = new Resource$Projects$Datasets$Annotateddatasets(this.context);\n            this.dataItems = new Resource$Projects$Datasets$Dataitems(this.context);\n            this.evaluations = new Resource$Projects$Datasets$Evaluations(this.context);\n            this.image = new Resource$Projects$Datasets$Image(this.context);\n            this.text = new Resource$Projects$Datasets$Text(this.context);\n            this.video = new Resource$Projects$Datasets$Video(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        exportData(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}:exportData').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        importData(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}:importData').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets = Resource$Projects$Datasets;\n    class Resource$Projects$Datasets$Annotateddatasets {\n        constructor(context) {\n            this.context = context;\n            this.dataItems = new Resource$Projects$Datasets$Annotateddatasets$Dataitems(this.context);\n            this.examples = new Resource$Projects$Datasets$Annotateddatasets$Examples(this.context);\n            this.feedbackThreads = new Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/annotatedDatasets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets = Resource$Projects$Datasets$Annotateddatasets;\n    class Resource$Projects$Datasets$Annotateddatasets$Dataitems {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/dataItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets$Dataitems = Resource$Projects$Datasets$Annotateddatasets$Dataitems;\n    class Resource$Projects$Datasets$Annotateddatasets$Examples {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/examples').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets$Examples = Resource$Projects$Datasets$Annotateddatasets$Examples;\n    class Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads {\n        constructor(context) {\n            this.context = context;\n            this.feedbackMessages = new Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/feedbackThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads = Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads;\n    class Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/feedbackMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/feedbackMessages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages = Resource$Projects$Datasets$Annotateddatasets$Feedbackthreads$Feedbackmessages;\n    class Resource$Projects$Datasets$Dataitems {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/dataItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Dataitems = Resource$Projects$Datasets$Dataitems;\n    class Resource$Projects$Datasets$Evaluations {\n        constructor(context) {\n            this.context = context;\n            this.exampleComparisons = new Resource$Projects$Datasets$Evaluations$Examplecomparisons(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Evaluations = Resource$Projects$Datasets$Evaluations;\n    class Resource$Projects$Datasets$Evaluations$Examplecomparisons {\n        constructor(context) {\n            this.context = context;\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/exampleComparisons:search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Evaluations$Examplecomparisons = Resource$Projects$Datasets$Evaluations$Examplecomparisons;\n    class Resource$Projects$Datasets$Image {\n        constructor(context) {\n            this.context = context;\n        }\n        label(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/image:label').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Image = Resource$Projects$Datasets$Image;\n    class Resource$Projects$Datasets$Text {\n        constructor(context) {\n            this.context = context;\n        }\n        label(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/text:label').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Text = Resource$Projects$Datasets$Text;\n    class Resource$Projects$Datasets$Video {\n        constructor(context) {\n            this.context = context;\n        }\n        label(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/video:label').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Datasets$Video = Resource$Projects$Datasets$Video;\n    class Resource$Projects$Evaluationjobs {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/evaluationJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/evaluationJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        pause(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Evaluationjobs = Resource$Projects$Evaluationjobs;\n    class Resource$Projects$Evaluations {\n        constructor(context) {\n            this.context = context;\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/evaluations:search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Evaluations = Resource$Projects$Evaluations;\n    class Resource$Projects$Instructions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/instructions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+parent}/instructions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Instructions = Resource$Projects$Instructions;\n    class Resource$Projects$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://datalabeling.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    datalabeling_v1beta1.Resource$Projects$Operations = Resource$Projects$Operations;\n})(datalabeling_v1beta1 = exports.datalabeling_v1beta1 || (exports.datalabeling_v1beta1 = {}));\n//# sourceMappingURL=v1beta1.js.map"]},"metadata":{},"sourceType":"script"}