{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar iam_v1;\n\n(function (iam_v1) {\n  /**\n   * Identity and Access Management (IAM) API\n   *\n   * Manages identity and access control for Google Cloud Platform resources,\n   * including the creation of service accounts, which you can use to\n   * authenticate to Google and make API calls.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const iam = google.iam('v1');\n   *\n   * @namespace iam\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Iam\n   */\n  var Iam = function Iam(options, google) {\n    _classCallCheck(this, Iam);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.iamPolicies = new Resource$Iampolicies(this.context);\n    this.organizations = new Resource$Organizations(this.context);\n    this.permissions = new Resource$Permissions(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.roles = new Resource$Roles(this.context);\n  };\n\n  iam_v1.Iam = Iam;\n\n  var Resource$Iampolicies = /*#__PURE__*/function () {\n    function Resource$Iampolicies(context) {\n      _classCallCheck(this, Resource$Iampolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Iampolicies, [{\n      key: \"lintPolicy\",\n      value: function lintPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/iamPolicies:lintPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"queryAuditableServices\",\n      value: function queryAuditableServices(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/iamPolicies:queryAuditableServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Iampolicies;\n  }();\n\n  iam_v1.Resource$Iampolicies = Resource$Iampolicies;\n\n  var Resource$Organizations = function Resource$Organizations(context) {\n    _classCallCheck(this, Resource$Organizations);\n\n    this.context = context;\n    this.roles = new Resource$Organizations$Roles(this.context);\n  };\n\n  iam_v1.Resource$Organizations = Resource$Organizations;\n\n  var Resource$Organizations$Roles = /*#__PURE__*/function () {\n    function Resource$Organizations$Roles(context) {\n      _classCallCheck(this, Resource$Organizations$Roles);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Organizations$Roles, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"undelete\",\n      value: function undelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Organizations$Roles;\n  }();\n\n  iam_v1.Resource$Organizations$Roles = Resource$Organizations$Roles;\n\n  var Resource$Permissions = /*#__PURE__*/function () {\n    function Resource$Permissions(context) {\n      _classCallCheck(this, Resource$Permissions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Permissions, [{\n      key: \"queryTestablePermissions\",\n      value: function queryTestablePermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/permissions:queryTestablePermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Permissions;\n  }();\n\n  iam_v1.Resource$Permissions = Resource$Permissions;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.roles = new Resource$Projects$Roles(this.context);\n    this.serviceAccounts = new Resource$Projects$Serviceaccounts(this.context);\n  };\n\n  iam_v1.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Roles = /*#__PURE__*/function () {\n    function Resource$Projects$Roles(context) {\n      _classCallCheck(this, Resource$Projects$Roles);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Roles, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"undelete\",\n      value: function undelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Roles;\n  }();\n\n  iam_v1.Resource$Projects$Roles = Resource$Projects$Roles;\n\n  var Resource$Projects$Serviceaccounts = /*#__PURE__*/function () {\n    function Resource$Projects$Serviceaccounts(context) {\n      _classCallCheck(this, Resource$Projects$Serviceaccounts);\n\n      this.context = context;\n      this.keys = new Resource$Projects$Serviceaccounts$Keys(this.context);\n    }\n\n    _createClass(Resource$Projects$Serviceaccounts, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}/serviceAccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"disable\",\n      value: function disable(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:disable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enable\",\n      value: function enable(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:enable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}/serviceAccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"signBlob\",\n      value: function signBlob(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:signBlob').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"signJwt\",\n      value: function signJwt(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:signJwt').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"undelete\",\n      value: function undelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Serviceaccounts;\n  }();\n\n  iam_v1.Resource$Projects$Serviceaccounts = Resource$Projects$Serviceaccounts;\n\n  var Resource$Projects$Serviceaccounts$Keys = /*#__PURE__*/function () {\n    function Resource$Projects$Serviceaccounts$Keys(context) {\n      _classCallCheck(this, Resource$Projects$Serviceaccounts$Keys);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Serviceaccounts$Keys, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}/keys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}/keys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Serviceaccounts$Keys;\n  }();\n\n  iam_v1.Resource$Projects$Serviceaccounts$Keys = Resource$Projects$Serviceaccounts$Keys;\n\n  var Resource$Roles = /*#__PURE__*/function () {\n    function Resource$Roles(context) {\n      _classCallCheck(this, Resource$Roles);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Roles, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"queryGrantableRoles\",\n      value: function queryGrantableRoles(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/roles:queryGrantableRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Roles;\n  }();\n\n  iam_v1.Resource$Roles = Resource$Roles;\n})(iam_v1 = exports.iam_v1 || (exports.iam_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/iam/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","iam_v1","Iam","options","google","context","_options","iamPolicies","Resource$Iampolicies","organizations","Resource$Organizations","permissions","Resource$Permissions","projects","Resource$Projects","roles","Resource$Roles","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Organizations$Roles","Resource$Projects$Roles","serviceAccounts","Resource$Projects$Serviceaccounts","keys","Resource$Projects$Serviceaccounts$Keys"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar iam_v1;\n(function (iam_v1) {\n    /**\n     * Identity and Access Management (IAM) API\n     *\n     * Manages identity and access control for Google Cloud Platform resources,\n     * including the creation of service accounts, which you can use to\n     * authenticate to Google and make API calls.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const iam = google.iam('v1');\n     *\n     * @namespace iam\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Iam\n     */\n    class Iam {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.iamPolicies = new Resource$Iampolicies(this.context);\n            this.organizations = new Resource$Organizations(this.context);\n            this.permissions = new Resource$Permissions(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.roles = new Resource$Roles(this.context);\n        }\n    }\n    iam_v1.Iam = Iam;\n    class Resource$Iampolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        lintPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/iamPolicies:lintPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        queryAuditableServices(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/iamPolicies:queryAuditableServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    iam_v1.Resource$Iampolicies = Resource$Iampolicies;\n    class Resource$Organizations {\n        constructor(context) {\n            this.context = context;\n            this.roles = new Resource$Organizations$Roles(this.context);\n        }\n    }\n    iam_v1.Resource$Organizations = Resource$Organizations;\n    class Resource$Organizations$Roles {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/roles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/roles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        undelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:undelete')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    iam_v1.Resource$Organizations$Roles = Resource$Organizations$Roles;\n    class Resource$Permissions {\n        constructor(context) {\n            this.context = context;\n        }\n        queryTestablePermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/permissions:queryTestablePermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    iam_v1.Resource$Permissions = Resource$Permissions;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.roles = new Resource$Projects$Roles(this.context);\n            this.serviceAccounts =\n                new Resource$Projects$Serviceaccounts(this.context);\n        }\n    }\n    iam_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Roles {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/roles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/roles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        undelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:undelete')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    iam_v1.Resource$Projects$Roles = Resource$Projects$Roles;\n    class Resource$Projects$Serviceaccounts {\n        constructor(context) {\n            this.context = context;\n            this.keys = new Resource$Projects$Serviceaccounts$Keys(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/serviceAccounts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        disable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:disable')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:enable')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/serviceAccounts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        signBlob(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:signBlob')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        signJwt(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:signJwt')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        undelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:undelete')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    iam_v1.Resource$Projects$Serviceaccounts = Resource$Projects$Serviceaccounts;\n    class Resource$Projects$Serviceaccounts$Keys {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/keys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/keys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    iam_v1.Resource$Projects$Serviceaccounts$Keys = Resource$Projects$Serviceaccounts$Keys;\n    class Resource$Roles {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        queryGrantableRoles(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://iam.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/roles:queryGrantableRoles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    iam_v1.Resource$Roles = Resource$Roles;\n})(iam_v1 = exports.iam_v1 || (exports.iam_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}