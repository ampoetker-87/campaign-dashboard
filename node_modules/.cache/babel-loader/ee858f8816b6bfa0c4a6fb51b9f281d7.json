{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storage_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar storage_v1;\n\n(function (storage_v1) {\n  /**\n   * Cloud Storage JSON API\n   *\n   * Stores and retrieves potentially large, immutable data objects.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const storage = google.storage('v1');\n   * ```\n   */\n  var Storage = function Storage(options, google) {\n    _classCallCheck(this, Storage);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.bucketAccessControls = new Resource$Bucketaccesscontrols(this.context);\n    this.buckets = new Resource$Buckets(this.context);\n    this.channels = new Resource$Channels(this.context);\n    this.defaultObjectAccessControls = new Resource$Defaultobjectaccesscontrols(this.context);\n    this.notifications = new Resource$Notifications(this.context);\n    this.objectAccessControls = new Resource$Objectaccesscontrols(this.context);\n    this.objects = new Resource$Objects(this.context);\n    this.projects = new Resource$Projects(this.context);\n  };\n\n  storage_v1.Storage = Storage;\n\n  var Resource$Bucketaccesscontrols = /*#__PURE__*/function () {\n    function Resource$Bucketaccesscontrols(context) {\n      _classCallCheck(this, Resource$Bucketaccesscontrols);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Bucketaccesscontrols, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'entity'],\n          pathParams: ['bucket', 'entity'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'entity'],\n          pathParams: ['bucket', 'entity'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'entity'],\n          pathParams: ['bucket', 'entity'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'entity'],\n          pathParams: ['bucket', 'entity'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Bucketaccesscontrols;\n  }();\n\n  storage_v1.Resource$Bucketaccesscontrols = Resource$Bucketaccesscontrols;\n\n  var Resource$Buckets = /*#__PURE__*/function () {\n    function Resource$Buckets(context) {\n      _classCallCheck(this, Resource$Buckets);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Buckets, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"lockRetentionPolicy\",\n      value: function lockRetentionPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/lockRetentionPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'ifMetagenerationMatch'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'permissions'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Buckets;\n  }();\n\n  storage_v1.Resource$Buckets = Resource$Buckets;\n\n  var Resource$Channels = /*#__PURE__*/function () {\n    function Resource$Channels(context) {\n      _classCallCheck(this, Resource$Channels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Channels, [{\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Channels;\n  }();\n\n  storage_v1.Resource$Channels = Resource$Channels;\n\n  var Resource$Defaultobjectaccesscontrols = /*#__PURE__*/function () {\n    function Resource$Defaultobjectaccesscontrols(context) {\n      _classCallCheck(this, Resource$Defaultobjectaccesscontrols);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Defaultobjectaccesscontrols, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'entity'],\n          pathParams: ['bucket', 'entity'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'entity'],\n          pathParams: ['bucket', 'entity'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'entity'],\n          pathParams: ['bucket', 'entity'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'entity'],\n          pathParams: ['bucket', 'entity'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Defaultobjectaccesscontrols;\n  }();\n\n  storage_v1.Resource$Defaultobjectaccesscontrols = Resource$Defaultobjectaccesscontrols;\n\n  var Resource$Notifications = /*#__PURE__*/function () {\n    function Resource$Notifications(context) {\n      _classCallCheck(this, Resource$Notifications);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Notifications, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'notification'],\n          pathParams: ['bucket', 'notification'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'notification'],\n          pathParams: ['bucket', 'notification'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Notifications;\n  }();\n\n  storage_v1.Resource$Notifications = Resource$Notifications;\n\n  var Resource$Objectaccesscontrols = /*#__PURE__*/function () {\n    function Resource$Objectaccesscontrols(context) {\n      _classCallCheck(this, Resource$Objectaccesscontrols);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Objectaccesscontrols, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object', 'entity'],\n          pathParams: ['bucket', 'entity', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object', 'entity'],\n          pathParams: ['bucket', 'entity', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object'],\n          pathParams: ['bucket', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object'],\n          pathParams: ['bucket', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object', 'entity'],\n          pathParams: ['bucket', 'entity', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object', 'entity'],\n          pathParams: ['bucket', 'entity', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Objectaccesscontrols;\n  }();\n\n  storage_v1.Resource$Objectaccesscontrols = Resource$Objectaccesscontrols;\n\n  var Resource$Objects = /*#__PURE__*/function () {\n    function Resource$Objects(context) {\n      _classCallCheck(this, Resource$Objects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Objects, [{\n      key: \"compose\",\n      value: function compose(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{destinationBucket}/o/{destinationObject}/compose').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['destinationBucket', 'destinationObject'],\n          pathParams: ['destinationBucket', 'destinationObject'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['sourceBucket', 'sourceObject', 'destinationBucket', 'destinationObject'],\n          pathParams: ['destinationBucket', 'destinationObject', 'sourceBucket', 'sourceObject'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object'],\n          pathParams: ['bucket', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object'],\n          pathParams: ['bucket', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object'],\n          pathParams: ['bucket', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object'],\n          pathParams: ['bucket', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"rewrite\",\n      value: function rewrite(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['sourceBucket', 'sourceObject', 'destinationBucket', 'destinationObject'],\n          pathParams: ['destinationBucket', 'destinationObject', 'sourceBucket', 'sourceObject'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object'],\n          pathParams: ['bucket', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object', 'permissions'],\n          pathParams: ['bucket', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['bucket', 'object'],\n          pathParams: ['bucket', 'object'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watchAll\",\n      value: function watchAll(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/b/{bucket}/o/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['bucket'],\n          pathParams: ['bucket'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Objects;\n  }();\n\n  storage_v1.Resource$Objects = Resource$Objects;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.hmacKeys = new Resource$Projects$Hmackeys(this.context);\n    this.serviceAccount = new Resource$Projects$Serviceaccount(this.context);\n  };\n\n  storage_v1.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Hmackeys = /*#__PURE__*/function () {\n    function Resource$Projects$Hmackeys(context) {\n      _classCallCheck(this, Resource$Projects$Hmackeys);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Hmackeys, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'serviceAccountEmail'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'accessId'],\n          pathParams: ['accessId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'accessId'],\n          pathParams: ['accessId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'accessId'],\n          pathParams: ['accessId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Hmackeys;\n  }();\n\n  storage_v1.Resource$Projects$Hmackeys = Resource$Projects$Hmackeys;\n\n  var Resource$Projects$Serviceaccount = /*#__PURE__*/function () {\n    function Resource$Projects$Serviceaccount(context) {\n      _classCallCheck(this, Resource$Projects$Serviceaccount);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Serviceaccount, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/storage/v1/projects/{projectId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Serviceaccount;\n  }();\n\n  storage_v1.Resource$Projects$Serviceaccount = Resource$Projects$Serviceaccount;\n})(storage_v1 = exports.storage_v1 || (exports.storage_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/storage/v1.js"],"names":["Object","defineProperty","exports","value","storage_v1","googleapis_common_1","require","Storage","options","google","context","_options","bucketAccessControls","Resource$Bucketaccesscontrols","buckets","Resource$Buckets","channels","Resource$Channels","defaultObjectAccessControls","Resource$Defaultobjectaccesscontrols","notifications","Resource$Notifications","objectAccessControls","Resource$Objectaccesscontrols","objects","Resource$Objects","projects","Resource$Projects","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","mediaUrl","hmacKeys","Resource$Projects$Hmackeys","serviceAccount","Resource$Projects$Serviceaccount"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storage_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar storage_v1;\n(function (storage_v1) {\n    /**\n     * Cloud Storage JSON API\n     *\n     * Stores and retrieves potentially large, immutable data objects.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const storage = google.storage('v1');\n     * ```\n     */\n    class Storage {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.bucketAccessControls = new Resource$Bucketaccesscontrols(this.context);\n            this.buckets = new Resource$Buckets(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.defaultObjectAccessControls = new Resource$Defaultobjectaccesscontrols(this.context);\n            this.notifications = new Resource$Notifications(this.context);\n            this.objectAccessControls = new Resource$Objectaccesscontrols(this.context);\n            this.objects = new Resource$Objects(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    storage_v1.Storage = Storage;\n    class Resource$Bucketaccesscontrols {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Bucketaccesscontrols = Resource$Bucketaccesscontrols;\n    class Resource$Buckets {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        lockRetentionPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/lockRetentionPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'ifMetagenerationMatch'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'permissions'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Buckets = Resource$Buckets;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Channels = Resource$Channels;\n    class Resource$Defaultobjectaccesscontrols {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Defaultobjectaccesscontrols = Resource$Defaultobjectaccesscontrols;\n    class Resource$Notifications {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'notification'],\n                pathParams: ['bucket', 'notification'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'notification'],\n                pathParams: ['bucket', 'notification'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Notifications = Resource$Notifications;\n    class Resource$Objectaccesscontrols {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Objectaccesscontrols = Resource$Objectaccesscontrols;\n    class Resource$Objects {\n        constructor(context) {\n            this.context = context;\n        }\n        compose(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{destinationBucket}/o/{destinationObject}/compose').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['destinationBucket', 'destinationObject'],\n                pathParams: ['destinationBucket', 'destinationObject'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        copy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'sourceBucket',\n                    'sourceObject',\n                    'destinationBucket',\n                    'destinationObject',\n                ],\n                pathParams: [\n                    'destinationBucket',\n                    'destinationObject',\n                    'sourceBucket',\n                    'sourceObject',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        rewrite(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'sourceBucket',\n                    'sourceObject',\n                    'destinationBucket',\n                    'destinationObject',\n                ],\n                pathParams: [\n                    'destinationBucket',\n                    'destinationObject',\n                    'sourceBucket',\n                    'sourceObject',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'permissions'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watchAll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Objects = Resource$Objects;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.hmacKeys = new Resource$Projects$Hmackeys(this.context);\n            this.serviceAccount = new Resource$Projects$Serviceaccount(this.context);\n        }\n    }\n    storage_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Hmackeys {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'serviceAccountEmail'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'accessId'],\n                pathParams: ['accessId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'accessId'],\n                pathParams: ['accessId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'accessId'],\n                pathParams: ['accessId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Projects$Hmackeys = Resource$Projects$Hmackeys;\n    class Resource$Projects$Serviceaccount {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Projects$Serviceaccount = Resource$Projects$Serviceaccount;\n})(storage_v1 = exports.storage_v1 || (exports.storage_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}