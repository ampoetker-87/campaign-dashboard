{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar drive_v3;\n\n(function (drive_v3) {\n  /**\n   * Drive API\n   *\n   * Manages files in Drive including uploading, downloading, searching,\n   * detecting changes, and updating sharing permissions.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const drive = google.drive('v3');\n   *\n   * @namespace drive\n   * @type {Function}\n   * @version v3\n   * @variation v3\n   * @param {object=} options Options for Drive\n   */\n  var Drive = function Drive(options, google) {\n    _classCallCheck(this, Drive);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.about = new Resource$About(this.context);\n    this.changes = new Resource$Changes(this.context);\n    this.channels = new Resource$Channels(this.context);\n    this.comments = new Resource$Comments(this.context);\n    this.files = new Resource$Files(this.context);\n    this.permissions = new Resource$Permissions(this.context);\n    this.replies = new Resource$Replies(this.context);\n    this.revisions = new Resource$Revisions(this.context);\n    this.teamdrives = new Resource$Teamdrives(this.context);\n  };\n\n  drive_v3.Drive = Drive;\n\n  var Resource$About = /*#__PURE__*/function () {\n    function Resource$About(context) {\n      _classCallCheck(this, Resource$About);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$About, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/about').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$About;\n  }();\n\n  drive_v3.Resource$About = Resource$About;\n\n  var Resource$Changes = /*#__PURE__*/function () {\n    function Resource$Changes(context) {\n      _classCallCheck(this, Resource$Changes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Changes, [{\n      key: \"getStartPageToken\",\n      value: function getStartPageToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/changes/startPageToken').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['pageToken'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/changes/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['pageToken'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Changes;\n  }();\n\n  drive_v3.Resource$Changes = Resource$Changes;\n\n  var Resource$Channels = /*#__PURE__*/function () {\n    function Resource$Channels(context) {\n      _classCallCheck(this, Resource$Channels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Channels, [{\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Channels;\n  }();\n\n  drive_v3.Resource$Channels = Resource$Channels;\n\n  var Resource$Comments = /*#__PURE__*/function () {\n    function Resource$Comments(context) {\n      _classCallCheck(this, Resource$Comments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Comments, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Comments;\n  }();\n\n  drive_v3.Resource$Comments = Resource$Comments;\n\n  var Resource$Files = /*#__PURE__*/function () {\n    function Resource$Files(context) {\n      _classCallCheck(this, Resource$Files);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Files, [{\n      key: \"copy\",\n      value: function copy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/copy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"emptyTrash\",\n      value: function emptyTrash(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/trash').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"export\",\n      value: function _export(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'mimeType'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateIds\",\n      value: function generateIds(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/generateIds').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Files;\n  }();\n\n  drive_v3.Resource$Files = Resource$Files;\n\n  var Resource$Permissions = /*#__PURE__*/function () {\n    function Resource$Permissions(context) {\n      _classCallCheck(this, Resource$Permissions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Permissions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Permissions;\n  }();\n\n  drive_v3.Resource$Permissions = Resource$Permissions;\n\n  var Resource$Replies = /*#__PURE__*/function () {\n    function Resource$Replies(context) {\n      _classCallCheck(this, Resource$Replies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Replies, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Replies;\n  }();\n\n  drive_v3.Resource$Replies = Resource$Replies;\n\n  var Resource$Revisions = /*#__PURE__*/function () {\n    function Resource$Revisions(context) {\n      _classCallCheck(this, Resource$Revisions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Revisions, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/revisions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Revisions;\n  }();\n\n  drive_v3.Resource$Revisions = Resource$Revisions;\n\n  var Resource$Teamdrives = /*#__PURE__*/function () {\n    function Resource$Teamdrives(context) {\n      _classCallCheck(this, Resource$Teamdrives);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Teamdrives, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['requestId'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['teamDriveId'],\n          pathParams: ['teamDriveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['teamDriveId'],\n          pathParams: ['teamDriveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['teamDriveId'],\n          pathParams: ['teamDriveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Teamdrives;\n  }();\n\n  drive_v3.Resource$Teamdrives = Resource$Teamdrives;\n})(drive_v3 = exports.drive_v3 || (exports.drive_v3 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/drive/v3.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","drive_v3","Drive","options","google","context","_options","about","Resource$About","changes","Resource$Changes","channels","Resource$Channels","comments","Resource$Comments","files","Resource$Files","permissions","Resource$Permissions","replies","Resource$Replies","revisions","Resource$Revisions","teamdrives","Resource$Teamdrives","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","mediaUrl"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar drive_v3;\n(function (drive_v3) {\n    /**\n     * Drive API\n     *\n     * Manages files in Drive including uploading, downloading, searching,\n     * detecting changes, and updating sharing permissions.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const drive = google.drive('v3');\n     *\n     * @namespace drive\n     * @type {Function}\n     * @version v3\n     * @variation v3\n     * @param {object=} options Options for Drive\n     */\n    class Drive {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.about = new Resource$About(this.context);\n            this.changes = new Resource$Changes(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.comments = new Resource$Comments(this.context);\n            this.files = new Resource$Files(this.context);\n            this.permissions = new Resource$Permissions(this.context);\n            this.replies = new Resource$Replies(this.context);\n            this.revisions = new Resource$Revisions(this.context);\n            this.teamdrives = new Resource$Teamdrives(this.context);\n        }\n    }\n    drive_v3.Drive = Drive;\n    class Resource$About {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/about').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$About = Resource$About;\n    class Resource$Changes {\n        constructor(context) {\n            this.context = context;\n        }\n        getStartPageToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/changes/startPageToken')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['pageToken'],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/changes/watch')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['pageToken'],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Changes = Resource$Changes;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/channels/stop')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Channels = Resource$Channels;\n    class Resource$Comments {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Comments = Resource$Comments;\n    class Resource$Files {\n        constructor(context) {\n            this.context = context;\n        }\n        copy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/copy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        emptyTrash(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/trash')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/export')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'mimeType'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateIds(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/generateIds')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/drive/v3/files/{fileId}')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/watch')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Files = Resource$Files;\n    class Resource$Permissions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/permissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/permissions/{permissionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/permissions/{permissionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/permissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/permissions/{permissionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Permissions = Resource$Permissions;\n    class Resource$Replies {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/comments/{commentId}/replies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/comments/{commentId}/replies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Replies = Resource$Replies;\n    class Resource$Revisions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/revisions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Revisions = Resource$Revisions;\n    class Resource$Teamdrives {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['requestId'],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Teamdrives = Resource$Teamdrives;\n})(drive_v3 = exports.drive_v3 || (exports.drive_v3 = {}));\n//# sourceMappingURL=v3.js.map"]},"metadata":{},"sourceType":"script"}