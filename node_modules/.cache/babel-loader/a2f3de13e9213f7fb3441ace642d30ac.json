{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compute_beta = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar compute_beta;\n\n(function (compute_beta) {\n  /**\n   * Compute Engine API\n   *\n   * Creates and runs virtual machines on Google Cloud Platform.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const compute = google.compute('beta');\n   * ```\n   */\n  var Compute = function Compute(options, google) {\n    _classCallCheck(this, Compute);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n    this.addresses = new Resource$Addresses(this.context);\n    this.autoscalers = new Resource$Autoscalers(this.context);\n    this.backendBuckets = new Resource$Backendbuckets(this.context);\n    this.backendServices = new Resource$Backendservices(this.context);\n    this.disks = new Resource$Disks(this.context);\n    this.diskTypes = new Resource$Disktypes(this.context);\n    this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n    this.firewalls = new Resource$Firewalls(this.context);\n    this.forwardingRules = new Resource$Forwardingrules(this.context);\n    this.globalAddresses = new Resource$Globaladdresses(this.context);\n    this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n    this.globalNetworkEndpointGroups = new Resource$Globalnetworkendpointgroups(this.context);\n    this.globalOperations = new Resource$Globaloperations(this.context);\n    this.globalOrganizationOperations = new Resource$Globalorganizationoperations(this.context);\n    this.healthChecks = new Resource$Healthchecks(this.context);\n    this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n    this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n    this.images = new Resource$Images(this.context);\n    this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n    this.instanceGroups = new Resource$Instancegroups(this.context);\n    this.instances = new Resource$Instances(this.context);\n    this.instanceTemplates = new Resource$Instancetemplates(this.context);\n    this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n    this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n    this.interconnects = new Resource$Interconnects(this.context);\n    this.licenseCodes = new Resource$Licensecodes(this.context);\n    this.licenses = new Resource$Licenses(this.context);\n    this.machineImages = new Resource$Machineimages(this.context);\n    this.machineTypes = new Resource$Machinetypes(this.context);\n    this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n    this.networks = new Resource$Networks(this.context);\n    this.nodeGroups = new Resource$Nodegroups(this.context);\n    this.nodeTemplates = new Resource$Nodetemplates(this.context);\n    this.nodeTypes = new Resource$Nodetypes(this.context);\n    this.organizationSecurityPolicies = new Resource$Organizationsecuritypolicies(this.context);\n    this.packetMirrorings = new Resource$Packetmirrorings(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n    this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n    this.regionCommitments = new Resource$Regioncommitments(this.context);\n    this.regionDisks = new Resource$Regiondisks(this.context);\n    this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n    this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n    this.regionHealthCheckServices = new Resource$Regionhealthcheckservices(this.context);\n    this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n    this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n    this.regionNetworkEndpointGroups = new Resource$Regionnetworkendpointgroups(this.context);\n    this.regionNotificationEndpoints = new Resource$Regionnotificationendpoints(this.context);\n    this.regionOperations = new Resource$Regionoperations(this.context);\n    this.regions = new Resource$Regions(this.context);\n    this.regionSslCertificates = new Resource$Regionsslcertificates(this.context);\n    this.regionTargetHttpProxies = new Resource$Regiontargethttpproxies(this.context);\n    this.regionTargetHttpsProxies = new Resource$Regiontargethttpsproxies(this.context);\n    this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n    this.reservations = new Resource$Reservations(this.context);\n    this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n    this.routers = new Resource$Routers(this.context);\n    this.routes = new Resource$Routes(this.context);\n    this.securityPolicies = new Resource$Securitypolicies(this.context);\n    this.snapshots = new Resource$Snapshots(this.context);\n    this.sslCertificates = new Resource$Sslcertificates(this.context);\n    this.sslPolicies = new Resource$Sslpolicies(this.context);\n    this.subnetworks = new Resource$Subnetworks(this.context);\n    this.targetGrpcProxies = new Resource$Targetgrpcproxies(this.context);\n    this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n    this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n    this.targetInstances = new Resource$Targetinstances(this.context);\n    this.targetPools = new Resource$Targetpools(this.context);\n    this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n    this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n    this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n    this.urlMaps = new Resource$Urlmaps(this.context);\n    this.vpnGateways = new Resource$Vpngateways(this.context);\n    this.vpnTunnels = new Resource$Vpntunnels(this.context);\n    this.zoneOperations = new Resource$Zoneoperations(this.context);\n    this.zones = new Resource$Zones(this.context);\n  };\n\n  compute_beta.Compute = Compute;\n\n  var Resource$Acceleratortypes = /*#__PURE__*/function () {\n    function Resource$Acceleratortypes(context) {\n      _classCallCheck(this, Resource$Acceleratortypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Acceleratortypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'acceleratorType'],\n          pathParams: ['acceleratorType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Acceleratortypes;\n  }();\n\n  compute_beta.Resource$Acceleratortypes = Resource$Acceleratortypes;\n\n  var Resource$Addresses = /*#__PURE__*/function () {\n    function Resource$Addresses(context) {\n      _classCallCheck(this, Resource$Addresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Addresses, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Addresses;\n  }();\n\n  compute_beta.Resource$Addresses = Resource$Addresses;\n\n  var Resource$Autoscalers = /*#__PURE__*/function () {\n    function Resource$Autoscalers(context) {\n      _classCallCheck(this, Resource$Autoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Autoscalers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Autoscalers;\n  }();\n\n  compute_beta.Resource$Autoscalers = Resource$Autoscalers;\n\n  var Resource$Backendbuckets = /*#__PURE__*/function () {\n    function Resource$Backendbuckets(context) {\n      _classCallCheck(this, Resource$Backendbuckets);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendbuckets, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket', 'keyName'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendbuckets;\n  }();\n\n  compute_beta.Resource$Backendbuckets = Resource$Backendbuckets;\n\n  var Resource$Backendservices = /*#__PURE__*/function () {\n    function Resource$Backendservices(context) {\n      _classCallCheck(this, Resource$Backendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendservices, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService', 'keyName'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSecurityPolicy\",\n      value: function setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendservices;\n  }();\n\n  compute_beta.Resource$Backendservices = Resource$Backendservices;\n\n  var Resource$Disks = /*#__PURE__*/function () {\n    function Resource$Disks(context) {\n      _classCallCheck(this, Resource$Disks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disks, [{\n      key: \"addResourcePolicies\",\n      value: function addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeResourcePolicies\",\n      value: function removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disks;\n  }();\n\n  compute_beta.Resource$Disks = Resource$Disks;\n\n  var Resource$Disktypes = /*#__PURE__*/function () {\n    function Resource$Disktypes(context) {\n      _classCallCheck(this, Resource$Disktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disktypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'diskType'],\n          pathParams: ['diskType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disktypes;\n  }();\n\n  compute_beta.Resource$Disktypes = Resource$Disktypes;\n\n  var Resource$Externalvpngateways = /*#__PURE__*/function () {\n    function Resource$Externalvpngateways(context) {\n      _classCallCheck(this, Resource$Externalvpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Externalvpngateways, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'externalVpnGateway'],\n          pathParams: ['externalVpnGateway', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'externalVpnGateway'],\n          pathParams: ['externalVpnGateway', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Externalvpngateways;\n  }();\n\n  compute_beta.Resource$Externalvpngateways = Resource$Externalvpngateways;\n\n  var Resource$Firewalls = /*#__PURE__*/function () {\n    function Resource$Firewalls(context) {\n      _classCallCheck(this, Resource$Firewalls);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Firewalls, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Firewalls;\n  }();\n\n  compute_beta.Resource$Firewalls = Resource$Firewalls;\n\n  var Resource$Forwardingrules = /*#__PURE__*/function () {\n    function Resource$Forwardingrules(context) {\n      _classCallCheck(this, Resource$Forwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Forwardingrules, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Forwardingrules;\n  }();\n\n  compute_beta.Resource$Forwardingrules = Resource$Forwardingrules;\n\n  var Resource$Globaladdresses = /*#__PURE__*/function () {\n    function Resource$Globaladdresses(context) {\n      _classCallCheck(this, Resource$Globaladdresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaladdresses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaladdresses;\n  }();\n\n  compute_beta.Resource$Globaladdresses = Resource$Globaladdresses;\n\n  var Resource$Globalforwardingrules = /*#__PURE__*/function () {\n    function Resource$Globalforwardingrules(context) {\n      _classCallCheck(this, Resource$Globalforwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globalforwardingrules, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globalforwardingrules;\n  }();\n\n  compute_beta.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n\n  var Resource$Globalnetworkendpointgroups = /*#__PURE__*/function () {\n    function Resource$Globalnetworkendpointgroups(context) {\n      _classCallCheck(this, Resource$Globalnetworkendpointgroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globalnetworkendpointgroups, [{\n      key: \"attachNetworkEndpoints\",\n      value: function attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachNetworkEndpoints\",\n      value: function detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNetworkEndpoints\",\n      value: function listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globalnetworkendpointgroups;\n  }();\n\n  compute_beta.Resource$Globalnetworkendpointgroups = Resource$Globalnetworkendpointgroups;\n\n  var Resource$Globaloperations = /*#__PURE__*/function () {\n    function Resource$Globaloperations(context) {\n      _classCallCheck(this, Resource$Globaloperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaloperations, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"wait\",\n      value: function wait(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaloperations;\n  }();\n\n  compute_beta.Resource$Globaloperations = Resource$Globaloperations;\n\n  var Resource$Globalorganizationoperations = /*#__PURE__*/function () {\n    function Resource$Globalorganizationoperations(context) {\n      _classCallCheck(this, Resource$Globalorganizationoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globalorganizationoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['operation'],\n          pathParams: ['operation'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['operation'],\n          pathParams: ['operation'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globalorganizationoperations;\n  }();\n\n  compute_beta.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n\n  var Resource$Healthchecks = /*#__PURE__*/function () {\n    function Resource$Healthchecks(context) {\n      _classCallCheck(this, Resource$Healthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Healthchecks, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Healthchecks;\n  }();\n\n  compute_beta.Resource$Healthchecks = Resource$Healthchecks;\n\n  var Resource$Httphealthchecks = /*#__PURE__*/function () {\n    function Resource$Httphealthchecks(context) {\n      _classCallCheck(this, Resource$Httphealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httphealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httphealthchecks;\n  }();\n\n  compute_beta.Resource$Httphealthchecks = Resource$Httphealthchecks;\n\n  var Resource$Httpshealthchecks = /*#__PURE__*/function () {\n    function Resource$Httpshealthchecks(context) {\n      _classCallCheck(this, Resource$Httpshealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httpshealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httpshealthchecks;\n  }();\n\n  compute_beta.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n\n  var Resource$Images = /*#__PURE__*/function () {\n    function Resource$Images(context) {\n      _classCallCheck(this, Resource$Images);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Images, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deprecate\",\n      value: function deprecate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getFromFamily\",\n      value: function getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'family'],\n          pathParams: ['family', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Images;\n  }();\n\n  compute_beta.Resource$Images = Resource$Images;\n\n  var Resource$Instancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Instancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Instancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"applyUpdatesToInstances\",\n      value: function applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createInstances\",\n      value: function createInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deletePerInstanceConfigs\",\n      value: function deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listErrors\",\n      value: function listErrors(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPerInstanceConfigs\",\n      value: function listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchPerInstanceConfigs\",\n      value: function patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resizeAdvanced\",\n      value: function resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAutoHealingPolicies\",\n      value: function setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updatePerInstanceConfigs\",\n      value: function updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroupmanagers;\n  }();\n\n  compute_beta.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n\n  var Resource$Instancegroups = /*#__PURE__*/function () {\n    function Resource$Instancegroups(context) {\n      _classCallCheck(this, Resource$Instancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroups, [{\n      key: \"addInstances\",\n      value: function addInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstances\",\n      value: function removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroups;\n  }();\n\n  compute_beta.Resource$Instancegroups = Resource$Instancegroups;\n\n  var Resource$Instances = /*#__PURE__*/function () {\n    function Resource$Instances(context) {\n      _classCallCheck(this, Resource$Instances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instances, [{\n      key: \"addAccessConfig\",\n      value: function addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"addResourcePolicies\",\n      value: function addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachDisk\",\n      value: function attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteAccessConfig\",\n      value: function deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachDisk\",\n      value: function detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getEffectiveFirewalls\",\n      value: function getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getGuestAttributes\",\n      value: function getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getScreenshot\",\n      value: function getScreenshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/screenshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getSerialPortOutput\",\n      value: function getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getShieldedInstanceIdentity\",\n      value: function getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getShieldedVmIdentity\",\n      value: function getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listReferrers\",\n      value: function listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeResourcePolicies\",\n      value: function removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reset\",\n      value: function reset(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resume\",\n      value: function resume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDeletionProtection\",\n      value: function setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDiskAutoDelete\",\n      value: function setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineResources\",\n      value: function setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineType\",\n      value: function setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMetadata\",\n      value: function setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMinCpuPlatform\",\n      value: function setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setName\",\n      value: function setName(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setName').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setScheduling\",\n      value: function setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setServiceAccount\",\n      value: function setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setShieldedInstanceIntegrityPolicy\",\n      value: function setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setShieldedVmIntegrityPolicy\",\n      value: function setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTags\",\n      value: function setTags(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"simulateMaintenanceEvent\",\n      value: function simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"start\",\n      value: function start(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"startWithEncryptionKey\",\n      value: function startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"suspend\",\n      value: function suspend(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateAccessConfig\",\n      value: function updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateDisplayDevice\",\n      value: function updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateNetworkInterface\",\n      value: function updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateShieldedInstanceConfig\",\n      value: function updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateShieldedVmConfig\",\n      value: function updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instances;\n  }();\n\n  compute_beta.Resource$Instances = Resource$Instances;\n\n  var Resource$Instancetemplates = /*#__PURE__*/function () {\n    function Resource$Instancetemplates(context) {\n      _classCallCheck(this, Resource$Instancetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancetemplates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancetemplates;\n  }();\n\n  compute_beta.Resource$Instancetemplates = Resource$Instancetemplates;\n\n  var Resource$Interconnectattachments = /*#__PURE__*/function () {\n    function Resource$Interconnectattachments(context) {\n      _classCallCheck(this, Resource$Interconnectattachments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectattachments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectattachments;\n  }();\n\n  compute_beta.Resource$Interconnectattachments = Resource$Interconnectattachments;\n\n  var Resource$Interconnectlocations = /*#__PURE__*/function () {\n    function Resource$Interconnectlocations(context) {\n      _classCallCheck(this, Resource$Interconnectlocations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectlocations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnectLocation'],\n          pathParams: ['interconnectLocation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectlocations;\n  }();\n\n  compute_beta.Resource$Interconnectlocations = Resource$Interconnectlocations;\n\n  var Resource$Interconnects = /*#__PURE__*/function () {\n    function Resource$Interconnects(context) {\n      _classCallCheck(this, Resource$Interconnects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnects, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getDiagnostics\",\n      value: function getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnects;\n  }();\n\n  compute_beta.Resource$Interconnects = Resource$Interconnects;\n\n  var Resource$Licensecodes = /*#__PURE__*/function () {\n    function Resource$Licensecodes(context) {\n      _classCallCheck(this, Resource$Licensecodes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licensecodes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'licenseCode'],\n          pathParams: ['licenseCode', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licensecodes;\n  }();\n\n  compute_beta.Resource$Licensecodes = Resource$Licensecodes;\n\n  var Resource$Licenses = /*#__PURE__*/function () {\n    function Resource$Licenses(context) {\n      _classCallCheck(this, Resource$Licenses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licenses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licenses;\n  }();\n\n  compute_beta.Resource$Licenses = Resource$Licenses;\n\n  var Resource$Machineimages = /*#__PURE__*/function () {\n    function Resource$Machineimages(context) {\n      _classCallCheck(this, Resource$Machineimages);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Machineimages, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'machineImage'],\n          pathParams: ['machineImage', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'machineImage'],\n          pathParams: ['machineImage', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Machineimages;\n  }();\n\n  compute_beta.Resource$Machineimages = Resource$Machineimages;\n\n  var Resource$Machinetypes = /*#__PURE__*/function () {\n    function Resource$Machinetypes(context) {\n      _classCallCheck(this, Resource$Machinetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Machinetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'machineType'],\n          pathParams: ['machineType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Machinetypes;\n  }();\n\n  compute_beta.Resource$Machinetypes = Resource$Machinetypes;\n\n  var Resource$Networkendpointgroups = /*#__PURE__*/function () {\n    function Resource$Networkendpointgroups(context) {\n      _classCallCheck(this, Resource$Networkendpointgroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networkendpointgroups, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachNetworkEndpoints\",\n      value: function attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachNetworkEndpoints\",\n      value: function detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNetworkEndpoints\",\n      value: function listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networkendpointgroups;\n  }();\n\n  compute_beta.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n\n  var Resource$Networks = /*#__PURE__*/function () {\n    function Resource$Networks(context) {\n      _classCallCheck(this, Resource$Networks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networks, [{\n      key: \"addPeering\",\n      value: function addPeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getEffectiveFirewalls\",\n      value: function getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPeeringRoutes\",\n      value: function listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removePeering\",\n      value: function removePeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"switchToCustomMode\",\n      value: function switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updatePeering\",\n      value: function updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networks;\n  }();\n\n  compute_beta.Resource$Networks = Resource$Networks;\n\n  var Resource$Nodegroups = /*#__PURE__*/function () {\n    function Resource$Nodegroups(context) {\n      _classCallCheck(this, Resource$Nodegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodegroups, [{\n      key: \"addNodes\",\n      value: function addNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteNodes\",\n      value: function deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'initialNodeCount'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNodes\",\n      value: function listNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNodeTemplate\",\n      value: function setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodegroups;\n  }();\n\n  compute_beta.Resource$Nodegroups = Resource$Nodegroups;\n\n  var Resource$Nodetemplates = /*#__PURE__*/function () {\n    function Resource$Nodetemplates(context) {\n      _classCallCheck(this, Resource$Nodetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetemplates, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetemplates;\n  }();\n\n  compute_beta.Resource$Nodetemplates = Resource$Nodetemplates;\n\n  var Resource$Nodetypes = /*#__PURE__*/function () {\n    function Resource$Nodetypes(context) {\n      _classCallCheck(this, Resource$Nodetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeType'],\n          pathParams: ['nodeType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetypes;\n  }();\n\n  compute_beta.Resource$Nodetypes = Resource$Nodetypes;\n\n  var Resource$Organizationsecuritypolicies = /*#__PURE__*/function () {\n    function Resource$Organizationsecuritypolicies(context) {\n      _classCallCheck(this, Resource$Organizationsecuritypolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Organizationsecuritypolicies, [{\n      key: \"addAssociation\",\n      value: function addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"addRule\",\n      value: function addRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"copyRules\",\n      value: function copyRules(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/copyRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getAssociation\",\n      value: function getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRule\",\n      value: function getRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listAssociations\",\n      value: function listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"move\",\n      value: function move(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchRule\",\n      value: function patchRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeAssociation\",\n      value: function removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeRule\",\n      value: function removeRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['securityPolicy'],\n          pathParams: ['securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Organizationsecuritypolicies;\n  }();\n\n  compute_beta.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n\n  var Resource$Packetmirrorings = /*#__PURE__*/function () {\n    function Resource$Packetmirrorings(context) {\n      _classCallCheck(this, Resource$Packetmirrorings);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Packetmirrorings, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'packetMirroring'],\n          pathParams: ['packetMirroring', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'packetMirroring'],\n          pathParams: ['packetMirroring', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'packetMirroring'],\n          pathParams: ['packetMirroring', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Packetmirrorings;\n  }();\n\n  compute_beta.Resource$Packetmirrorings = Resource$Packetmirrorings;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"disableXpnHost\",\n      value: function disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"disableXpnResource\",\n      value: function disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnHost\",\n      value: function enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnResource\",\n      value: function enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnHost\",\n      value: function getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnResources\",\n      value: function getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listXpnHosts\",\n      value: function listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveDisk\",\n      value: function moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveInstance\",\n      value: function moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setCommonInstanceMetadata\",\n      value: function setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDefaultNetworkTier\",\n      value: function setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUsageExportBucket\",\n      value: function setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  compute_beta.Resource$Projects = Resource$Projects;\n\n  var Resource$Regionautoscalers = /*#__PURE__*/function () {\n    function Resource$Regionautoscalers(context) {\n      _classCallCheck(this, Resource$Regionautoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionautoscalers, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionautoscalers;\n  }();\n\n  compute_beta.Resource$Regionautoscalers = Resource$Regionautoscalers;\n\n  var Resource$Regionbackendservices = /*#__PURE__*/function () {\n    function Resource$Regionbackendservices(context) {\n      _classCallCheck(this, Resource$Regionbackendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionbackendservices, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionbackendservices;\n  }();\n\n  compute_beta.Resource$Regionbackendservices = Resource$Regionbackendservices;\n\n  var Resource$Regioncommitments = /*#__PURE__*/function () {\n    function Resource$Regioncommitments(context) {\n      _classCallCheck(this, Resource$Regioncommitments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioncommitments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'commitment'],\n          pathParams: ['commitment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateReservations\",\n      value: function updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'commitment'],\n          pathParams: ['commitment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioncommitments;\n  }();\n\n  compute_beta.Resource$Regioncommitments = Resource$Regioncommitments;\n\n  var Resource$Regiondisks = /*#__PURE__*/function () {\n    function Resource$Regiondisks(context) {\n      _classCallCheck(this, Resource$Regiondisks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisks, [{\n      key: \"addResourcePolicies\",\n      value: function addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeResourcePolicies\",\n      value: function removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisks;\n  }();\n\n  compute_beta.Resource$Regiondisks = Resource$Regiondisks;\n\n  var Resource$Regiondisktypes = /*#__PURE__*/function () {\n    function Resource$Regiondisktypes(context) {\n      _classCallCheck(this, Resource$Regiondisktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisktypes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'diskType'],\n          pathParams: ['diskType', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisktypes;\n  }();\n\n  compute_beta.Resource$Regiondisktypes = Resource$Regiondisktypes;\n\n  var Resource$Regionhealthchecks = /*#__PURE__*/function () {\n    function Resource$Regionhealthchecks(context) {\n      _classCallCheck(this, Resource$Regionhealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionhealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheck'],\n          pathParams: ['healthCheck', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheck'],\n          pathParams: ['healthCheck', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheck'],\n          pathParams: ['healthCheck', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheck'],\n          pathParams: ['healthCheck', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionhealthchecks;\n  }();\n\n  compute_beta.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n\n  var Resource$Regionhealthcheckservices = /*#__PURE__*/function () {\n    function Resource$Regionhealthcheckservices(context) {\n      _classCallCheck(this, Resource$Regionhealthcheckservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionhealthcheckservices, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheckService'],\n          pathParams: ['healthCheckService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheckService'],\n          pathParams: ['healthCheckService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'healthCheckService'],\n          pathParams: ['healthCheckService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionhealthcheckservices;\n  }();\n\n  compute_beta.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n\n  var Resource$Regioninstancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Regioninstancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"applyUpdatesToInstances\",\n      value: function applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createInstances\",\n      value: function createInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deletePerInstanceConfigs\",\n      value: function deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listErrors\",\n      value: function listErrors(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPerInstanceConfigs\",\n      value: function listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchPerInstanceConfigs\",\n      value: function patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAutoHealingPolicies\",\n      value: function setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updatePerInstanceConfigs\",\n      value: function updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroupmanagers;\n  }();\n\n  compute_beta.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n\n  var Resource$Regioninstancegroups = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroups(context) {\n      _classCallCheck(this, Resource$Regioninstancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroups, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroups;\n  }();\n\n  compute_beta.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n\n  var Resource$Regionnetworkendpointgroups = /*#__PURE__*/function () {\n    function Resource$Regionnetworkendpointgroups(context) {\n      _classCallCheck(this, Resource$Regionnetworkendpointgroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionnetworkendpointgroups, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionnetworkendpointgroups;\n  }();\n\n  compute_beta.Resource$Regionnetworkendpointgroups = Resource$Regionnetworkendpointgroups;\n\n  var Resource$Regionnotificationendpoints = /*#__PURE__*/function () {\n    function Resource$Regionnotificationendpoints(context) {\n      _classCallCheck(this, Resource$Regionnotificationendpoints);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionnotificationendpoints, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'notificationEndpoint'],\n          pathParams: ['notificationEndpoint', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'notificationEndpoint'],\n          pathParams: ['notificationEndpoint', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionnotificationendpoints;\n  }();\n\n  compute_beta.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n\n  var Resource$Regionoperations = /*#__PURE__*/function () {\n    function Resource$Regionoperations(context) {\n      _classCallCheck(this, Resource$Regionoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"wait\",\n      value: function wait(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionoperations;\n  }();\n\n  compute_beta.Resource$Regionoperations = Resource$Regionoperations;\n\n  var Resource$Regions = /*#__PURE__*/function () {\n    function Resource$Regions(context) {\n      _classCallCheck(this, Resource$Regions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regions, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regions;\n  }();\n\n  compute_beta.Resource$Regions = Resource$Regions;\n\n  var Resource$Regionsslcertificates = /*#__PURE__*/function () {\n    function Resource$Regionsslcertificates(context) {\n      _classCallCheck(this, Resource$Regionsslcertificates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionsslcertificates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'sslCertificate'],\n          pathParams: ['project', 'region', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'sslCertificate'],\n          pathParams: ['project', 'region', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionsslcertificates;\n  }();\n\n  compute_beta.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n\n  var Resource$Regiontargethttpproxies = /*#__PURE__*/function () {\n    function Resource$Regiontargethttpproxies(context) {\n      _classCallCheck(this, Resource$Regiontargethttpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiontargethttpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpProxy'],\n          pathParams: ['project', 'region', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpProxy'],\n          pathParams: ['project', 'region', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpProxy'],\n          pathParams: ['project', 'region', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiontargethttpproxies;\n  }();\n\n  compute_beta.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n\n  var Resource$Regiontargethttpsproxies = /*#__PURE__*/function () {\n    function Resource$Regiontargethttpsproxies(context) {\n      _classCallCheck(this, Resource$Regiontargethttpsproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiontargethttpsproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpsProxy'],\n          pathParams: ['project', 'region', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpsProxy'],\n          pathParams: ['project', 'region', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpsProxy'],\n          pathParams: ['project', 'region', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetHttpsProxy'],\n          pathParams: ['project', 'region', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiontargethttpsproxies;\n  }();\n\n  compute_beta.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n\n  var Resource$Regionurlmaps = /*#__PURE__*/function () {\n    function Resource$Regionurlmaps(context) {\n      _classCallCheck(this, Resource$Regionurlmaps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionurlmaps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"invalidateCache\",\n      value: function invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'urlMap'],\n          pathParams: ['project', 'region', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionurlmaps;\n  }();\n\n  compute_beta.Resource$Regionurlmaps = Resource$Regionurlmaps;\n\n  var Resource$Reservations = /*#__PURE__*/function () {\n    function Resource$Reservations(context) {\n      _classCallCheck(this, Resource$Reservations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Reservations, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'reservation'],\n          pathParams: ['project', 'reservation', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'reservation'],\n          pathParams: ['project', 'reservation', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'reservation'],\n          pathParams: ['project', 'reservation', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Reservations;\n  }();\n\n  compute_beta.Resource$Reservations = Resource$Reservations;\n\n  var Resource$Resourcepolicies = /*#__PURE__*/function () {\n    function Resource$Resourcepolicies(context) {\n      _classCallCheck(this, Resource$Resourcepolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resourcepolicies, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resourcePolicy'],\n          pathParams: ['project', 'region', 'resourcePolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resourcePolicy'],\n          pathParams: ['project', 'region', 'resourcePolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resourcepolicies;\n  }();\n\n  compute_beta.Resource$Resourcepolicies = Resource$Resourcepolicies;\n\n  var Resource$Routers = /*#__PURE__*/function () {\n    function Resource$Routers(context) {\n      _classCallCheck(this, Resource$Routers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getNatMappingInfo\",\n      value: function getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRouterStatus\",\n      value: function getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"preview\",\n      value: function preview(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routers;\n  }();\n\n  compute_beta.Resource$Routers = Resource$Routers;\n\n  var Resource$Routes = /*#__PURE__*/function () {\n    function Resource$Routes(context) {\n      _classCallCheck(this, Resource$Routes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routes, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routes;\n  }();\n\n  compute_beta.Resource$Routes = Resource$Routes;\n\n  var Resource$Securitypolicies = /*#__PURE__*/function () {\n    function Resource$Securitypolicies(context) {\n      _classCallCheck(this, Resource$Securitypolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Securitypolicies, [{\n      key: \"addRule\",\n      value: function addRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRule\",\n      value: function getRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPreconfiguredExpressionSets\",\n      value: function listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchRule\",\n      value: function patchRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeRule\",\n      value: function removeRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Securitypolicies;\n  }();\n\n  compute_beta.Resource$Securitypolicies = Resource$Securitypolicies;\n\n  var Resource$Snapshots = /*#__PURE__*/function () {\n    function Resource$Snapshots(context) {\n      _classCallCheck(this, Resource$Snapshots);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Snapshots, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Snapshots;\n  }();\n\n  compute_beta.Resource$Snapshots = Resource$Snapshots;\n\n  var Resource$Sslcertificates = /*#__PURE__*/function () {\n    function Resource$Sslcertificates(context) {\n      _classCallCheck(this, Resource$Sslcertificates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslcertificates, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslcertificates;\n  }();\n\n  compute_beta.Resource$Sslcertificates = Resource$Sslcertificates;\n\n  var Resource$Sslpolicies = /*#__PURE__*/function () {\n    function Resource$Sslpolicies(context) {\n      _classCallCheck(this, Resource$Sslpolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslpolicies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listAvailableFeatures\",\n      value: function listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslpolicies;\n  }();\n\n  compute_beta.Resource$Sslpolicies = Resource$Sslpolicies;\n\n  var Resource$Subnetworks = /*#__PURE__*/function () {\n    function Resource$Subnetworks(context) {\n      _classCallCheck(this, Resource$Subnetworks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Subnetworks, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"expandIpCidrRange\",\n      value: function expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listUsable\",\n      value: function listUsable(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setPrivateIpGoogleAccess\",\n      value: function setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Subnetworks;\n  }();\n\n  compute_beta.Resource$Subnetworks = Resource$Subnetworks;\n\n  var Resource$Targetgrpcproxies = /*#__PURE__*/function () {\n    function Resource$Targetgrpcproxies(context) {\n      _classCallCheck(this, Resource$Targetgrpcproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetgrpcproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetGrpcProxy'],\n          pathParams: ['project', 'targetGrpcProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetGrpcProxy'],\n          pathParams: ['project', 'targetGrpcProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetGrpcProxy'],\n          pathParams: ['project', 'targetGrpcProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetgrpcproxies;\n  }();\n\n  compute_beta.Resource$Targetgrpcproxies = Resource$Targetgrpcproxies;\n\n  var Resource$Targethttpproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpproxies(context) {\n      _classCallCheck(this, Resource$Targethttpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpproxies, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpproxies;\n  }();\n\n  compute_beta.Resource$Targethttpproxies = Resource$Targethttpproxies;\n\n  var Resource$Targethttpsproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpsproxies(context) {\n      _classCallCheck(this, Resource$Targethttpsproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpsproxies, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setQuicOverride\",\n      value: function setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpsproxies;\n  }();\n\n  compute_beta.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n\n  var Resource$Targetinstances = /*#__PURE__*/function () {\n    function Resource$Targetinstances(context) {\n      _classCallCheck(this, Resource$Targetinstances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetinstances, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetinstances;\n  }();\n\n  compute_beta.Resource$Targetinstances = Resource$Targetinstances;\n\n  var Resource$Targetpools = /*#__PURE__*/function () {\n    function Resource$Targetpools(context) {\n      _classCallCheck(this, Resource$Targetpools);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetpools, [{\n      key: \"addHealthCheck\",\n      value: function addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"addInstance\",\n      value: function addInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeHealthCheck\",\n      value: function removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstance\",\n      value: function removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackup\",\n      value: function setBackup(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetpools;\n  }();\n\n  compute_beta.Resource$Targetpools = Resource$Targetpools;\n\n  var Resource$Targetsslproxies = /*#__PURE__*/function () {\n    function Resource$Targetsslproxies(context) {\n      _classCallCheck(this, Resource$Targetsslproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetsslproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetsslproxies;\n  }();\n\n  compute_beta.Resource$Targetsslproxies = Resource$Targetsslproxies;\n\n  var Resource$Targettcpproxies = /*#__PURE__*/function () {\n    function Resource$Targettcpproxies(context) {\n      _classCallCheck(this, Resource$Targettcpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targettcpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targettcpproxies;\n  }();\n\n  compute_beta.Resource$Targettcpproxies = Resource$Targettcpproxies;\n\n  var Resource$Targetvpngateways = /*#__PURE__*/function () {\n    function Resource$Targetvpngateways(context) {\n      _classCallCheck(this, Resource$Targetvpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetvpngateways, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetvpngateways;\n  }();\n\n  compute_beta.Resource$Targetvpngateways = Resource$Targetvpngateways;\n\n  var Resource$Urlmaps = /*#__PURE__*/function () {\n    function Resource$Urlmaps(context) {\n      _classCallCheck(this, Resource$Urlmaps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Urlmaps, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"invalidateCache\",\n      value: function invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Urlmaps;\n  }();\n\n  compute_beta.Resource$Urlmaps = Resource$Urlmaps;\n\n  var Resource$Vpngateways = /*#__PURE__*/function () {\n    function Resource$Vpngateways(context) {\n      _classCallCheck(this, Resource$Vpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Vpngateways, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnGateway'],\n          pathParams: ['project', 'region', 'vpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnGateway'],\n          pathParams: ['project', 'region', 'vpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getStatus\",\n      value: function getStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnGateway'],\n          pathParams: ['project', 'region', 'vpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Vpngateways;\n  }();\n\n  compute_beta.Resource$Vpngateways = Resource$Vpngateways;\n\n  var Resource$Vpntunnels = /*#__PURE__*/function () {\n    function Resource$Vpntunnels(context) {\n      _classCallCheck(this, Resource$Vpntunnels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Vpntunnels, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Vpntunnels;\n  }();\n\n  compute_beta.Resource$Vpntunnels = Resource$Vpntunnels;\n\n  var Resource$Zoneoperations = /*#__PURE__*/function () {\n    function Resource$Zoneoperations(context) {\n      _classCallCheck(this, Resource$Zoneoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zoneoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"wait\",\n      value: function wait(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zoneoperations;\n  }();\n\n  compute_beta.Resource$Zoneoperations = Resource$Zoneoperations;\n\n  var Resource$Zones = /*#__PURE__*/function () {\n    function Resource$Zones(context) {\n      _classCallCheck(this, Resource$Zones);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zones, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zones;\n  }();\n\n  compute_beta.Resource$Zones = Resource$Zones;\n})(compute_beta = exports.compute_beta || (exports.compute_beta = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/compute/beta.js"],"names":["Object","defineProperty","exports","value","compute_beta","googleapis_common_1","require","Compute","options","google","context","_options","acceleratorTypes","Resource$Acceleratortypes","addresses","Resource$Addresses","autoscalers","Resource$Autoscalers","backendBuckets","Resource$Backendbuckets","backendServices","Resource$Backendservices","disks","Resource$Disks","diskTypes","Resource$Disktypes","externalVpnGateways","Resource$Externalvpngateways","firewalls","Resource$Firewalls","forwardingRules","Resource$Forwardingrules","globalAddresses","Resource$Globaladdresses","globalForwardingRules","Resource$Globalforwardingrules","globalNetworkEndpointGroups","Resource$Globalnetworkendpointgroups","globalOperations","Resource$Globaloperations","globalOrganizationOperations","Resource$Globalorganizationoperations","healthChecks","Resource$Healthchecks","httpHealthChecks","Resource$Httphealthchecks","httpsHealthChecks","Resource$Httpshealthchecks","images","Resource$Images","instanceGroupManagers","Resource$Instancegroupmanagers","instanceGroups","Resource$Instancegroups","instances","Resource$Instances","instanceTemplates","Resource$Instancetemplates","interconnectAttachments","Resource$Interconnectattachments","interconnectLocations","Resource$Interconnectlocations","interconnects","Resource$Interconnects","licenseCodes","Resource$Licensecodes","licenses","Resource$Licenses","machineImages","Resource$Machineimages","machineTypes","Resource$Machinetypes","networkEndpointGroups","Resource$Networkendpointgroups","networks","Resource$Networks","nodeGroups","Resource$Nodegroups","nodeTemplates","Resource$Nodetemplates","nodeTypes","Resource$Nodetypes","organizationSecurityPolicies","Resource$Organizationsecuritypolicies","packetMirrorings","Resource$Packetmirrorings","projects","Resource$Projects","regionAutoscalers","Resource$Regionautoscalers","regionBackendServices","Resource$Regionbackendservices","regionCommitments","Resource$Regioncommitments","regionDisks","Resource$Regiondisks","regionDiskTypes","Resource$Regiondisktypes","regionHealthChecks","Resource$Regionhealthchecks","regionHealthCheckServices","Resource$Regionhealthcheckservices","regionInstanceGroupManagers","Resource$Regioninstancegroupmanagers","regionInstanceGroups","Resource$Regioninstancegroups","regionNetworkEndpointGroups","Resource$Regionnetworkendpointgroups","regionNotificationEndpoints","Resource$Regionnotificationendpoints","regionOperations","Resource$Regionoperations","regions","Resource$Regions","regionSslCertificates","Resource$Regionsslcertificates","regionTargetHttpProxies","Resource$Regiontargethttpproxies","regionTargetHttpsProxies","Resource$Regiontargethttpsproxies","regionUrlMaps","Resource$Regionurlmaps","reservations","Resource$Reservations","resourcePolicies","Resource$Resourcepolicies","routers","Resource$Routers","routes","Resource$Routes","securityPolicies","Resource$Securitypolicies","snapshots","Resource$Snapshots","sslCertificates","Resource$Sslcertificates","sslPolicies","Resource$Sslpolicies","subnetworks","Resource$Subnetworks","targetGrpcProxies","Resource$Targetgrpcproxies","targetHttpProxies","Resource$Targethttpproxies","targetHttpsProxies","Resource$Targethttpsproxies","targetInstances","Resource$Targetinstances","targetPools","Resource$Targetpools","targetSslProxies","Resource$Targetsslproxies","targetTcpProxies","Resource$Targettcpproxies","targetVpnGateways","Resource$Targetvpngateways","urlMaps","Resource$Urlmaps","vpnGateways","Resource$Vpngateways","vpnTunnels","Resource$Vpntunnels","zoneOperations","Resource$Zoneoperations","zones","Resource$Zones","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compute_beta = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar compute_beta;\n(function (compute_beta) {\n    /**\n     * Compute Engine API\n     *\n     * Creates and runs virtual machines on Google Cloud Platform.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const compute = google.compute('beta');\n     * ```\n     */\n    class Compute {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n            this.addresses = new Resource$Addresses(this.context);\n            this.autoscalers = new Resource$Autoscalers(this.context);\n            this.backendBuckets = new Resource$Backendbuckets(this.context);\n            this.backendServices = new Resource$Backendservices(this.context);\n            this.disks = new Resource$Disks(this.context);\n            this.diskTypes = new Resource$Disktypes(this.context);\n            this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n            this.firewalls = new Resource$Firewalls(this.context);\n            this.forwardingRules = new Resource$Forwardingrules(this.context);\n            this.globalAddresses = new Resource$Globaladdresses(this.context);\n            this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n            this.globalNetworkEndpointGroups = new Resource$Globalnetworkendpointgroups(this.context);\n            this.globalOperations = new Resource$Globaloperations(this.context);\n            this.globalOrganizationOperations = new Resource$Globalorganizationoperations(this.context);\n            this.healthChecks = new Resource$Healthchecks(this.context);\n            this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n            this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n            this.images = new Resource$Images(this.context);\n            this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n            this.instanceGroups = new Resource$Instancegroups(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.instanceTemplates = new Resource$Instancetemplates(this.context);\n            this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n            this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n            this.interconnects = new Resource$Interconnects(this.context);\n            this.licenseCodes = new Resource$Licensecodes(this.context);\n            this.licenses = new Resource$Licenses(this.context);\n            this.machineImages = new Resource$Machineimages(this.context);\n            this.machineTypes = new Resource$Machinetypes(this.context);\n            this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n            this.networks = new Resource$Networks(this.context);\n            this.nodeGroups = new Resource$Nodegroups(this.context);\n            this.nodeTemplates = new Resource$Nodetemplates(this.context);\n            this.nodeTypes = new Resource$Nodetypes(this.context);\n            this.organizationSecurityPolicies = new Resource$Organizationsecuritypolicies(this.context);\n            this.packetMirrorings = new Resource$Packetmirrorings(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n            this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n            this.regionCommitments = new Resource$Regioncommitments(this.context);\n            this.regionDisks = new Resource$Regiondisks(this.context);\n            this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n            this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n            this.regionHealthCheckServices = new Resource$Regionhealthcheckservices(this.context);\n            this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n            this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n            this.regionNetworkEndpointGroups = new Resource$Regionnetworkendpointgroups(this.context);\n            this.regionNotificationEndpoints = new Resource$Regionnotificationendpoints(this.context);\n            this.regionOperations = new Resource$Regionoperations(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.regionSslCertificates = new Resource$Regionsslcertificates(this.context);\n            this.regionTargetHttpProxies = new Resource$Regiontargethttpproxies(this.context);\n            this.regionTargetHttpsProxies = new Resource$Regiontargethttpsproxies(this.context);\n            this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n            this.reservations = new Resource$Reservations(this.context);\n            this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n            this.routers = new Resource$Routers(this.context);\n            this.routes = new Resource$Routes(this.context);\n            this.securityPolicies = new Resource$Securitypolicies(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.sslCertificates = new Resource$Sslcertificates(this.context);\n            this.sslPolicies = new Resource$Sslpolicies(this.context);\n            this.subnetworks = new Resource$Subnetworks(this.context);\n            this.targetGrpcProxies = new Resource$Targetgrpcproxies(this.context);\n            this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n            this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n            this.targetInstances = new Resource$Targetinstances(this.context);\n            this.targetPools = new Resource$Targetpools(this.context);\n            this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n            this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n            this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n            this.urlMaps = new Resource$Urlmaps(this.context);\n            this.vpnGateways = new Resource$Vpngateways(this.context);\n            this.vpnTunnels = new Resource$Vpntunnels(this.context);\n            this.zoneOperations = new Resource$Zoneoperations(this.context);\n            this.zones = new Resource$Zones(this.context);\n        }\n    }\n    compute_beta.Compute = Compute;\n    class Resource$Acceleratortypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'acceleratorType'],\n                pathParams: ['acceleratorType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Acceleratortypes = Resource$Acceleratortypes;\n    class Resource$Addresses {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Addresses = Resource$Addresses;\n    class Resource$Autoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Autoscalers = Resource$Autoscalers;\n    class Resource$Backendbuckets {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket', 'keyName'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Backendbuckets = Resource$Backendbuckets;\n    class Resource$Backendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService', 'keyName'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Backendservices = Resource$Backendservices;\n    class Resource$Disks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Disks = Resource$Disks;\n    class Resource$Disktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'diskType'],\n                pathParams: ['diskType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Disktypes = Resource$Disktypes;\n    class Resource$Externalvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Externalvpngateways = Resource$Externalvpngateways;\n    class Resource$Firewalls {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Firewalls = Resource$Firewalls;\n    class Resource$Forwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Forwardingrules = Resource$Forwardingrules;\n    class Resource$Globaladdresses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globaladdresses = Resource$Globaladdresses;\n    class Resource$Globalforwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n    class Resource$Globalnetworkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globalnetworkendpointgroups = Resource$Globalnetworkendpointgroups;\n    class Resource$Globaloperations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globaloperations = Resource$Globaloperations;\n    class Resource$Globalorganizationoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n    class Resource$Healthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Healthchecks = Resource$Healthchecks;\n    class Resource$Httphealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Httphealthchecks = Resource$Httphealthchecks;\n    class Resource$Httpshealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n    class Resource$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deprecate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'family'],\n                pathParams: ['family', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Images = Resource$Images;\n    class Resource$Instancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listErrors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n    class Resource$Instancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancegroups = Resource$Instancegroups;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instance',\n                    'accessConfig',\n                    'networkInterface',\n                ],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getScreenshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/screenshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instance',\n                    'autoDelete',\n                    'deviceName',\n                ],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setName(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setName').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTags(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        start(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        suspend(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instances = Resource$Instances;\n    class Resource$Instancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancetemplates = Resource$Instancetemplates;\n    class Resource$Interconnectattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnectattachments = Resource$Interconnectattachments;\n    class Resource$Interconnectlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectLocation'],\n                pathParams: ['interconnectLocation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnectlocations = Resource$Interconnectlocations;\n    class Resource$Interconnects {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnects = Resource$Interconnects;\n    class Resource$Licensecodes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'licenseCode'],\n                pathParams: ['licenseCode', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Licensecodes = Resource$Licensecodes;\n    class Resource$Licenses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Licenses = Resource$Licenses;\n    class Resource$Machineimages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Machineimages = Resource$Machineimages;\n    class Resource$Machinetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'machineType'],\n                pathParams: ['machineType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Machinetypes = Resource$Machinetypes;\n    class Resource$Networkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n    class Resource$Networks {\n        constructor(context) {\n            this.context = context;\n        }\n        addPeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Networks = Resource$Networks;\n    class Resource$Nodegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'initialNodeCount'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Nodegroups = Resource$Nodegroups;\n    class Resource$Nodetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Nodetemplates = Resource$Nodetemplates;\n    class Resource$Nodetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeType'],\n                pathParams: ['nodeType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Nodetypes = Resource$Nodetypes;\n    class Resource$Organizationsecuritypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        copyRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/copyRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n    class Resource$Packetmirrorings {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Packetmirrorings = Resource$Packetmirrorings;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Projects = Resource$Projects;\n    class Resource$Regionautoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionautoscalers = Resource$Regionautoscalers;\n    class Resource$Regionbackendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionbackendservices = Resource$Regionbackendservices;\n    class Resource$Regioncommitments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioncommitments = Resource$Regioncommitments;\n    class Resource$Regiondisks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiondisks = Resource$Regiondisks;\n    class Resource$Regiondisktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'diskType'],\n                pathParams: ['diskType', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiondisktypes = Resource$Regiondisktypes;\n    class Resource$Regionhealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n    class Resource$Regionhealthcheckservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n    class Resource$Regioninstancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listErrors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n    class Resource$Regioninstancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n    class Resource$Regionnetworkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionnetworkendpointgroups = Resource$Regionnetworkendpointgroups;\n    class Resource$Regionnotificationendpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n    class Resource$Regionoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionoperations = Resource$Regionoperations;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regions = Resource$Regions;\n    class Resource$Regionsslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n    class Resource$Regiontargethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n    class Resource$Regiontargethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n    class Resource$Regionurlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionurlmaps = Resource$Regionurlmaps;\n    class Resource$Reservations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Reservations = Resource$Reservations;\n    class Resource$Resourcepolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Resourcepolicies = Resource$Resourcepolicies;\n    class Resource$Routers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        preview(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Routers = Resource$Routers;\n    class Resource$Routes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Routes = Resource$Routes;\n    class Resource$Securitypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Securitypolicies = Resource$Securitypolicies;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Sslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Sslcertificates = Resource$Sslcertificates;\n    class Resource$Sslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Sslpolicies = Resource$Sslpolicies;\n    class Resource$Subnetworks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listUsable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Subnetworks = Resource$Subnetworks;\n    class Resource$Targetgrpcproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetGrpcProxy'],\n                pathParams: ['project', 'targetGrpcProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetGrpcProxy'],\n                pathParams: ['project', 'targetGrpcProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetGrpcProxy'],\n                pathParams: ['project', 'targetGrpcProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetgrpcproxies = Resource$Targetgrpcproxies;\n    class Resource$Targethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targethttpproxies = Resource$Targethttpproxies;\n    class Resource$Targethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n    class Resource$Targetinstances {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetinstances = Resource$Targetinstances;\n    class Resource$Targetpools {\n        constructor(context) {\n            this.context = context;\n        }\n        addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetpools = Resource$Targetpools;\n    class Resource$Targetsslproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetsslproxies = Resource$Targetsslproxies;\n    class Resource$Targettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targettcpproxies = Resource$Targettcpproxies;\n    class Resource$Targetvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetvpngateways = Resource$Targetvpngateways;\n    class Resource$Urlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Urlmaps = Resource$Urlmaps;\n    class Resource$Vpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Vpngateways = Resource$Vpngateways;\n    class Resource$Vpntunnels {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Vpntunnels = Resource$Vpntunnels;\n    class Resource$Zoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Zoneoperations = Resource$Zoneoperations;\n    class Resource$Zones {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Zones = Resource$Zones;\n})(compute_beta = exports.compute_beta || (exports.compute_beta = {}));\n//# sourceMappingURL=beta.js.map"]},"metadata":{},"sourceType":"script"}