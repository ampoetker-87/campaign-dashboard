{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar readline = require('readline');\n\nvar _require = require('googleapis'),\n    google = _require.google;\n\nvar _require2 = require('@google-cloud/local-auth'),\n    authenticate = _require2.authenticate;\n\nvar drive = google.drive('v3');\n\nfunction runSample(_x) {\n  return _runSample.apply(this, arguments);\n} // if invoked directly (not tests), authenticate and run the samples\n\n\nfunction _runSample() {\n  _runSample = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileName) {\n    var auth, fileSize, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return authenticate({\n              keyfilePath: path.join(__dirname, '../oauth2.keys.json'),\n              scopes: 'https://www.googleapis.com/auth/drive.file'\n            });\n\n          case 2:\n            auth = _context.sent;\n            google.options({\n              auth\n            });\n            fileSize = fs.statSync(fileName).size;\n            _context.next = 7;\n            return drive.files.create({\n              requestBody: {// a requestBody element is required if you want to use multipart\n              },\n              media: {\n                body: fs.createReadStream(fileName)\n              }\n            }, {\n              // Use the `onUploadProgress` event from Axios to track the\n              // number of bytes uploaded to this point.\n              onUploadProgress: function onUploadProgress(evt) {\n                var progress = evt.bytesRead / fileSize * 100;\n                readline.clearLine(process.stdout, 0);\n                readline.cursorTo(process.stdout, 0);\n                process.stdout.write(\"\".concat(Math.round(progress), \"% complete\"));\n              }\n            });\n\n          case 7:\n            res = _context.sent;\n            console.log(res.data);\n            return _context.abrupt(\"return\", res.data);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _runSample.apply(this, arguments);\n}\n\nif (module === require.main) {\n  var fileName = process.argv[2];\n  runSample(fileName).catch(console.error);\n}\n\nmodule.exports = runSample;","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/src/components/drive/drive-upload.js"],"names":["fs","require","path","readline","google","authenticate","drive","runSample","fileName","keyfilePath","join","__dirname","scopes","auth","options","fileSize","statSync","size","files","create","requestBody","media","body","createReadStream","onUploadProgress","evt","progress","bytesRead","clearLine","process","stdout","cursorTo","write","Math","round","res","console","log","data","module","main","argv","catch","error","exports"],"mappings":"AAAA;;;;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;eACiBA,OAAO,CAAC,YAAD,C;IAAjBG,M,YAAAA,M;;gBACgBH,OAAO,CAAC,0BAAD,C;IAAvBI,Y,aAAAA,Y;;AAEP,IAAMC,KAAK,GAAGF,MAAM,CAACE,KAAP,CAAa,IAAb,CAAd;;SAEeC,S;;EAiCf;;;;wEAjCA,iBAAyBC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEqBH,YAAY,CAAC;AAC9BI,cAAAA,WAAW,EAAEP,IAAI,CAACQ,IAAL,CAAUC,SAAV,EAAqB,qBAArB,CADiB;AAE9BC,cAAAA,MAAM,EAAE;AAFsB,aAAD,CAFjC;;AAAA;AAEQC,YAAAA,IAFR;AAMET,YAAAA,MAAM,CAACU,OAAP,CAAe;AAACD,cAAAA;AAAD,aAAf;AAEME,YAAAA,QARR,GAQmBf,EAAE,CAACgB,QAAH,CAAYR,QAAZ,EAAsBS,IARzC;AAAA;AAAA,mBASoBX,KAAK,CAACY,KAAN,CAAYC,MAAZ,CAChB;AACEC,cAAAA,WAAW,EAAE,CACX;AADW,eADf;AAIEC,cAAAA,KAAK,EAAE;AACLC,gBAAAA,IAAI,EAAEtB,EAAE,CAACuB,gBAAH,CAAoBf,QAApB;AADD;AAJT,aADgB,EAShB;AACE;AACA;AACAgB,cAAAA,gBAAgB,EAAE,0BAAAC,GAAG,EAAI;AACvB,oBAAMC,QAAQ,GAAID,GAAG,CAACE,SAAJ,GAAgBZ,QAAjB,GAA6B,GAA9C;AACAZ,gBAAAA,QAAQ,CAACyB,SAAT,CAAmBC,OAAO,CAACC,MAA3B,EAAmC,CAAnC;AACA3B,gBAAAA,QAAQ,CAAC4B,QAAT,CAAkBF,OAAO,CAACC,MAA1B,EAAkC,CAAlC;AACAD,gBAAAA,OAAO,CAACC,MAAR,CAAeE,KAAf,WAAwBC,IAAI,CAACC,KAAL,CAAWR,QAAX,CAAxB;AACD;AARH,aATgB,CATpB;;AAAA;AASQS,YAAAA,GATR;AA6BEC,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AA7BF,6CA8BSH,GAAG,CAACG,IA9Bb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkCA,IAAIC,MAAM,KAAKtC,OAAO,CAACuC,IAAvB,EAA6B;AAC3B,MAAMhC,QAAQ,GAAGqB,OAAO,CAACY,IAAR,CAAa,CAAb,CAAjB;AACAlC,EAAAA,SAAS,CAACC,QAAD,CAAT,CAAoBkC,KAApB,CAA0BN,OAAO,CAACO,KAAlC;AACD;;AACDJ,MAAM,CAACK,OAAP,GAAiBrC,SAAjB","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst readline = require('readline');\nconst {google} = require('googleapis');\nconst {authenticate} = require('@google-cloud/local-auth');\n\nconst drive = google.drive('v3');\n\nasync function runSample(fileName) {\n  // Obtain user credentials to use for the request\n  const auth = await authenticate({\n    keyfilePath: path.join(__dirname, '../oauth2.keys.json'),\n    scopes: 'https://www.googleapis.com/auth/drive.file',\n  });\n  google.options({auth});\n\n  const fileSize = fs.statSync(fileName).size;\n  const res = await drive.files.create(\n    {\n      requestBody: {\n        // a requestBody element is required if you want to use multipart\n      },\n      media: {\n        body: fs.createReadStream(fileName),\n      },\n    },\n    {\n      // Use the `onUploadProgress` event from Axios to track the\n      // number of bytes uploaded to this point.\n      onUploadProgress: evt => {\n        const progress = (evt.bytesRead / fileSize) * 100;\n        readline.clearLine(process.stdout, 0);\n        readline.cursorTo(process.stdout, 0);\n        process.stdout.write(`${Math.round(progress)}% complete`);\n      },\n    }\n  );\n  console.log(res.data);\n  return res.data;\n}\n\n// if invoked directly (not tests), authenticate and run the samples\nif (module === require.main) {\n  const fileName = process.argv[2];\n  runSample(fileName).catch(console.error);\n}\nmodule.exports = runSample;"]},"metadata":{},"sourceType":"module"}