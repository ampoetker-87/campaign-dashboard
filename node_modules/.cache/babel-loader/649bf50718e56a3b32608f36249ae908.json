{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bigtableadmin_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar bigtableadmin_v2;\n\n(function (bigtableadmin_v2) {\n  /**\n   * Cloud Bigtable Admin API\n   *\n   * Administer your Cloud Bigtable tables and instances.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const bigtableadmin = google.bigtableadmin('v2');\n   * ```\n   */\n  var Bigtableadmin = function Bigtableadmin(options, google) {\n    _classCallCheck(this, Bigtableadmin);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.operations = new Resource$Operations(this.context);\n    this.projects = new Resource$Projects(this.context);\n  };\n\n  bigtableadmin_v2.Bigtableadmin = Bigtableadmin;\n\n  var Resource$Operations = /*#__PURE__*/function () {\n    function Resource$Operations(context) {\n      _classCallCheck(this, Resource$Operations);\n\n      this.context = context;\n      this.projects = new Resource$Operations$Projects(this.context);\n    }\n\n    _createClass(Resource$Operations, [{\n      key: \"cancel\",\n      value: function cancel(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Operations;\n  }();\n\n  bigtableadmin_v2.Resource$Operations = Resource$Operations;\n\n  var Resource$Operations$Projects = function Resource$Operations$Projects(context) {\n    _classCallCheck(this, Resource$Operations$Projects);\n\n    this.context = context;\n    this.operations = new Resource$Operations$Projects$Operations(this.context);\n  };\n\n  bigtableadmin_v2.Resource$Operations$Projects = Resource$Operations$Projects;\n\n  var Resource$Operations$Projects$Operations = /*#__PURE__*/function () {\n    function Resource$Operations$Projects$Operations(context) {\n      _classCallCheck(this, Resource$Operations$Projects$Operations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Operations$Projects$Operations, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Operations$Projects$Operations;\n  }();\n\n  bigtableadmin_v2.Resource$Operations$Projects$Operations = Resource$Operations$Projects$Operations;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.instances = new Resource$Projects$Instances(this.context);\n    this.locations = new Resource$Projects$Locations(this.context);\n  };\n\n  bigtableadmin_v2.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Instances = /*#__PURE__*/function () {\n    function Resource$Projects$Instances(context) {\n      _classCallCheck(this, Resource$Projects$Instances);\n\n      this.context = context;\n      this.appProfiles = new Resource$Projects$Instances$Appprofiles(this.context);\n      this.clusters = new Resource$Projects$Instances$Clusters(this.context);\n      this.tables = new Resource$Projects$Instances$Tables(this.context);\n    }\n\n    _createClass(Resource$Projects$Instances, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"partialUpdateInstance\",\n      value: function partialUpdateInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Instances;\n  }();\n\n  bigtableadmin_v2.Resource$Projects$Instances = Resource$Projects$Instances;\n\n  var Resource$Projects$Instances$Appprofiles = /*#__PURE__*/function () {\n    function Resource$Projects$Instances$Appprofiles(context) {\n      _classCallCheck(this, Resource$Projects$Instances$Appprofiles);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Instances$Appprofiles, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/appProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/appProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Instances$Appprofiles;\n  }();\n\n  bigtableadmin_v2.Resource$Projects$Instances$Appprofiles = Resource$Projects$Instances$Appprofiles;\n\n  var Resource$Projects$Instances$Clusters = /*#__PURE__*/function () {\n    function Resource$Projects$Instances$Clusters(context) {\n      _classCallCheck(this, Resource$Projects$Instances$Clusters);\n\n      this.context = context;\n      this.backups = new Resource$Projects$Instances$Clusters$Backups(this.context);\n    }\n\n    _createClass(Resource$Projects$Instances$Clusters, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Instances$Clusters;\n  }();\n\n  bigtableadmin_v2.Resource$Projects$Instances$Clusters = Resource$Projects$Instances$Clusters;\n\n  var Resource$Projects$Instances$Clusters$Backups = /*#__PURE__*/function () {\n    function Resource$Projects$Instances$Clusters$Backups(context) {\n      _classCallCheck(this, Resource$Projects$Instances$Clusters$Backups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Instances$Clusters$Backups, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/backups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/backups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Instances$Clusters$Backups;\n  }();\n\n  bigtableadmin_v2.Resource$Projects$Instances$Clusters$Backups = Resource$Projects$Instances$Clusters$Backups;\n\n  var Resource$Projects$Instances$Tables = /*#__PURE__*/function () {\n    function Resource$Projects$Instances$Tables(context) {\n      _classCallCheck(this, Resource$Projects$Instances$Tables);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Instances$Tables, [{\n      key: \"checkConsistency\",\n      value: function checkConsistency(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}:checkConsistency').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"dropRowRange\",\n      value: function dropRowRange(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}:dropRowRange').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateConsistencyToken\",\n      value: function generateConsistencyToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}:generateConsistencyToken').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"modifyColumnFamilies\",\n      value: function modifyColumnFamilies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}:modifyColumnFamilies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"restore\",\n      value: function restore(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/tables:restore').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['resource'],\n          pathParams: ['resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Instances$Tables;\n  }();\n\n  bigtableadmin_v2.Resource$Projects$Instances$Tables = Resource$Projects$Instances$Tables;\n\n  var Resource$Projects$Locations = /*#__PURE__*/function () {\n    function Resource$Projects$Locations(context) {\n      _classCallCheck(this, Resource$Projects$Locations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations;\n  }();\n\n  bigtableadmin_v2.Resource$Projects$Locations = Resource$Projects$Locations;\n})(bigtableadmin_v2 = exports.bigtableadmin_v2 || (exports.bigtableadmin_v2 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/googleapis/build/src/apis/bigtableadmin/v2.js"],"names":["Object","defineProperty","exports","value","bigtableadmin_v2","googleapis_common_1","require","Bigtableadmin","options","google","context","_options","operations","Resource$Operations","projects","Resource$Projects","Resource$Operations$Projects","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Operations$Projects$Operations","instances","Resource$Projects$Instances","locations","Resource$Projects$Locations","appProfiles","Resource$Projects$Instances$Appprofiles","clusters","Resource$Projects$Instances$Clusters","tables","Resource$Projects$Instances$Tables","backups","Resource$Projects$Instances$Clusters$Backups"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bigtableadmin_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar bigtableadmin_v2;\n(function (bigtableadmin_v2) {\n    /**\n     * Cloud Bigtable Admin API\n     *\n     * Administer your Cloud Bigtable tables and instances.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const bigtableadmin = google.bigtableadmin('v2');\n     * ```\n     */\n    class Bigtableadmin {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.operations = new Resource$Operations(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    bigtableadmin_v2.Bigtableadmin = Bigtableadmin;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n            this.projects = new Resource$Operations$Projects(this.context);\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigtableadmin_v2.Resource$Operations = Resource$Operations;\n    class Resource$Operations$Projects {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Operations$Projects$Operations(this.context);\n        }\n    }\n    bigtableadmin_v2.Resource$Operations$Projects = Resource$Operations$Projects;\n    class Resource$Operations$Projects$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigtableadmin_v2.Resource$Operations$Projects$Operations = Resource$Operations$Projects$Operations;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.instances = new Resource$Projects$Instances(this.context);\n            this.locations = new Resource$Projects$Locations(this.context);\n        }\n    }\n    bigtableadmin_v2.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Instances {\n        constructor(context) {\n            this.context = context;\n            this.appProfiles = new Resource$Projects$Instances$Appprofiles(this.context);\n            this.clusters = new Resource$Projects$Instances$Clusters(this.context);\n            this.tables = new Resource$Projects$Instances$Tables(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        partialUpdateInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigtableadmin_v2.Resource$Projects$Instances = Resource$Projects$Instances;\n    class Resource$Projects$Instances$Appprofiles {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/appProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/appProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigtableadmin_v2.Resource$Projects$Instances$Appprofiles = Resource$Projects$Instances$Appprofiles;\n    class Resource$Projects$Instances$Clusters {\n        constructor(context) {\n            this.context = context;\n            this.backups = new Resource$Projects$Instances$Clusters$Backups(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigtableadmin_v2.Resource$Projects$Instances$Clusters = Resource$Projects$Instances$Clusters;\n    class Resource$Projects$Instances$Clusters$Backups {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/backups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/backups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigtableadmin_v2.Resource$Projects$Instances$Clusters$Backups = Resource$Projects$Instances$Clusters$Backups;\n    class Resource$Projects$Instances$Tables {\n        constructor(context) {\n            this.context = context;\n        }\n        checkConsistency(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}:checkConsistency').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        dropRowRange(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}:dropRowRange').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateConsistencyToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}:generateConsistencyToken').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        modifyColumnFamilies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}:modifyColumnFamilies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        restore(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/tables:restore').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigtableadmin_v2.Resource$Projects$Instances$Tables = Resource$Projects$Instances$Tables;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigtableadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigtableadmin_v2.Resource$Projects$Locations = Resource$Projects$Locations;\n})(bigtableadmin_v2 = exports.bigtableadmin_v2 || (exports.bigtableadmin_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}