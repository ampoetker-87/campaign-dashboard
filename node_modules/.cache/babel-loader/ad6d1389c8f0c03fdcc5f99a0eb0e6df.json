{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clouddebugger_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar clouddebugger_v2;\n\n(function (clouddebugger_v2) {\n  /**\n   * Cloud Debugger API\n   *\n   * Examines the call stack and variables of a running application without stopping or slowing it down.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const clouddebugger = google.clouddebugger('v2');\n   * ```\n   */\n  var Clouddebugger = function Clouddebugger(options, google) {\n    _classCallCheck(this, Clouddebugger);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.controller = new Resource$Controller(this.context);\n    this.debugger = new Resource$Debugger(this.context);\n  };\n\n  clouddebugger_v2.Clouddebugger = Clouddebugger;\n\n  var Resource$Controller = function Resource$Controller(context) {\n    _classCallCheck(this, Resource$Controller);\n\n    this.context = context;\n    this.debuggees = new Resource$Controller$Debuggees(this.context);\n  };\n\n  clouddebugger_v2.Resource$Controller = Resource$Controller;\n\n  var Resource$Controller$Debuggees = /*#__PURE__*/function () {\n    function Resource$Controller$Debuggees(context) {\n      _classCallCheck(this, Resource$Controller$Debuggees);\n\n      this.context = context;\n      this.breakpoints = new Resource$Controller$Debuggees$Breakpoints(this.context);\n    }\n\n    _createClass(Resource$Controller$Debuggees, [{\n      key: \"register\",\n      value: function register(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/register').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Controller$Debuggees;\n  }();\n\n  clouddebugger_v2.Resource$Controller$Debuggees = Resource$Controller$Debuggees;\n\n  var Resource$Controller$Debuggees$Breakpoints = /*#__PURE__*/function () {\n    function Resource$Controller$Debuggees$Breakpoints(context) {\n      _classCallCheck(this, Resource$Controller$Debuggees$Breakpoints);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Controller$Debuggees$Breakpoints, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId'],\n          pathParams: ['debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId', 'id'],\n          pathParams: ['debuggeeId', 'id'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Controller$Debuggees$Breakpoints;\n  }();\n\n  clouddebugger_v2.Resource$Controller$Debuggees$Breakpoints = Resource$Controller$Debuggees$Breakpoints;\n\n  var Resource$Debugger = function Resource$Debugger(context) {\n    _classCallCheck(this, Resource$Debugger);\n\n    this.context = context;\n    this.debuggees = new Resource$Debugger$Debuggees(this.context);\n  };\n\n  clouddebugger_v2.Resource$Debugger = Resource$Debugger;\n\n  var Resource$Debugger$Debuggees = /*#__PURE__*/function () {\n    function Resource$Debugger$Debuggees(context) {\n      _classCallCheck(this, Resource$Debugger$Debuggees);\n\n      this.context = context;\n      this.breakpoints = new Resource$Debugger$Debuggees$Breakpoints(this.context);\n    }\n\n    _createClass(Resource$Debugger$Debuggees, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debugger$Debuggees;\n  }();\n\n  clouddebugger_v2.Resource$Debugger$Debuggees = Resource$Debugger$Debuggees;\n\n  var Resource$Debugger$Debuggees$Breakpoints = /*#__PURE__*/function () {\n    function Resource$Debugger$Debuggees$Breakpoints(context) {\n      _classCallCheck(this, Resource$Debugger$Debuggees$Breakpoints);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Debugger$Debuggees$Breakpoints, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId', 'breakpointId'],\n          pathParams: ['breakpointId', 'debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId', 'breakpointId'],\n          pathParams: ['breakpointId', 'debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId'],\n          pathParams: ['debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"set\",\n      value: function set(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/set').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['debuggeeId'],\n          pathParams: ['debuggeeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Debugger$Debuggees$Breakpoints;\n  }();\n\n  clouddebugger_v2.Resource$Debugger$Debuggees$Breakpoints = Resource$Debugger$Debuggees$Breakpoints;\n})(clouddebugger_v2 = exports.clouddebugger_v2 || (exports.clouddebugger_v2 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/clouddebugger/v2.js"],"names":["Object","defineProperty","exports","value","clouddebugger_v2","googleapis_common_1","require","Clouddebugger","options","google","context","_options","controller","Resource$Controller","debugger","Resource$Debugger","debuggees","Resource$Controller$Debuggees","breakpoints","Resource$Controller$Debuggees$Breakpoints","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Debugger$Debuggees","Resource$Debugger$Debuggees$Breakpoints"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clouddebugger_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar clouddebugger_v2;\n(function (clouddebugger_v2) {\n    /**\n     * Cloud Debugger API\n     *\n     * Examines the call stack and variables of a running application without stopping or slowing it down.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const clouddebugger = google.clouddebugger('v2');\n     * ```\n     */\n    class Clouddebugger {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.controller = new Resource$Controller(this.context);\n            this.debugger = new Resource$Debugger(this.context);\n        }\n    }\n    clouddebugger_v2.Clouddebugger = Clouddebugger;\n    class Resource$Controller {\n        constructor(context) {\n            this.context = context;\n            this.debuggees = new Resource$Controller$Debuggees(this.context);\n        }\n    }\n    clouddebugger_v2.Resource$Controller = Resource$Controller;\n    class Resource$Controller$Debuggees {\n        constructor(context) {\n            this.context = context;\n            this.breakpoints = new Resource$Controller$Debuggees$Breakpoints(this.context);\n        }\n        register(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/controller/debuggees/register').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    clouddebugger_v2.Resource$Controller$Debuggees = Resource$Controller$Debuggees;\n    class Resource$Controller$Debuggees$Breakpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['debuggeeId'],\n                pathParams: ['debuggeeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/controller/debuggees/{debuggeeId}/breakpoints/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['debuggeeId', 'id'],\n                pathParams: ['debuggeeId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    clouddebugger_v2.Resource$Controller$Debuggees$Breakpoints = Resource$Controller$Debuggees$Breakpoints;\n    class Resource$Debugger {\n        constructor(context) {\n            this.context = context;\n            this.debuggees = new Resource$Debugger$Debuggees(this.context);\n        }\n    }\n    clouddebugger_v2.Resource$Debugger = Resource$Debugger;\n    class Resource$Debugger$Debuggees {\n        constructor(context) {\n            this.context = context;\n            this.breakpoints = new Resource$Debugger$Debuggees$Breakpoints(this.context);\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/debugger/debuggees').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    clouddebugger_v2.Resource$Debugger$Debuggees = Resource$Debugger$Debuggees;\n    class Resource$Debugger$Debuggees$Breakpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['debuggeeId', 'breakpointId'],\n                pathParams: ['breakpointId', 'debuggeeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['debuggeeId', 'breakpointId'],\n                pathParams: ['breakpointId', 'debuggeeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['debuggeeId'],\n                pathParams: ['debuggeeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        set(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://clouddebugger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/debugger/debuggees/{debuggeeId}/breakpoints/set').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['debuggeeId'],\n                pathParams: ['debuggeeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    clouddebugger_v2.Resource$Debugger$Debuggees$Breakpoints = Resource$Debugger$Debuggees$Breakpoints;\n})(clouddebugger_v2 = exports.clouddebugger_v2 || (exports.clouddebugger_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}