{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.vault_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar vault_v1;\n\n(function (vault_v1) {\n  /**\n   * G Suite Vault API\n   *\n   * Archiving and eDiscovery for G Suite.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const vault = google.vault('v1');\n   * ```\n   */\n  var Vault = function Vault(options, google) {\n    _classCallCheck(this, Vault);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.matters = new Resource$Matters(this.context);\n    this.operations = new Resource$Operations(this.context);\n  };\n\n  vault_v1.Vault = Vault;\n\n  var Resource$Matters = /*#__PURE__*/function () {\n    function Resource$Matters(context) {\n      _classCallCheck(this, Resource$Matters);\n\n      this.context = context;\n      this.exports = new Resource$Matters$Exports(this.context);\n      this.holds = new Resource$Matters$Holds(this.context);\n      this.savedQueries = new Resource$Matters$Savedqueries(this.context);\n    }\n\n    _createClass(Resource$Matters, [{\n      key: \"addPermissions\",\n      value: function addPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}:addPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"close\",\n      value: function close(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}:close').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"count\",\n      value: function count(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}:count').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removePermissions\",\n      value: function removePermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}:removePermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reopen\",\n      value: function reopen(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}:reopen').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"undelete\",\n      value: function undelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}:undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Matters;\n  }();\n\n  vault_v1.Resource$Matters = Resource$Matters;\n\n  var Resource$Matters$Exports = /*#__PURE__*/function () {\n    function Resource$Matters$Exports(context) {\n      _classCallCheck(this, Resource$Matters$Exports);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Matters$Exports, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/exports').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/exports/{exportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'exportId'],\n          pathParams: ['exportId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/exports/{exportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'exportId'],\n          pathParams: ['exportId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/exports').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Matters$Exports;\n  }();\n\n  vault_v1.Resource$Matters$Exports = Resource$Matters$Exports;\n\n  var Resource$Matters$Holds = /*#__PURE__*/function () {\n    function Resource$Matters$Holds(context) {\n      _classCallCheck(this, Resource$Matters$Holds);\n\n      this.context = context;\n      this.accounts = new Resource$Matters$Holds$Accounts(this.context);\n    }\n\n    _createClass(Resource$Matters$Holds, [{\n      key: \"addHeldAccounts\",\n      value: function addHeldAccounts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}:addHeldAccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'holdId'],\n          pathParams: ['holdId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'holdId'],\n          pathParams: ['holdId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'holdId'],\n          pathParams: ['holdId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeHeldAccounts\",\n      value: function removeHeldAccounts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}:removeHeldAccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'holdId'],\n          pathParams: ['holdId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'holdId'],\n          pathParams: ['holdId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Matters$Holds;\n  }();\n\n  vault_v1.Resource$Matters$Holds = Resource$Matters$Holds;\n\n  var Resource$Matters$Holds$Accounts = /*#__PURE__*/function () {\n    function Resource$Matters$Holds$Accounts(context) {\n      _classCallCheck(this, Resource$Matters$Holds$Accounts);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Matters$Holds$Accounts, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'holdId'],\n          pathParams: ['holdId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'holdId', 'accountId'],\n          pathParams: ['accountId', 'holdId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'holdId'],\n          pathParams: ['holdId', 'matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Matters$Holds$Accounts;\n  }();\n\n  vault_v1.Resource$Matters$Holds$Accounts = Resource$Matters$Holds$Accounts;\n\n  var Resource$Matters$Savedqueries = /*#__PURE__*/function () {\n    function Resource$Matters$Savedqueries(context) {\n      _classCallCheck(this, Resource$Matters$Savedqueries);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Matters$Savedqueries, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/savedQueries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/savedQueries/{savedQueryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'savedQueryId'],\n          pathParams: ['matterId', 'savedQueryId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/savedQueries/{savedQueryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['matterId', 'savedQueryId'],\n          pathParams: ['matterId', 'savedQueryId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/matters/{matterId}/savedQueries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['matterId'],\n          pathParams: ['matterId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Matters$Savedqueries;\n  }();\n\n  vault_v1.Resource$Matters$Savedqueries = Resource$Matters$Savedqueries;\n\n  var Resource$Operations = /*#__PURE__*/function () {\n    function Resource$Operations(context) {\n      _classCallCheck(this, Resource$Operations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Operations, [{\n      key: \"cancel\",\n      value: function cancel(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Operations;\n  }();\n\n  vault_v1.Resource$Operations = Resource$Operations;\n})(vault_v1 = exports.vault_v1 || (exports.vault_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/googleapis/build/src/apis/vault/v1.js"],"names":["Object","defineProperty","exports","value","vault_v1","googleapis_common_1","require","Vault","options","google","context","_options","matters","Resource$Matters","operations","Resource$Operations","Resource$Matters$Exports","holds","Resource$Matters$Holds","savedQueries","Resource$Matters$Savedqueries","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","accounts","Resource$Matters$Holds$Accounts"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.vault_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar vault_v1;\n(function (vault_v1) {\n    /**\n     * G Suite Vault API\n     *\n     * Archiving and eDiscovery for G Suite.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const vault = google.vault('v1');\n     * ```\n     */\n    class Vault {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.matters = new Resource$Matters(this.context);\n            this.operations = new Resource$Operations(this.context);\n        }\n    }\n    vault_v1.Vault = Vault;\n    class Resource$Matters {\n        constructor(context) {\n            this.context = context;\n            this.exports = new Resource$Matters$Exports(this.context);\n            this.holds = new Resource$Matters$Holds(this.context);\n            this.savedQueries = new Resource$Matters$Savedqueries(this.context);\n        }\n        addPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}:addPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        close(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}:close').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        count(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}:count').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removePermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}:removePermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reopen(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}:reopen').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        undelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}:undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    vault_v1.Resource$Matters = Resource$Matters;\n    class Resource$Matters$Exports {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/exports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/exports/{exportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'exportId'],\n                pathParams: ['exportId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/exports/{exportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'exportId'],\n                pathParams: ['exportId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/exports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    vault_v1.Resource$Matters$Exports = Resource$Matters$Exports;\n    class Resource$Matters$Holds {\n        constructor(context) {\n            this.context = context;\n            this.accounts = new Resource$Matters$Holds$Accounts(this.context);\n        }\n        addHeldAccounts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}:addHeldAccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'holdId'],\n                pathParams: ['holdId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/holds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'holdId'],\n                pathParams: ['holdId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'holdId'],\n                pathParams: ['holdId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/holds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeHeldAccounts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/matters/{matterId}/holds/{holdId}:removeHeldAccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'holdId'],\n                pathParams: ['holdId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'holdId'],\n                pathParams: ['holdId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    vault_v1.Resource$Matters$Holds = Resource$Matters$Holds;\n    class Resource$Matters$Holds$Accounts {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'holdId'],\n                pathParams: ['holdId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/matters/{matterId}/holds/{holdId}/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'holdId', 'accountId'],\n                pathParams: ['accountId', 'holdId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/holds/{holdId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'holdId'],\n                pathParams: ['holdId', 'matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    vault_v1.Resource$Matters$Holds$Accounts = Resource$Matters$Holds$Accounts;\n    class Resource$Matters$Savedqueries {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/savedQueries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/savedQueries/{savedQueryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'savedQueryId'],\n                pathParams: ['matterId', 'savedQueryId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/savedQueries/{savedQueryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['matterId', 'savedQueryId'],\n                pathParams: ['matterId', 'savedQueryId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/matters/{matterId}/savedQueries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['matterId'],\n                pathParams: ['matterId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    vault_v1.Resource$Matters$Savedqueries = Resource$Matters$Savedqueries;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://vault.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    vault_v1.Resource$Operations = Resource$Operations;\n})(vault_v1 = exports.vault_v1 || (exports.vault_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}