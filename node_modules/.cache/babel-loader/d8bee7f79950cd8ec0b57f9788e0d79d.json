{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blogger_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar blogger_v2;\n\n(function (blogger_v2) {\n  /**\n   * Blogger API v3\n   *\n   * The Blogger API provides access to posts, comments and pages of a Blogger blog.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const blogger = google.blogger('v2');\n   * ```\n   */\n  var Blogger = function Blogger(options, google) {\n    _classCallCheck(this, Blogger);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.blogs = new Resource$Blogs(this.context);\n    this.comments = new Resource$Comments(this.context);\n    this.pages = new Resource$Pages(this.context);\n    this.posts = new Resource$Posts(this.context);\n    this.users = new Resource$Users(this.context);\n  };\n\n  blogger_v2.Blogger = Blogger;\n\n  var Resource$Blogs = /*#__PURE__*/function () {\n    function Resource$Blogs(context) {\n      _classCallCheck(this, Resource$Blogs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Blogs, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/blogs/{blogId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/users/{userId}/blogs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userId'],\n          pathParams: ['userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Blogs;\n  }();\n\n  blogger_v2.Resource$Blogs = Resource$Blogs;\n\n  var Resource$Comments = /*#__PURE__*/function () {\n    function Resource$Comments(context) {\n      _classCallCheck(this, Resource$Comments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Comments, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/blogs/{blogId}/posts/{postId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['blogId', 'postId', 'commentId'],\n          pathParams: ['blogId', 'commentId', 'postId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/blogs/{blogId}/posts/{postId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['blogId', 'postId'],\n          pathParams: ['blogId', 'postId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Comments;\n  }();\n\n  blogger_v2.Resource$Comments = Resource$Comments;\n\n  var Resource$Pages = /*#__PURE__*/function () {\n    function Resource$Pages(context) {\n      _classCallCheck(this, Resource$Pages);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Pages, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['blogId', 'pageId'],\n          pathParams: ['blogId', 'pageId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/blogs/{blogId}/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Pages;\n  }();\n\n  blogger_v2.Resource$Pages = Resource$Pages;\n\n  var Resource$Posts = /*#__PURE__*/function () {\n    function Resource$Posts(context) {\n      _classCallCheck(this, Resource$Posts);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Posts, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['blogId', 'postId'],\n          pathParams: ['blogId', 'postId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['blogId'],\n          pathParams: ['blogId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Posts;\n  }();\n\n  blogger_v2.Resource$Posts = Resource$Posts;\n\n  var Resource$Users = /*#__PURE__*/function () {\n    function Resource$Users(context) {\n      _classCallCheck(this, Resource$Users);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Users, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userId'],\n          pathParams: ['userId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users;\n  }();\n\n  blogger_v2.Resource$Users = Resource$Users;\n})(blogger_v2 = exports.blogger_v2 || (exports.blogger_v2 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/blogger/v2.js"],"names":["Object","defineProperty","exports","value","blogger_v2","googleapis_common_1","require","Blogger","options","google","context","_options","blogs","Resource$Blogs","comments","Resource$Comments","pages","Resource$Pages","posts","Resource$Posts","users","Resource$Users","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.blogger_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar blogger_v2;\n(function (blogger_v2) {\n    /**\n     * Blogger API v3\n     *\n     * The Blogger API provides access to posts, comments and pages of a Blogger blog.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const blogger = google.blogger('v2');\n     * ```\n     */\n    class Blogger {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.blogs = new Resource$Blogs(this.context);\n            this.comments = new Resource$Comments(this.context);\n            this.pages = new Resource$Pages(this.context);\n            this.posts = new Resource$Posts(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    blogger_v2.Blogger = Blogger;\n    class Resource$Blogs {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/blogs/{blogId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{userId}/blogs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v2.Resource$Blogs = Resource$Blogs;\n    class Resource$Comments {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/blogs/{blogId}/posts/{postId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId', 'commentId'],\n                pathParams: ['blogId', 'commentId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/blogs/{blogId}/posts/{postId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId'],\n                pathParams: ['blogId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v2.Resource$Comments = Resource$Comments;\n    class Resource$Pages {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/blogs/{blogId}/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'pageId'],\n                pathParams: ['blogId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/blogs/{blogId}/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v2.Resource$Pages = Resource$Pages;\n    class Resource$Posts {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/blogs/{blogId}/posts/{postId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId', 'postId'],\n                pathParams: ['blogId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/blogs/{blogId}/posts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['blogId'],\n                pathParams: ['blogId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v2.Resource$Posts = Resource$Posts;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://blogger.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    blogger_v2.Resource$Users = Resource$Users;\n})(blogger_v2 = exports.blogger_v2 || (exports.blogger_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}