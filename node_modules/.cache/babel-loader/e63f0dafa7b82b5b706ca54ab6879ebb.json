{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar _regeneratorRuntime = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs = require(\"fs\");\n\nvar gaxios_1 = require(\"gaxios\");\n\nvar jws = require(\"jws\");\n\nvar mime = require(\"mime\");\n\nvar pify = require(\"pify\");\n\nvar readFile = pify(fs.readFile);\nvar GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nvar GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\n\nvar ErrorWithCode = /*#__PURE__*/function (_Error) {\n  _inherits(ErrorWithCode, _Error);\n\n  var _super = _createSuper(ErrorWithCode);\n\n  function ErrorWithCode(message, code) {\n    var _this;\n\n    _classCallCheck(this, ErrorWithCode);\n\n    _this = _super.call(this, message);\n    _this.code = code;\n    return _this;\n  }\n\n  return ErrorWithCode;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar getPem;\n\nvar GoogleToken = /*#__PURE__*/function () {\n  /**\n   * Create a GoogleToken.\n   *\n   * @param options  Configuration object.\n   */\n  function GoogleToken(options) {\n    _classCallCheck(this, GoogleToken);\n\n    this.token = null;\n    this.expiresAt = null;\n    this.rawToken = null;\n    this.tokenExpires = null;\n    this.configure(options);\n  }\n  /**\n   * Returns whether the token has expired.\n   *\n   * @return true if the token has expired, false otherwise.\n   */\n\n\n  _createClass(GoogleToken, [{\n    key: \"hasExpired\",\n    value: function hasExpired() {\n      var now = new Date().getTime();\n\n      if (this.token && this.expiresAt) {\n        return now >= this.expiresAt;\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken(callback) {\n      if (callback) {\n        this.getTokenAsync().then(function (t) {\n          return callback(null, t);\n        }, callback);\n        return;\n      }\n\n      return this.getTokenAsync();\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */\n\n  }, {\n    key: \"getCredentials\",\n    value: function getCredentials(keyFile) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var mimeType, key, body, privateKey, clientEmail, _privateKey, _privateKey2;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                mimeType = mime.getType(keyFile);\n                _context.t0 = mimeType;\n                _context.next = _context.t0 === 'application/json' ? 4 : _context.t0 === 'application/x-x509-ca-cert' ? 13 : _context.t0 === 'application/x-pkcs12' ? 17 : 25;\n                break;\n\n              case 4:\n                _context.next = 6;\n                return readFile(keyFile, 'utf8');\n\n              case 6:\n                key = _context.sent;\n                body = JSON.parse(key);\n                privateKey = body.private_key;\n                clientEmail = body.client_email;\n\n                if (!(!privateKey || !clientEmail)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n\n              case 12:\n                return _context.abrupt(\"return\", {\n                  privateKey,\n                  clientEmail\n                });\n\n              case 13:\n                _context.next = 15;\n                return readFile(keyFile, 'utf8');\n\n              case 15:\n                _privateKey = _context.sent;\n                return _context.abrupt(\"return\", {\n                  privateKey: _privateKey\n                });\n\n              case 17:\n                if (getPem) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 20;\n                return Promise.resolve().then(function () {\n                  return require('google-p12-pem');\n                });\n\n              case 20:\n                getPem = _context.sent.getPem;\n\n              case 21:\n                _context.next = 23;\n                return getPem(keyFile);\n\n              case 23:\n                _privateKey2 = _context.sent;\n                return _context.abrupt(\"return\", {\n                  privateKey: _privateKey2\n                });\n\n              case 25:\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' + 'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"getTokenAsync\",\n    value: function getTokenAsync() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var creds;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.hasExpired()) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.resolve(this.token));\n\n              case 2:\n                if (!(!this.key && !this.keyFile)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('No key or keyFile set.');\n\n              case 4:\n                if (!(!this.key && this.keyFile)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 7;\n                return this.getCredentials(this.keyFile);\n\n              case 7:\n                creds = _context2.sent;\n                this.key = creds.privateKey;\n                this.iss = creds.clientEmail || this.iss;\n\n                if (!creds.clientEmail) {\n                  this.ensureEmail();\n                }\n\n              case 11:\n                return _context2.abrupt(\"return\", this.requestToken());\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"ensureEmail\",\n    value: function ensureEmail() {\n      if (!this.iss) {\n        throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n      }\n    }\n  }, {\n    key: \"revokeToken\",\n    value: function revokeToken(callback) {\n      if (callback) {\n        this.revokeTokenAsync().then(function () {\n          return callback();\n        }, callback);\n        return;\n      }\n\n      return this.revokeTokenAsync();\n    }\n  }, {\n    key: \"revokeTokenAsync\",\n    value: function revokeTokenAsync() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.token) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('No token to revoke.');\n\n              case 2:\n                return _context3.abrupt(\"return\", gaxios_1.request({\n                  url: GOOGLE_REVOKE_TOKEN_URL + this.token\n                }).then(function (r) {\n                  _this2.configure({\n                    email: _this2.iss,\n                    sub: _this2.sub,\n                    key: _this2.key,\n                    keyFile: _this2.keyFile,\n                    scope: _this2.scope,\n                    additionalClaims: _this2.additionalClaims\n                  });\n                }));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Configure the GoogleToken for re-use.\n     * @param  {object} options Configuration object.\n     */\n\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.keyFile = options.keyFile;\n      this.key = options.key;\n      this.token = this.expiresAt = this.rawToken = null;\n      this.iss = options.email || options.iss;\n      this.sub = options.sub;\n      this.additionalClaims = options.additionalClaims;\n\n      if (typeof options.scope === 'object') {\n        this.scope = options.scope.join(' ');\n      } else {\n        this.scope = options.scope;\n      }\n    }\n    /**\n     * Request the token from Google.\n     */\n\n  }, {\n    key: \"requestToken\",\n    value: function requestToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this3 = this;\n\n        var iat, additionalClaims, payload, signedJWT;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                iat = Math.floor(new Date().getTime() / 1000);\n                additionalClaims = this.additionalClaims || {};\n                payload = Object.assign({\n                  iss: this.iss,\n                  scope: this.scope,\n                  aud: GOOGLE_TOKEN_URL,\n                  exp: iat + 3600,\n                  iat,\n                  sub: this.sub\n                }, additionalClaims);\n                signedJWT = jws.sign({\n                  header: {\n                    alg: 'RS256'\n                  },\n                  payload,\n                  secret: this.key\n                });\n                return _context4.abrupt(\"return\", gaxios_1.request({\n                  method: 'POST',\n                  url: GOOGLE_TOKEN_URL,\n                  data: {\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                    assertion: signedJWT\n                  },\n                  headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                  },\n                  responseType: 'json'\n                }).then(function (r) {\n                  _this3.rawToken = r.data;\n                  _this3.token = r.data.access_token;\n                  _this3.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? null : (iat + r.data.expires_in) * 1000;\n                  return _this3.token;\n                }).catch(function (e) {\n                  _this3.token = null;\n                  _this3.tokenExpires = null;\n                  var body = e.response && e.response.data ? e.response.data : {};\n\n                  if (body.error) {\n                    var desc = body.error_description ? \": \".concat(body.error_description) : '';\n                    e.message = \"\".concat(body.error).concat(desc);\n                  }\n\n                  throw e;\n                }));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return GoogleToken;\n}();\n\nexports.GoogleToken = GoogleToken;","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/gtoken/build/src/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","fs","require","gaxios_1","jws","mime","pify","readFile","GOOGLE_TOKEN_URL","GOOGLE_REVOKE_TOKEN_URL","ErrorWithCode","message","code","Error","getPem","GoogleToken","options","token","expiresAt","rawToken","tokenExpires","configure","now","Date","getTime","callback","getTokenAsync","t","keyFile","mimeType","getType","key","body","JSON","parse","privateKey","private_key","clientEmail","client_email","hasExpired","getCredentials","creds","iss","ensureEmail","requestToken","revokeTokenAsync","request","url","r","email","sub","scope","additionalClaims","join","iat","Math","floor","payload","assign","aud","exp","signedJWT","sign","header","alg","secret","method","data","grant_type","assertion","headers","responseType","access_token","expires_in","undefined","catch","response","error","desc","error_description"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst gaxios_1 = require(\"gaxios\");\nconst jws = require(\"jws\");\nconst mime = require(\"mime\");\nconst pify = require(\"pify\");\nconst readFile = pify(fs.readFile);\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\nclass ErrorWithCode extends Error {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nlet getPem;\nclass GoogleToken {\n    /**\n     * Create a GoogleToken.\n     *\n     * @param options  Configuration object.\n     */\n    constructor(options) {\n        this.token = null;\n        this.expiresAt = null;\n        this.rawToken = null;\n        this.tokenExpires = null;\n        this.configure(options);\n    }\n    /**\n     * Returns whether the token has expired.\n     *\n     * @return true if the token has expired, false otherwise.\n     */\n    hasExpired() {\n        const now = (new Date()).getTime();\n        if (this.token && this.expiresAt) {\n            return now >= this.expiresAt;\n        }\n        else {\n            return true;\n        }\n    }\n    getToken(callback) {\n        if (callback) {\n            this.getTokenAsync().then(t => callback(null, t), callback);\n            return;\n        }\n        return this.getTokenAsync();\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */\n    getCredentials(keyFile) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mimeType = mime.getType(keyFile);\n            switch (mimeType) {\n                case 'application/json': {\n                    // *.json file\n                    const key = yield readFile(keyFile, 'utf8');\n                    const body = JSON.parse(key);\n                    const privateKey = body.private_key;\n                    const clientEmail = body.client_email;\n                    if (!privateKey || !clientEmail) {\n                        throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n                    }\n                    return { privateKey, clientEmail };\n                }\n                case 'application/x-x509-ca-cert': {\n                    // *.pem file\n                    const privateKey = yield readFile(keyFile, 'utf8');\n                    return { privateKey };\n                }\n                case 'application/x-pkcs12': {\n                    // *.p12 file\n                    // NOTE:  The loading of `google-p12-pem` is deferred for performance\n                    // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n                    // bit time to overall module loading, and is likely not frequently\n                    // used.  In a future release, p12 support will be entirely removed.\n                    if (!getPem) {\n                        getPem = (yield Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n                    }\n                    const privateKey = yield getPem(keyFile);\n                    return { privateKey };\n                }\n                default:\n                    throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' +\n                        'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n            }\n        });\n    }\n    getTokenAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.hasExpired()) {\n                return Promise.resolve(this.token);\n            }\n            if (!this.key && !this.keyFile) {\n                throw new Error('No key or keyFile set.');\n            }\n            if (!this.key && this.keyFile) {\n                const creds = yield this.getCredentials(this.keyFile);\n                this.key = creds.privateKey;\n                this.iss = creds.clientEmail || this.iss;\n                if (!creds.clientEmail) {\n                    this.ensureEmail();\n                }\n            }\n            return this.requestToken();\n        });\n    }\n    ensureEmail() {\n        if (!this.iss) {\n            throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n        }\n    }\n    revokeToken(callback) {\n        if (callback) {\n            this.revokeTokenAsync().then(() => callback(), callback);\n            return;\n        }\n        return this.revokeTokenAsync();\n    }\n    revokeTokenAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.token) {\n                throw new Error('No token to revoke.');\n            }\n            return gaxios_1.request({ url: GOOGLE_REVOKE_TOKEN_URL + this.token }).then(r => {\n                this.configure({\n                    email: this.iss,\n                    sub: this.sub,\n                    key: this.key,\n                    keyFile: this.keyFile,\n                    scope: this.scope,\n                    additionalClaims: this.additionalClaims,\n                });\n            });\n        });\n    }\n    /**\n     * Configure the GoogleToken for re-use.\n     * @param  {object} options Configuration object.\n     */\n    configure(options = {}) {\n        this.keyFile = options.keyFile;\n        this.key = options.key;\n        this.token = this.expiresAt = this.rawToken = null;\n        this.iss = options.email || options.iss;\n        this.sub = options.sub;\n        this.additionalClaims = options.additionalClaims;\n        if (typeof options.scope === 'object') {\n            this.scope = options.scope.join(' ');\n        }\n        else {\n            this.scope = options.scope;\n        }\n    }\n    /**\n     * Request the token from Google.\n     */\n    requestToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const iat = Math.floor(new Date().getTime() / 1000);\n            const additionalClaims = this.additionalClaims || {};\n            const payload = Object.assign({\n                iss: this.iss,\n                scope: this.scope,\n                aud: GOOGLE_TOKEN_URL,\n                exp: iat + 3600,\n                iat,\n                sub: this.sub\n            }, additionalClaims);\n            const signedJWT = jws.sign({ header: { alg: 'RS256' }, payload, secret: this.key });\n            return gaxios_1.request({\n                method: 'POST',\n                url: GOOGLE_TOKEN_URL,\n                data: {\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                    assertion: signedJWT\n                },\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                responseType: 'json'\n            })\n                .then(r => {\n                this.rawToken = r.data;\n                this.token = r.data.access_token;\n                this.expiresAt =\n                    (r.data.expires_in === null || r.data.expires_in === undefined) ?\n                        null :\n                        (iat + r.data.expires_in) * 1000;\n                return this.token;\n            })\n                .catch(e => {\n                this.token = null;\n                this.tokenExpires = null;\n                const body = (e.response && e.response.data) ? e.response.data : {};\n                if (body.error) {\n                    const desc = body.error_description ? `: ${body.error_description}` : '';\n                    e.message = `${body.error}${desc}`;\n                }\n                throw e;\n            });\n        });\n    }\n}\nexports.GoogleToken = GoogleToken;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}