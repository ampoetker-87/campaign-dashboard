{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sql_v1beta4 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar sql_v1beta4;\n\n(function (sql_v1beta4) {\n  /**\n   * Cloud SQL Admin API\n   *\n   * API for Cloud SQL database instance management\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const sql = google.sql('v1beta4');\n   *\n   * @namespace sql\n   * @type {Function}\n   * @version v1beta4\n   * @variation v1beta4\n   * @param {object=} options Options for Sql\n   */\n  var Sql = function Sql(options, google) {\n    _classCallCheck(this, Sql);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.backupRuns = new Resource$Backupruns(this.context);\n    this.databases = new Resource$Databases(this.context);\n    this.flags = new Resource$Flags(this.context);\n    this.instances = new Resource$Instances(this.context);\n    this.operations = new Resource$Operations(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.sslCerts = new Resource$Sslcerts(this.context);\n    this.tiers = new Resource$Tiers(this.context);\n    this.users = new Resource$Users(this.context);\n  };\n\n  sql_v1beta4.Sql = Sql;\n\n  var Resource$Backupruns = /*#__PURE__*/function () {\n    function Resource$Backupruns(context) {\n      _classCallCheck(this, Resource$Backupruns);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backupruns, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance', 'id'],\n          pathParams: ['id', 'instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance', 'id'],\n          pathParams: ['id', 'instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backupruns;\n  }();\n\n  sql_v1beta4.Resource$Backupruns = Resource$Backupruns;\n\n  var Resource$Databases = /*#__PURE__*/function () {\n    function Resource$Databases(context) {\n      _classCallCheck(this, Resource$Databases);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Databases, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance', 'database'],\n          pathParams: ['database', 'instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance', 'database'],\n          pathParams: ['database', 'instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance', 'database'],\n          pathParams: ['database', 'instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance', 'database'],\n          pathParams: ['database', 'instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Databases;\n  }();\n\n  sql_v1beta4.Resource$Databases = Resource$Databases;\n\n  var Resource$Flags = /*#__PURE__*/function () {\n    function Resource$Flags(context) {\n      _classCallCheck(this, Resource$Flags);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Flags, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/flags').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Flags;\n  }();\n\n  sql_v1beta4.Resource$Flags = Resource$Flags;\n\n  var Resource$Instances = /*#__PURE__*/function () {\n    function Resource$Instances(context) {\n      _classCallCheck(this, Resource$Instances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instances, [{\n      key: \"addServerCa\",\n      value: function addServerCa(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/addServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"clone\",\n      value: function clone(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/clone').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"demoteMaster\",\n      value: function demoteMaster(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"export\",\n      value: function _export(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"failover\",\n      value: function failover(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/failover').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"import\",\n      value: function _import(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/import').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listServerCas\",\n      value: function listServerCas(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/listServerCas').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"promoteReplica\",\n      value: function promoteReplica(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resetSslConfig\",\n      value: function resetSslConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"restart\",\n      value: function restart(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/restart').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"restoreBackup\",\n      value: function restoreBackup(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"rotateServerCa\",\n      value: function rotateServerCa(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"startReplica\",\n      value: function startReplica(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/startReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"stopReplica\",\n      value: function stopReplica(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/stopReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"truncateLog\",\n      value: function truncateLog(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/truncateLog').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instances;\n  }();\n\n  sql_v1beta4.Resource$Instances = Resource$Instances;\n\n  var Resource$Operations = /*#__PURE__*/function () {\n    function Resource$Operations(context) {\n      _classCallCheck(this, Resource$Operations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Operations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Operations;\n  }();\n\n  sql_v1beta4.Resource$Operations = Resource$Operations;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.instances = new Resource$Projects$Instances(this.context);\n  };\n\n  sql_v1beta4.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Instances = /*#__PURE__*/function () {\n    function Resource$Projects$Instances(context) {\n      _classCallCheck(this, Resource$Projects$Instances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Instances, [{\n      key: \"rescheduleMaintenance\",\n      value: function rescheduleMaintenance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/rescheduleMaintenance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"startExternalSync\",\n      value: function startExternalSync(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/startExternalSync').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"verifyExternalSyncSettings\",\n      value: function verifyExternalSyncSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/verifyExternalSyncSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Instances;\n  }();\n\n  sql_v1beta4.Resource$Projects$Instances = Resource$Projects$Instances;\n\n  var Resource$Sslcerts = /*#__PURE__*/function () {\n    function Resource$Sslcerts(context) {\n      _classCallCheck(this, Resource$Sslcerts);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslcerts, [{\n      key: \"createEphemeral\",\n      value: function createEphemeral(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n          pathParams: ['instance', 'project', 'sha1Fingerprint'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n          pathParams: ['instance', 'project', 'sha1Fingerprint'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslcerts;\n  }();\n\n  sql_v1beta4.Resource$Sslcerts = Resource$Sslcerts;\n\n  var Resource$Tiers = /*#__PURE__*/function () {\n    function Resource$Tiers(context) {\n      _classCallCheck(this, Resource$Tiers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Tiers, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/tiers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Tiers;\n  }();\n\n  sql_v1beta4.Resource$Tiers = Resource$Tiers;\n\n  var Resource$Users = /*#__PURE__*/function () {\n    function Resource$Users(context) {\n      _classCallCheck(this, Resource$Users);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Users, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'instance'],\n          pathParams: ['instance', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users;\n  }();\n\n  sql_v1beta4.Resource$Users = Resource$Users;\n})(sql_v1beta4 = exports.sql_v1beta4 || (exports.sql_v1beta4 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/googleapis/build/src/apis/sql/v1beta4.js"],"names":["Object","defineProperty","exports","value","sql_v1beta4","googleapis_common_1","require","Sql","options","google","context","_options","backupRuns","Resource$Backupruns","databases","Resource$Databases","flags","Resource$Flags","instances","Resource$Instances","operations","Resource$Operations","projects","Resource$Projects","sslCerts","Resource$Sslcerts","tiers","Resource$Tiers","users","Resource$Users","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Projects$Instances"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sql_v1beta4 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar sql_v1beta4;\n(function (sql_v1beta4) {\n    /**\n     * Cloud SQL Admin API\n     *\n     * API for Cloud SQL database instance management\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const sql = google.sql('v1beta4');\n     *\n     * @namespace sql\n     * @type {Function}\n     * @version v1beta4\n     * @variation v1beta4\n     * @param {object=} options Options for Sql\n     */\n    class Sql {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.backupRuns = new Resource$Backupruns(this.context);\n            this.databases = new Resource$Databases(this.context);\n            this.flags = new Resource$Flags(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.sslCerts = new Resource$Sslcerts(this.context);\n            this.tiers = new Resource$Tiers(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    sql_v1beta4.Sql = Sql;\n    class Resource$Backupruns {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'id'],\n                pathParams: ['id', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'id'],\n                pathParams: ['id', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sql_v1beta4.Resource$Backupruns = Resource$Backupruns;\n    class Resource$Databases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sql_v1beta4.Resource$Databases = Resource$Databases;\n    class Resource$Flags {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/flags').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sql_v1beta4.Resource$Flags = Resource$Flags;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addServerCa(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/addServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        clone(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/clone').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        demoteMaster(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        failover(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/failover').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        import(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/import').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listServerCas(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/listServerCas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        promoteReplica(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resetSslConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        restart(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/restart').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        restoreBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        rotateServerCa(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startReplica(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/startReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        stopReplica(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/stopReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        truncateLog(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/truncateLog').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sql_v1beta4.Resource$Instances = Resource$Instances;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sql_v1beta4.Resource$Operations = Resource$Operations;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.instances = new Resource$Projects$Instances(this.context);\n        }\n    }\n    sql_v1beta4.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        rescheduleMaintenance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/rescheduleMaintenance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startExternalSync(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/startExternalSync').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        verifyExternalSyncSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/verifyExternalSyncSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sql_v1beta4.Resource$Projects$Instances = Resource$Projects$Instances;\n    class Resource$Sslcerts {\n        constructor(context) {\n            this.context = context;\n        }\n        createEphemeral(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n                pathParams: ['instance', 'project', 'sha1Fingerprint'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n                pathParams: ['instance', 'project', 'sha1Fingerprint'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sql_v1beta4.Resource$Sslcerts = Resource$Sslcerts;\n    class Resource$Tiers {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/tiers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sql_v1beta4.Resource$Tiers = Resource$Tiers;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sql_v1beta4.Resource$Users = Resource$Users;\n})(sql_v1beta4 = exports.sql_v1beta4 || (exports.sql_v1beta4 = {}));\n//# sourceMappingURL=v1beta4.js.map"]},"metadata":{},"sourceType":"script"}