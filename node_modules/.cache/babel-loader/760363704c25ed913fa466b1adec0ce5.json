{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.admin_directory_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar admin_directory_v1;\n\n(function (admin_directory_v1) {\n  /**\n   * Admin SDK API\n   *\n   * Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const admin = google.admin('directory_v1');\n   * ```\n   */\n  var Admin = function Admin(options, google) {\n    _classCallCheck(this, Admin);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.asps = new Resource$Asps(this.context);\n    this.channels = new Resource$Channels(this.context);\n    this.chromeosdevices = new Resource$Chromeosdevices(this.context);\n    this.customer = new Resource$Customer(this.context);\n    this.customers = new Resource$Customers(this.context);\n    this.domainAliases = new Resource$Domainaliases(this.context);\n    this.domains = new Resource$Domains(this.context);\n    this.groups = new Resource$Groups(this.context);\n    this.members = new Resource$Members(this.context);\n    this.mobiledevices = new Resource$Mobiledevices(this.context);\n    this.orgunits = new Resource$Orgunits(this.context);\n    this.privileges = new Resource$Privileges(this.context);\n    this.resources = new Resource$Resources(this.context);\n    this.roleAssignments = new Resource$Roleassignments(this.context);\n    this.roles = new Resource$Roles(this.context);\n    this.schemas = new Resource$Schemas(this.context);\n    this.tokens = new Resource$Tokens(this.context);\n    this.twoStepVerification = new Resource$Twostepverification(this.context);\n    this.users = new Resource$Users(this.context);\n    this.verificationCodes = new Resource$Verificationcodes(this.context);\n  };\n\n  admin_directory_v1.Admin = Admin;\n\n  var Resource$Asps = /*#__PURE__*/function () {\n    function Resource$Asps(context) {\n      _classCallCheck(this, Resource$Asps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Asps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['userKey', 'codeId'],\n          pathParams: ['codeId', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userKey', 'codeId'],\n          pathParams: ['codeId', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Asps;\n  }();\n\n  admin_directory_v1.Resource$Asps = Resource$Asps;\n\n  var Resource$Channels = /*#__PURE__*/function () {\n    function Resource$Channels(context) {\n      _classCallCheck(this, Resource$Channels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Channels, [{\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory_v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Channels;\n  }();\n\n  admin_directory_v1.Resource$Channels = Resource$Channels;\n\n  var Resource$Chromeosdevices = /*#__PURE__*/function () {\n    function Resource$Chromeosdevices(context) {\n      _classCallCheck(this, Resource$Chromeosdevices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Chromeosdevices, [{\n      key: \"action\",\n      value: function action(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'resourceId'],\n          pathParams: ['customerId', 'resourceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'deviceId'],\n          pathParams: ['customerId', 'deviceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveDevicesToOu\",\n      value: function moveDevicesToOu(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'deviceId'],\n          pathParams: ['customerId', 'deviceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'deviceId'],\n          pathParams: ['customerId', 'deviceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Chromeosdevices;\n  }();\n\n  admin_directory_v1.Resource$Chromeosdevices = Resource$Chromeosdevices;\n\n  var Resource$Customer = function Resource$Customer(context) {\n    _classCallCheck(this, Resource$Customer);\n\n    this.context = context;\n    this.devices = new Resource$Customer$Devices(this.context);\n  };\n\n  admin_directory_v1.Resource$Customer = Resource$Customer;\n\n  var Resource$Customer$Devices = function Resource$Customer$Devices(context) {\n    _classCallCheck(this, Resource$Customer$Devices);\n\n    this.context = context;\n    this.chromeos = new Resource$Customer$Devices$Chromeos(this.context);\n  };\n\n  admin_directory_v1.Resource$Customer$Devices = Resource$Customer$Devices;\n\n  var Resource$Customer$Devices$Chromeos = /*#__PURE__*/function () {\n    function Resource$Customer$Devices$Chromeos(context) {\n      _classCallCheck(this, Resource$Customer$Devices$Chromeos);\n\n      this.context = context;\n      this.commands = new Resource$Customer$Devices$Chromeos$Commands(this.context);\n    }\n\n    _createClass(Resource$Customer$Devices$Chromeos, [{\n      key: \"issueCommand\",\n      value: function issueCommand(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'deviceId'],\n          pathParams: ['customerId', 'deviceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Customer$Devices$Chromeos;\n  }();\n\n  admin_directory_v1.Resource$Customer$Devices$Chromeos = Resource$Customer$Devices$Chromeos;\n\n  var Resource$Customer$Devices$Chromeos$Commands = /*#__PURE__*/function () {\n    function Resource$Customer$Devices$Chromeos$Commands(context) {\n      _classCallCheck(this, Resource$Customer$Devices$Chromeos$Commands);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Customer$Devices$Chromeos$Commands, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'deviceId', 'commandId'],\n          pathParams: ['commandId', 'customerId', 'deviceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Customer$Devices$Chromeos$Commands;\n  }();\n\n  admin_directory_v1.Resource$Customer$Devices$Chromeos$Commands = Resource$Customer$Devices$Chromeos$Commands;\n\n  var Resource$Customers = /*#__PURE__*/function () {\n    function Resource$Customers(context) {\n      _classCallCheck(this, Resource$Customers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Customers, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerKey'],\n          pathParams: ['customerKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['customerKey'],\n          pathParams: ['customerKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['customerKey'],\n          pathParams: ['customerKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Customers;\n  }();\n\n  admin_directory_v1.Resource$Customers = Resource$Customers;\n\n  var Resource$Domainaliases = /*#__PURE__*/function () {\n    function Resource$Domainaliases(context) {\n      _classCallCheck(this, Resource$Domainaliases);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Domainaliases, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customer', 'domainAliasName'],\n          pathParams: ['customer', 'domainAliasName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer', 'domainAliasName'],\n          pathParams: ['customer', 'domainAliasName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Domainaliases;\n  }();\n\n  admin_directory_v1.Resource$Domainaliases = Resource$Domainaliases;\n\n  var Resource$Domains = /*#__PURE__*/function () {\n    function Resource$Domains(context) {\n      _classCallCheck(this, Resource$Domains);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Domains, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customer', 'domainName'],\n          pathParams: ['customer', 'domainName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer', 'domainName'],\n          pathParams: ['customer', 'domainName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Domains;\n  }();\n\n  admin_directory_v1.Resource$Domains = Resource$Domains;\n\n  var Resource$Groups = /*#__PURE__*/function () {\n    function Resource$Groups(context) {\n      _classCallCheck(this, Resource$Groups);\n\n      this.context = context;\n      this.aliases = new Resource$Groups$Aliases(this.context);\n    }\n\n    _createClass(Resource$Groups, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Groups;\n  }();\n\n  admin_directory_v1.Resource$Groups = Resource$Groups;\n\n  var Resource$Groups$Aliases = /*#__PURE__*/function () {\n    function Resource$Groups$Aliases(context) {\n      _classCallCheck(this, Resource$Groups$Aliases);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Groups$Aliases, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['groupKey', 'alias'],\n          pathParams: ['alias', 'groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Groups$Aliases;\n  }();\n\n  admin_directory_v1.Resource$Groups$Aliases = Resource$Groups$Aliases;\n\n  var Resource$Members = /*#__PURE__*/function () {\n    function Resource$Members(context) {\n      _classCallCheck(this, Resource$Members);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Members, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"hasMember\",\n      value: function hasMember(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Members;\n  }();\n\n  admin_directory_v1.Resource$Members = Resource$Members;\n\n  var Resource$Mobiledevices = /*#__PURE__*/function () {\n    function Resource$Mobiledevices(context) {\n      _classCallCheck(this, Resource$Mobiledevices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Mobiledevices, [{\n      key: \"action\",\n      value: function action(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'resourceId'],\n          pathParams: ['customerId', 'resourceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'resourceId'],\n          pathParams: ['customerId', 'resourceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'resourceId'],\n          pathParams: ['customerId', 'resourceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Mobiledevices;\n  }();\n\n  admin_directory_v1.Resource$Mobiledevices = Resource$Mobiledevices;\n\n  var Resource$Orgunits = /*#__PURE__*/function () {\n    function Resource$Orgunits(context) {\n      _classCallCheck(this, Resource$Orgunits);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Orgunits, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId', 'orgUnitPath'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId', 'orgUnitPath'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId', 'orgUnitPath'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId', 'orgUnitPath'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Orgunits;\n  }();\n\n  admin_directory_v1.Resource$Orgunits = Resource$Orgunits;\n\n  var Resource$Privileges = /*#__PURE__*/function () {\n    function Resource$Privileges(context) {\n      _classCallCheck(this, Resource$Privileges);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Privileges, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/ALL/privileges').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Privileges;\n  }();\n\n  admin_directory_v1.Resource$Privileges = Resource$Privileges;\n\n  var Resource$Resources = function Resource$Resources(context) {\n    _classCallCheck(this, Resource$Resources);\n\n    this.context = context;\n    this.buildings = new Resource$Resources$Buildings(this.context);\n    this.calendars = new Resource$Resources$Calendars(this.context);\n    this.features = new Resource$Resources$Features(this.context);\n  };\n\n  admin_directory_v1.Resource$Resources = Resource$Resources;\n\n  var Resource$Resources$Buildings = /*#__PURE__*/function () {\n    function Resource$Resources$Buildings(context) {\n      _classCallCheck(this, Resource$Resources$Buildings);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resources$Buildings, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customer', 'buildingId'],\n          pathParams: ['buildingId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer', 'buildingId'],\n          pathParams: ['buildingId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['customer', 'buildingId'],\n          pathParams: ['buildingId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['customer', 'buildingId'],\n          pathParams: ['buildingId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resources$Buildings;\n  }();\n\n  admin_directory_v1.Resource$Resources$Buildings = Resource$Resources$Buildings;\n\n  var Resource$Resources$Calendars = /*#__PURE__*/function () {\n    function Resource$Resources$Calendars(context) {\n      _classCallCheck(this, Resource$Resources$Calendars);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resources$Calendars, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resources$Calendars;\n  }();\n\n  admin_directory_v1.Resource$Resources$Calendars = Resource$Resources$Calendars;\n\n  var Resource$Resources$Features = /*#__PURE__*/function () {\n    function Resource$Resources$Features(context) {\n      _classCallCheck(this, Resource$Resources$Features);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resources$Features, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customer', 'featureKey'],\n          pathParams: ['customer', 'featureKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer', 'featureKey'],\n          pathParams: ['customer', 'featureKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['customer', 'featureKey'],\n          pathParams: ['customer', 'featureKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"rename\",\n      value: function rename(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customer', 'oldName'],\n          pathParams: ['customer', 'oldName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['customer', 'featureKey'],\n          pathParams: ['customer', 'featureKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resources$Features;\n  }();\n\n  admin_directory_v1.Resource$Resources$Features = Resource$Resources$Features;\n\n  var Resource$Roleassignments = /*#__PURE__*/function () {\n    function Resource$Roleassignments(context) {\n      _classCallCheck(this, Resource$Roleassignments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Roleassignments, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customer', 'roleAssignmentId'],\n          pathParams: ['customer', 'roleAssignmentId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer', 'roleAssignmentId'],\n          pathParams: ['customer', 'roleAssignmentId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Roleassignments;\n  }();\n\n  admin_directory_v1.Resource$Roleassignments = Resource$Roleassignments;\n\n  var Resource$Roles = /*#__PURE__*/function () {\n    function Resource$Roles(context) {\n      _classCallCheck(this, Resource$Roles);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Roles, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customer', 'roleId'],\n          pathParams: ['customer', 'roleId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer', 'roleId'],\n          pathParams: ['customer', 'roleId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['customer', 'roleId'],\n          pathParams: ['customer', 'roleId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['customer', 'roleId'],\n          pathParams: ['customer', 'roleId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Roles;\n  }();\n\n  admin_directory_v1.Resource$Roles = Resource$Roles;\n\n  var Resource$Schemas = /*#__PURE__*/function () {\n    function Resource$Schemas(context) {\n      _classCallCheck(this, Resource$Schemas);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Schemas, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'schemaKey'],\n          pathParams: ['customerId', 'schemaKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'schemaKey'],\n          pathParams: ['customerId', 'schemaKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'schemaKey'],\n          pathParams: ['customerId', 'schemaKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['customerId', 'schemaKey'],\n          pathParams: ['customerId', 'schemaKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Schemas;\n  }();\n\n  admin_directory_v1.Resource$Schemas = Resource$Schemas;\n\n  var Resource$Tokens = /*#__PURE__*/function () {\n    function Resource$Tokens(context) {\n      _classCallCheck(this, Resource$Tokens);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Tokens, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['userKey', 'clientId'],\n          pathParams: ['clientId', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userKey', 'clientId'],\n          pathParams: ['clientId', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Tokens;\n  }();\n\n  admin_directory_v1.Resource$Tokens = Resource$Tokens;\n\n  var Resource$Twostepverification = /*#__PURE__*/function () {\n    function Resource$Twostepverification(context) {\n      _classCallCheck(this, Resource$Twostepverification);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Twostepverification, [{\n      key: \"turnOff\",\n      value: function turnOff(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/twoStepVerification/turnOff').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Twostepverification;\n  }();\n\n  admin_directory_v1.Resource$Twostepverification = Resource$Twostepverification;\n\n  var Resource$Users = /*#__PURE__*/function () {\n    function Resource$Users(context) {\n      _classCallCheck(this, Resource$Users);\n\n      this.context = context;\n      this.aliases = new Resource$Users$Aliases(this.context);\n      this.photos = new Resource$Users$Photos(this.context);\n    }\n\n    _createClass(Resource$Users, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"makeAdmin\",\n      value: function makeAdmin(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/makeAdmin').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"signOut\",\n      value: function signOut(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/signOut').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"undelete\",\n      value: function undelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users;\n  }();\n\n  admin_directory_v1.Resource$Users = Resource$Users;\n\n  var Resource$Users$Aliases = /*#__PURE__*/function () {\n    function Resource$Users$Aliases(context) {\n      _classCallCheck(this, Resource$Users$Aliases);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Users$Aliases, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['userKey', 'alias'],\n          pathParams: ['alias', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users$Aliases;\n  }();\n\n  admin_directory_v1.Resource$Users$Aliases = Resource$Users$Aliases;\n\n  var Resource$Users$Photos = /*#__PURE__*/function () {\n    function Resource$Users$Photos(context) {\n      _classCallCheck(this, Resource$Users$Photos);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Users$Photos, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users$Photos;\n  }();\n\n  admin_directory_v1.Resource$Users$Photos = Resource$Users$Photos;\n\n  var Resource$Verificationcodes = /*#__PURE__*/function () {\n    function Resource$Verificationcodes(context) {\n      _classCallCheck(this, Resource$Verificationcodes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Verificationcodes, [{\n      key: \"generate\",\n      value: function generate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes/generate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"invalidate\",\n      value: function invalidate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes/invalidate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Verificationcodes;\n  }();\n\n  admin_directory_v1.Resource$Verificationcodes = Resource$Verificationcodes;\n})(admin_directory_v1 = exports.admin_directory_v1 || (exports.admin_directory_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/admin/directory_v1.js"],"names":["Object","defineProperty","exports","value","admin_directory_v1","googleapis_common_1","require","Admin","options","google","context","_options","asps","Resource$Asps","channels","Resource$Channels","chromeosdevices","Resource$Chromeosdevices","customer","Resource$Customer","customers","Resource$Customers","domainAliases","Resource$Domainaliases","domains","Resource$Domains","groups","Resource$Groups","members","Resource$Members","mobiledevices","Resource$Mobiledevices","orgunits","Resource$Orgunits","privileges","Resource$Privileges","resources","Resource$Resources","roleAssignments","Resource$Roleassignments","roles","Resource$Roles","schemas","Resource$Schemas","tokens","Resource$Tokens","twoStepVerification","Resource$Twostepverification","users","Resource$Users","verificationCodes","Resource$Verificationcodes","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","devices","Resource$Customer$Devices","chromeos","Resource$Customer$Devices$Chromeos","commands","Resource$Customer$Devices$Chromeos$Commands","aliases","Resource$Groups$Aliases","buildings","Resource$Resources$Buildings","calendars","Resource$Resources$Calendars","features","Resource$Resources$Features","Resource$Users$Aliases","photos","Resource$Users$Photos"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.admin_directory_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar admin_directory_v1;\n(function (admin_directory_v1) {\n    /**\n     * Admin SDK API\n     *\n     * Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const admin = google.admin('directory_v1');\n     * ```\n     */\n    class Admin {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.asps = new Resource$Asps(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.chromeosdevices = new Resource$Chromeosdevices(this.context);\n            this.customer = new Resource$Customer(this.context);\n            this.customers = new Resource$Customers(this.context);\n            this.domainAliases = new Resource$Domainaliases(this.context);\n            this.domains = new Resource$Domains(this.context);\n            this.groups = new Resource$Groups(this.context);\n            this.members = new Resource$Members(this.context);\n            this.mobiledevices = new Resource$Mobiledevices(this.context);\n            this.orgunits = new Resource$Orgunits(this.context);\n            this.privileges = new Resource$Privileges(this.context);\n            this.resources = new Resource$Resources(this.context);\n            this.roleAssignments = new Resource$Roleassignments(this.context);\n            this.roles = new Resource$Roles(this.context);\n            this.schemas = new Resource$Schemas(this.context);\n            this.tokens = new Resource$Tokens(this.context);\n            this.twoStepVerification = new Resource$Twostepverification(this.context);\n            this.users = new Resource$Users(this.context);\n            this.verificationCodes = new Resource$Verificationcodes(this.context);\n        }\n    }\n    admin_directory_v1.Admin = Admin;\n    class Resource$Asps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'codeId'],\n                pathParams: ['codeId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'codeId'],\n                pathParams: ['codeId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Asps = Resource$Asps;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory_v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Channels = Resource$Channels;\n    class Resource$Chromeosdevices {\n        constructor(context) {\n            this.context = context;\n        }\n        action(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveDevicesToOu(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Chromeosdevices = Resource$Chromeosdevices;\n    class Resource$Customer {\n        constructor(context) {\n            this.context = context;\n            this.devices = new Resource$Customer$Devices(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Customer = Resource$Customer;\n    class Resource$Customer$Devices {\n        constructor(context) {\n            this.context = context;\n            this.chromeos = new Resource$Customer$Devices$Chromeos(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Customer$Devices = Resource$Customer$Devices;\n    class Resource$Customer$Devices$Chromeos {\n        constructor(context) {\n            this.context = context;\n            this.commands = new Resource$Customer$Devices$Chromeos$Commands(this.context);\n        }\n        issueCommand(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customer$Devices$Chromeos = Resource$Customer$Devices$Chromeos;\n    class Resource$Customer$Devices$Chromeos$Commands {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId', 'commandId'],\n                pathParams: ['commandId', 'customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customer$Devices$Chromeos$Commands = Resource$Customer$Devices$Chromeos$Commands;\n    class Resource$Customers {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customers = Resource$Customers;\n    class Resource$Domainaliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainAliasName'],\n                pathParams: ['customer', 'domainAliasName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainAliasName'],\n                pathParams: ['customer', 'domainAliasName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Domainaliases = Resource$Domainaliases;\n    class Resource$Domains {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainName'],\n                pathParams: ['customer', 'domainName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainName'],\n                pathParams: ['customer', 'domainName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Domains = Resource$Domains;\n    class Resource$Groups {\n        constructor(context) {\n            this.context = context;\n            this.aliases = new Resource$Groups$Aliases(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Groups = Resource$Groups;\n    class Resource$Groups$Aliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'alias'],\n                pathParams: ['alias', 'groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Groups$Aliases = Resource$Groups$Aliases;\n    class Resource$Members {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        hasMember(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Members = Resource$Members;\n    class Resource$Mobiledevices {\n        constructor(context) {\n            this.context = context;\n        }\n        action(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Mobiledevices = Resource$Mobiledevices;\n    class Resource$Orgunits {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Orgunits = Resource$Orgunits;\n    class Resource$Privileges {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roles/ALL/privileges').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Privileges = Resource$Privileges;\n    class Resource$Resources {\n        constructor(context) {\n            this.context = context;\n            this.buildings = new Resource$Resources$Buildings(this.context);\n            this.calendars = new Resource$Resources$Calendars(this.context);\n            this.features = new Resource$Resources$Features(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Resources = Resource$Resources;\n    class Resource$Resources$Buildings {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Buildings = Resource$Resources$Buildings;\n    class Resource$Resources$Calendars {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Calendars = Resource$Resources$Calendars;\n    class Resource$Resources$Features {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        rename(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer', 'oldName'],\n                pathParams: ['customer', 'oldName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Features = Resource$Resources$Features;\n    class Resource$Roleassignments {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleAssignmentId'],\n                pathParams: ['customer', 'roleAssignmentId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleAssignmentId'],\n                pathParams: ['customer', 'roleAssignmentId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Roleassignments = Resource$Roleassignments;\n    class Resource$Roles {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Roles = Resource$Roles;\n    class Resource$Schemas {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Schemas = Resource$Schemas;\n    class Resource$Tokens {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'clientId'],\n                pathParams: ['clientId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'clientId'],\n                pathParams: ['clientId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Tokens = Resource$Tokens;\n    class Resource$Twostepverification {\n        constructor(context) {\n            this.context = context;\n        }\n        turnOff(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/twoStepVerification/turnOff').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Twostepverification = Resource$Twostepverification;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n            this.aliases = new Resource$Users$Aliases(this.context);\n            this.photos = new Resource$Users$Photos(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        makeAdmin(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/makeAdmin').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        signOut(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/signOut').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        undelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users = Resource$Users;\n    class Resource$Users$Aliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'alias'],\n                pathParams: ['alias', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users$Aliases = Resource$Users$Aliases;\n    class Resource$Users$Photos {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users$Photos = Resource$Users$Photos;\n    class Resource$Verificationcodes {\n        constructor(context) {\n            this.context = context;\n        }\n        generate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/verificationCodes/generate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/verificationCodes/invalidate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Verificationcodes = Resource$Verificationcodes;\n})(admin_directory_v1 = exports.admin_directory_v1 || (exports.admin_directory_v1 = {}));\n//# sourceMappingURL=directory_v1.js.map"]},"metadata":{},"sourceType":"script"}