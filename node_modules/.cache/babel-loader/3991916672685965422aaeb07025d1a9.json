{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar compute_beta;\n\n(function (compute_beta) {\n  /**\n   * Compute Engine API\n   *\n   * Creates and runs virtual machines on Google Cloud Platform.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const compute = google.compute('beta');\n   *\n   * @namespace compute\n   * @type {Function}\n   * @version beta\n   * @variation beta\n   * @param {object=} options Options for Compute\n   */\n  var Compute = function Compute(options, google) {\n    _classCallCheck(this, Compute);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n    this.addresses = new Resource$Addresses(this.context);\n    this.autoscalers = new Resource$Autoscalers(this.context);\n    this.backendBuckets = new Resource$Backendbuckets(this.context);\n    this.backendServices = new Resource$Backendservices(this.context);\n    this.disks = new Resource$Disks(this.context);\n    this.diskTypes = new Resource$Disktypes(this.context);\n    this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n    this.firewalls = new Resource$Firewalls(this.context);\n    this.forwardingRules = new Resource$Forwardingrules(this.context);\n    this.globalAddresses = new Resource$Globaladdresses(this.context);\n    this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n    this.globalOperations = new Resource$Globaloperations(this.context);\n    this.healthChecks = new Resource$Healthchecks(this.context);\n    this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n    this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n    this.images = new Resource$Images(this.context);\n    this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n    this.instanceGroups = new Resource$Instancegroups(this.context);\n    this.instances = new Resource$Instances(this.context);\n    this.instanceTemplates = new Resource$Instancetemplates(this.context);\n    this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n    this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n    this.interconnects = new Resource$Interconnects(this.context);\n    this.licenseCodes = new Resource$Licensecodes(this.context);\n    this.licenses = new Resource$Licenses(this.context);\n    this.machineTypes = new Resource$Machinetypes(this.context);\n    this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n    this.networks = new Resource$Networks(this.context);\n    this.nodeGroups = new Resource$Nodegroups(this.context);\n    this.nodeTemplates = new Resource$Nodetemplates(this.context);\n    this.nodeTypes = new Resource$Nodetypes(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n    this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n    this.regionCommitments = new Resource$Regioncommitments(this.context);\n    this.regionDisks = new Resource$Regiondisks(this.context);\n    this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n    this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n    this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n    this.regionOperations = new Resource$Regionoperations(this.context);\n    this.regions = new Resource$Regions(this.context);\n    this.reservations = new Resource$Reservations(this.context);\n    this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n    this.routers = new Resource$Routers(this.context);\n    this.routes = new Resource$Routes(this.context);\n    this.securityPolicies = new Resource$Securitypolicies(this.context);\n    this.snapshots = new Resource$Snapshots(this.context);\n    this.sslCertificates = new Resource$Sslcertificates(this.context);\n    this.sslPolicies = new Resource$Sslpolicies(this.context);\n    this.subnetworks = new Resource$Subnetworks(this.context);\n    this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n    this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n    this.targetInstances = new Resource$Targetinstances(this.context);\n    this.targetPools = new Resource$Targetpools(this.context);\n    this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n    this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n    this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n    this.urlMaps = new Resource$Urlmaps(this.context);\n    this.vpnGateways = new Resource$Vpngateways(this.context);\n    this.vpnTunnels = new Resource$Vpntunnels(this.context);\n    this.zoneOperations = new Resource$Zoneoperations(this.context);\n    this.zones = new Resource$Zones(this.context);\n  };\n\n  compute_beta.Compute = Compute;\n\n  var Resource$Acceleratortypes = /*#__PURE__*/function () {\n    function Resource$Acceleratortypes(context) {\n      _classCallCheck(this, Resource$Acceleratortypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Acceleratortypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'acceleratorType'],\n          pathParams: ['acceleratorType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Acceleratortypes;\n  }();\n\n  compute_beta.Resource$Acceleratortypes = Resource$Acceleratortypes;\n\n  var Resource$Addresses = /*#__PURE__*/function () {\n    function Resource$Addresses(context) {\n      _classCallCheck(this, Resource$Addresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Addresses, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Addresses;\n  }();\n\n  compute_beta.Resource$Addresses = Resource$Addresses;\n\n  var Resource$Autoscalers = /*#__PURE__*/function () {\n    function Resource$Autoscalers(context) {\n      _classCallCheck(this, Resource$Autoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Autoscalers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Autoscalers;\n  }();\n\n  compute_beta.Resource$Autoscalers = Resource$Autoscalers;\n\n  var Resource$Backendbuckets = /*#__PURE__*/function () {\n    function Resource$Backendbuckets(context) {\n      _classCallCheck(this, Resource$Backendbuckets);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendbuckets, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket', 'keyName'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendbuckets;\n  }();\n\n  compute_beta.Resource$Backendbuckets = Resource$Backendbuckets;\n\n  var Resource$Backendservices = /*#__PURE__*/function () {\n    function Resource$Backendservices(context) {\n      _classCallCheck(this, Resource$Backendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendservices, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService', 'keyName'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSecurityPolicy\",\n      value: function setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendservices;\n  }();\n\n  compute_beta.Resource$Backendservices = Resource$Backendservices;\n\n  var Resource$Disks = /*#__PURE__*/function () {\n    function Resource$Disks(context) {\n      _classCallCheck(this, Resource$Disks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disks, [{\n      key: \"addResourcePolicies\",\n      value: function addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeResourcePolicies\",\n      value: function removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disks;\n  }();\n\n  compute_beta.Resource$Disks = Resource$Disks;\n\n  var Resource$Disktypes = /*#__PURE__*/function () {\n    function Resource$Disktypes(context) {\n      _classCallCheck(this, Resource$Disktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disktypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'diskType'],\n          pathParams: ['diskType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disktypes;\n  }();\n\n  compute_beta.Resource$Disktypes = Resource$Disktypes;\n\n  var Resource$Externalvpngateways = /*#__PURE__*/function () {\n    function Resource$Externalvpngateways(context) {\n      _classCallCheck(this, Resource$Externalvpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Externalvpngateways, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'externalVpnGateway'],\n          pathParams: ['externalVpnGateway', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'externalVpnGateway'],\n          pathParams: ['externalVpnGateway', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Externalvpngateways;\n  }();\n\n  compute_beta.Resource$Externalvpngateways = Resource$Externalvpngateways;\n\n  var Resource$Firewalls = /*#__PURE__*/function () {\n    function Resource$Firewalls(context) {\n      _classCallCheck(this, Resource$Firewalls);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Firewalls, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Firewalls;\n  }();\n\n  compute_beta.Resource$Firewalls = Resource$Firewalls;\n\n  var Resource$Forwardingrules = /*#__PURE__*/function () {\n    function Resource$Forwardingrules(context) {\n      _classCallCheck(this, Resource$Forwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Forwardingrules, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Forwardingrules;\n  }();\n\n  compute_beta.Resource$Forwardingrules = Resource$Forwardingrules;\n\n  var Resource$Globaladdresses = /*#__PURE__*/function () {\n    function Resource$Globaladdresses(context) {\n      _classCallCheck(this, Resource$Globaladdresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaladdresses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaladdresses;\n  }();\n\n  compute_beta.Resource$Globaladdresses = Resource$Globaladdresses;\n\n  var Resource$Globalforwardingrules = /*#__PURE__*/function () {\n    function Resource$Globalforwardingrules(context) {\n      _classCallCheck(this, Resource$Globalforwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globalforwardingrules, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globalforwardingrules;\n  }();\n\n  compute_beta.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n\n  var Resource$Globaloperations = /*#__PURE__*/function () {\n    function Resource$Globaloperations(context) {\n      _classCallCheck(this, Resource$Globaloperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaloperations, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaloperations;\n  }();\n\n  compute_beta.Resource$Globaloperations = Resource$Globaloperations;\n\n  var Resource$Healthchecks = /*#__PURE__*/function () {\n    function Resource$Healthchecks(context) {\n      _classCallCheck(this, Resource$Healthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Healthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Healthchecks;\n  }();\n\n  compute_beta.Resource$Healthchecks = Resource$Healthchecks;\n\n  var Resource$Httphealthchecks = /*#__PURE__*/function () {\n    function Resource$Httphealthchecks(context) {\n      _classCallCheck(this, Resource$Httphealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httphealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httphealthchecks;\n  }();\n\n  compute_beta.Resource$Httphealthchecks = Resource$Httphealthchecks;\n\n  var Resource$Httpshealthchecks = /*#__PURE__*/function () {\n    function Resource$Httpshealthchecks(context) {\n      _classCallCheck(this, Resource$Httpshealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httpshealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httpshealthchecks;\n  }();\n\n  compute_beta.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n\n  var Resource$Images = /*#__PURE__*/function () {\n    function Resource$Images(context) {\n      _classCallCheck(this, Resource$Images);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Images, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deprecate\",\n      value: function deprecate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getFromFamily\",\n      value: function getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'family'],\n          pathParams: ['family', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Images;\n  }();\n\n  compute_beta.Resource$Images = Resource$Images;\n\n  var Resource$Instancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Instancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Instancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"applyUpdatesToInstances\",\n      value: function applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resizeAdvanced\",\n      value: function resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAutoHealingPolicies\",\n      value: function setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroupmanagers;\n  }();\n\n  compute_beta.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n\n  var Resource$Instancegroups = /*#__PURE__*/function () {\n    function Resource$Instancegroups(context) {\n      _classCallCheck(this, Resource$Instancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroups, [{\n      key: \"addInstances\",\n      value: function addInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstances\",\n      value: function removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroups;\n  }();\n\n  compute_beta.Resource$Instancegroups = Resource$Instancegroups;\n\n  var Resource$Instances = /*#__PURE__*/function () {\n    function Resource$Instances(context) {\n      _classCallCheck(this, Resource$Instances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instances, [{\n      key: \"addAccessConfig\",\n      value: function addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachDisk\",\n      value: function attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteAccessConfig\",\n      value: function deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachDisk\",\n      value: function detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getGuestAttributes\",\n      value: function getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getSerialPortOutput\",\n      value: function getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getShieldedInstanceIdentity\",\n      value: function getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getShieldedVmIdentity\",\n      value: function getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listReferrers\",\n      value: function listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reset\",\n      value: function reset(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resume\",\n      value: function resume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDeletionProtection\",\n      value: function setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDiskAutoDelete\",\n      value: function setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineResources\",\n      value: function setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineType\",\n      value: function setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMetadata\",\n      value: function setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMinCpuPlatform\",\n      value: function setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setScheduling\",\n      value: function setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setServiceAccount\",\n      value: function setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setShieldedInstanceIntegrityPolicy\",\n      value: function setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setShieldedVmIntegrityPolicy\",\n      value: function setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTags\",\n      value: function setTags(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"simulateMaintenanceEvent\",\n      value: function simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"start\",\n      value: function start(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"startWithEncryptionKey\",\n      value: function startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"suspend\",\n      value: function suspend(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateAccessConfig\",\n      value: function updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateDisplayDevice\",\n      value: function updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateNetworkInterface\",\n      value: function updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateShieldedInstanceConfig\",\n      value: function updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateShieldedVmConfig\",\n      value: function updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instances;\n  }();\n\n  compute_beta.Resource$Instances = Resource$Instances;\n\n  var Resource$Instancetemplates = /*#__PURE__*/function () {\n    function Resource$Instancetemplates(context) {\n      _classCallCheck(this, Resource$Instancetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancetemplates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancetemplates;\n  }();\n\n  compute_beta.Resource$Instancetemplates = Resource$Instancetemplates;\n\n  var Resource$Interconnectattachments = /*#__PURE__*/function () {\n    function Resource$Interconnectattachments(context) {\n      _classCallCheck(this, Resource$Interconnectattachments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectattachments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectattachments;\n  }();\n\n  compute_beta.Resource$Interconnectattachments = Resource$Interconnectattachments;\n\n  var Resource$Interconnectlocations = /*#__PURE__*/function () {\n    function Resource$Interconnectlocations(context) {\n      _classCallCheck(this, Resource$Interconnectlocations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectlocations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnectLocation'],\n          pathParams: ['interconnectLocation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectlocations;\n  }();\n\n  compute_beta.Resource$Interconnectlocations = Resource$Interconnectlocations;\n\n  var Resource$Interconnects = /*#__PURE__*/function () {\n    function Resource$Interconnects(context) {\n      _classCallCheck(this, Resource$Interconnects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnects, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getDiagnostics\",\n      value: function getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnects;\n  }();\n\n  compute_beta.Resource$Interconnects = Resource$Interconnects;\n\n  var Resource$Licensecodes = /*#__PURE__*/function () {\n    function Resource$Licensecodes(context) {\n      _classCallCheck(this, Resource$Licensecodes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licensecodes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'licenseCode'],\n          pathParams: ['licenseCode', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licensecodes;\n  }();\n\n  compute_beta.Resource$Licensecodes = Resource$Licensecodes;\n\n  var Resource$Licenses = /*#__PURE__*/function () {\n    function Resource$Licenses(context) {\n      _classCallCheck(this, Resource$Licenses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licenses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licenses;\n  }();\n\n  compute_beta.Resource$Licenses = Resource$Licenses;\n\n  var Resource$Machinetypes = /*#__PURE__*/function () {\n    function Resource$Machinetypes(context) {\n      _classCallCheck(this, Resource$Machinetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Machinetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'machineType'],\n          pathParams: ['machineType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Machinetypes;\n  }();\n\n  compute_beta.Resource$Machinetypes = Resource$Machinetypes;\n\n  var Resource$Networkendpointgroups = /*#__PURE__*/function () {\n    function Resource$Networkendpointgroups(context) {\n      _classCallCheck(this, Resource$Networkendpointgroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networkendpointgroups, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachNetworkEndpoints\",\n      value: function attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachNetworkEndpoints\",\n      value: function detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNetworkEndpoints\",\n      value: function listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networkendpointgroups;\n  }();\n\n  compute_beta.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n\n  var Resource$Networks = /*#__PURE__*/function () {\n    function Resource$Networks(context) {\n      _classCallCheck(this, Resource$Networks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networks, [{\n      key: \"addPeering\",\n      value: function addPeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPeeringRoutes\",\n      value: function listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removePeering\",\n      value: function removePeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"switchToCustomMode\",\n      value: function switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updatePeering\",\n      value: function updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networks;\n  }();\n\n  compute_beta.Resource$Networks = Resource$Networks;\n\n  var Resource$Nodegroups = /*#__PURE__*/function () {\n    function Resource$Nodegroups(context) {\n      _classCallCheck(this, Resource$Nodegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodegroups, [{\n      key: \"addNodes\",\n      value: function addNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteNodes\",\n      value: function deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'initialNodeCount'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNodes\",\n      value: function listNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNodeTemplate\",\n      value: function setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodegroups;\n  }();\n\n  compute_beta.Resource$Nodegroups = Resource$Nodegroups;\n\n  var Resource$Nodetemplates = /*#__PURE__*/function () {\n    function Resource$Nodetemplates(context) {\n      _classCallCheck(this, Resource$Nodetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetemplates, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetemplates;\n  }();\n\n  compute_beta.Resource$Nodetemplates = Resource$Nodetemplates;\n\n  var Resource$Nodetypes = /*#__PURE__*/function () {\n    function Resource$Nodetypes(context) {\n      _classCallCheck(this, Resource$Nodetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'nodeType'],\n          pathParams: ['nodeType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetypes;\n  }();\n\n  compute_beta.Resource$Nodetypes = Resource$Nodetypes;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"disableXpnHost\",\n      value: function disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"disableXpnResource\",\n      value: function disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnHost\",\n      value: function enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnResource\",\n      value: function enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnHost\",\n      value: function getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnResources\",\n      value: function getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listXpnHosts\",\n      value: function listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveDisk\",\n      value: function moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveInstance\",\n      value: function moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setCommonInstanceMetadata\",\n      value: function setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDefaultNetworkTier\",\n      value: function setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUsageExportBucket\",\n      value: function setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  compute_beta.Resource$Projects = Resource$Projects;\n\n  var Resource$Regionautoscalers = /*#__PURE__*/function () {\n    function Resource$Regionautoscalers(context) {\n      _classCallCheck(this, Resource$Regionautoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionautoscalers, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionautoscalers;\n  }();\n\n  compute_beta.Resource$Regionautoscalers = Resource$Regionautoscalers;\n\n  var Resource$Regionbackendservices = /*#__PURE__*/function () {\n    function Resource$Regionbackendservices(context) {\n      _classCallCheck(this, Resource$Regionbackendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionbackendservices, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionbackendservices;\n  }();\n\n  compute_beta.Resource$Regionbackendservices = Resource$Regionbackendservices;\n\n  var Resource$Regioncommitments = /*#__PURE__*/function () {\n    function Resource$Regioncommitments(context) {\n      _classCallCheck(this, Resource$Regioncommitments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioncommitments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'commitment'],\n          pathParams: ['commitment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateReservations\",\n      value: function updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'commitment'],\n          pathParams: ['commitment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioncommitments;\n  }();\n\n  compute_beta.Resource$Regioncommitments = Resource$Regioncommitments;\n\n  var Resource$Regiondisks = /*#__PURE__*/function () {\n    function Resource$Regiondisks(context) {\n      _classCallCheck(this, Resource$Regiondisks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisks, [{\n      key: \"addResourcePolicies\",\n      value: function addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeResourcePolicies\",\n      value: function removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisks;\n  }();\n\n  compute_beta.Resource$Regiondisks = Resource$Regiondisks;\n\n  var Resource$Regiondisktypes = /*#__PURE__*/function () {\n    function Resource$Regiondisktypes(context) {\n      _classCallCheck(this, Resource$Regiondisktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisktypes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'diskType'],\n          pathParams: ['diskType', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisktypes;\n  }();\n\n  compute_beta.Resource$Regiondisktypes = Resource$Regiondisktypes;\n\n  var Resource$Regioninstancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Regioninstancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"applyUpdatesToInstances\",\n      value: function applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setAutoHealingPolicies\",\n      value: function setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroupmanagers;\n  }();\n\n  compute_beta.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n\n  var Resource$Regioninstancegroups = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroups(context) {\n      _classCallCheck(this, Resource$Regioninstancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroups, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroups;\n  }();\n\n  compute_beta.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n\n  var Resource$Regionoperations = /*#__PURE__*/function () {\n    function Resource$Regionoperations(context) {\n      _classCallCheck(this, Resource$Regionoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionoperations;\n  }();\n\n  compute_beta.Resource$Regionoperations = Resource$Regionoperations;\n\n  var Resource$Regions = /*#__PURE__*/function () {\n    function Resource$Regions(context) {\n      _classCallCheck(this, Resource$Regions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regions, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regions;\n  }();\n\n  compute_beta.Resource$Regions = Resource$Regions;\n\n  var Resource$Reservations = /*#__PURE__*/function () {\n    function Resource$Reservations(context) {\n      _classCallCheck(this, Resource$Reservations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Reservations, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'reservation'],\n          pathParams: ['project', 'reservation', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'reservation'],\n          pathParams: ['project', 'reservation', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'reservation'],\n          pathParams: ['project', 'reservation', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Reservations;\n  }();\n\n  compute_beta.Resource$Reservations = Resource$Reservations;\n\n  var Resource$Resourcepolicies = /*#__PURE__*/function () {\n    function Resource$Resourcepolicies(context) {\n      _classCallCheck(this, Resource$Resourcepolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resourcepolicies, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resourcePolicy'],\n          pathParams: ['project', 'region', 'resourcePolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resourcePolicy'],\n          pathParams: ['project', 'region', 'resourcePolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resourcepolicies;\n  }();\n\n  compute_beta.Resource$Resourcepolicies = Resource$Resourcepolicies;\n\n  var Resource$Routers = /*#__PURE__*/function () {\n    function Resource$Routers(context) {\n      _classCallCheck(this, Resource$Routers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getNatMappingInfo\",\n      value: function getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRouterStatus\",\n      value: function getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"preview\",\n      value: function preview(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routers;\n  }();\n\n  compute_beta.Resource$Routers = Resource$Routers;\n\n  var Resource$Routes = /*#__PURE__*/function () {\n    function Resource$Routes(context) {\n      _classCallCheck(this, Resource$Routes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routes, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routes;\n  }();\n\n  compute_beta.Resource$Routes = Resource$Routes;\n\n  var Resource$Securitypolicies = /*#__PURE__*/function () {\n    function Resource$Securitypolicies(context) {\n      _classCallCheck(this, Resource$Securitypolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Securitypolicies, [{\n      key: \"addRule\",\n      value: function addRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRule\",\n      value: function getRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listPreconfiguredExpressionSets\",\n      value: function listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchRule\",\n      value: function patchRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeRule\",\n      value: function removeRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Securitypolicies;\n  }();\n\n  compute_beta.Resource$Securitypolicies = Resource$Securitypolicies;\n\n  var Resource$Snapshots = /*#__PURE__*/function () {\n    function Resource$Snapshots(context) {\n      _classCallCheck(this, Resource$Snapshots);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Snapshots, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Snapshots;\n  }();\n\n  compute_beta.Resource$Snapshots = Resource$Snapshots;\n\n  var Resource$Sslcertificates = /*#__PURE__*/function () {\n    function Resource$Sslcertificates(context) {\n      _classCallCheck(this, Resource$Sslcertificates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslcertificates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslcertificates;\n  }();\n\n  compute_beta.Resource$Sslcertificates = Resource$Sslcertificates;\n\n  var Resource$Sslpolicies = /*#__PURE__*/function () {\n    function Resource$Sslpolicies(context) {\n      _classCallCheck(this, Resource$Sslpolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslpolicies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listAvailableFeatures\",\n      value: function listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslpolicies;\n  }();\n\n  compute_beta.Resource$Sslpolicies = Resource$Sslpolicies;\n\n  var Resource$Subnetworks = /*#__PURE__*/function () {\n    function Resource$Subnetworks(context) {\n      _classCallCheck(this, Resource$Subnetworks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Subnetworks, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"expandIpCidrRange\",\n      value: function expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listUsable\",\n      value: function listUsable(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setPrivateIpGoogleAccess\",\n      value: function setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Subnetworks;\n  }();\n\n  compute_beta.Resource$Subnetworks = Resource$Subnetworks;\n\n  var Resource$Targethttpproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpproxies(context) {\n      _classCallCheck(this, Resource$Targethttpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpproxies;\n  }();\n\n  compute_beta.Resource$Targethttpproxies = Resource$Targethttpproxies;\n\n  var Resource$Targethttpsproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpsproxies(context) {\n      _classCallCheck(this, Resource$Targethttpsproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpsproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setQuicOverride\",\n      value: function setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpsproxies;\n  }();\n\n  compute_beta.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n\n  var Resource$Targetinstances = /*#__PURE__*/function () {\n    function Resource$Targetinstances(context) {\n      _classCallCheck(this, Resource$Targetinstances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetinstances, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetinstances;\n  }();\n\n  compute_beta.Resource$Targetinstances = Resource$Targetinstances;\n\n  var Resource$Targetpools = /*#__PURE__*/function () {\n    function Resource$Targetpools(context) {\n      _classCallCheck(this, Resource$Targetpools);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetpools, [{\n      key: \"addHealthCheck\",\n      value: function addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"addInstance\",\n      value: function addInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeHealthCheck\",\n      value: function removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstance\",\n      value: function removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackup\",\n      value: function setBackup(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetpools;\n  }();\n\n  compute_beta.Resource$Targetpools = Resource$Targetpools;\n\n  var Resource$Targetsslproxies = /*#__PURE__*/function () {\n    function Resource$Targetsslproxies(context) {\n      _classCallCheck(this, Resource$Targetsslproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetsslproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetsslproxies;\n  }();\n\n  compute_beta.Resource$Targetsslproxies = Resource$Targetsslproxies;\n\n  var Resource$Targettcpproxies = /*#__PURE__*/function () {\n    function Resource$Targettcpproxies(context) {\n      _classCallCheck(this, Resource$Targettcpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targettcpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targettcpproxies;\n  }();\n\n  compute_beta.Resource$Targettcpproxies = Resource$Targettcpproxies;\n\n  var Resource$Targetvpngateways = /*#__PURE__*/function () {\n    function Resource$Targetvpngateways(context) {\n      _classCallCheck(this, Resource$Targetvpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetvpngateways, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetvpngateways;\n  }();\n\n  compute_beta.Resource$Targetvpngateways = Resource$Targetvpngateways;\n\n  var Resource$Urlmaps = /*#__PURE__*/function () {\n    function Resource$Urlmaps(context) {\n      _classCallCheck(this, Resource$Urlmaps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Urlmaps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"invalidateCache\",\n      value: function invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Urlmaps;\n  }();\n\n  compute_beta.Resource$Urlmaps = Resource$Urlmaps;\n\n  var Resource$Vpngateways = /*#__PURE__*/function () {\n    function Resource$Vpngateways(context) {\n      _classCallCheck(this, Resource$Vpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Vpngateways, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnGateway'],\n          pathParams: ['project', 'region', 'vpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnGateway'],\n          pathParams: ['project', 'region', 'vpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getStatus\",\n      value: function getStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnGateway'],\n          pathParams: ['project', 'region', 'vpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Vpngateways;\n  }();\n\n  compute_beta.Resource$Vpngateways = Resource$Vpngateways;\n\n  var Resource$Vpntunnels = /*#__PURE__*/function () {\n    function Resource$Vpntunnels(context) {\n      _classCallCheck(this, Resource$Vpntunnels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Vpntunnels, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Vpntunnels;\n  }();\n\n  compute_beta.Resource$Vpntunnels = Resource$Vpntunnels;\n\n  var Resource$Zoneoperations = /*#__PURE__*/function () {\n    function Resource$Zoneoperations(context) {\n      _classCallCheck(this, Resource$Zoneoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zoneoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zoneoperations;\n  }();\n\n  compute_beta.Resource$Zoneoperations = Resource$Zoneoperations;\n\n  var Resource$Zones = /*#__PURE__*/function () {\n    function Resource$Zones(context) {\n      _classCallCheck(this, Resource$Zones);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zones, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/beta/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zones;\n  }();\n\n  compute_beta.Resource$Zones = Resource$Zones;\n})(compute_beta = exports.compute_beta || (exports.compute_beta = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/compute/beta.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","compute_beta","Compute","options","google","context","_options","acceleratorTypes","Resource$Acceleratortypes","addresses","Resource$Addresses","autoscalers","Resource$Autoscalers","backendBuckets","Resource$Backendbuckets","backendServices","Resource$Backendservices","disks","Resource$Disks","diskTypes","Resource$Disktypes","externalVpnGateways","Resource$Externalvpngateways","firewalls","Resource$Firewalls","forwardingRules","Resource$Forwardingrules","globalAddresses","Resource$Globaladdresses","globalForwardingRules","Resource$Globalforwardingrules","globalOperations","Resource$Globaloperations","healthChecks","Resource$Healthchecks","httpHealthChecks","Resource$Httphealthchecks","httpsHealthChecks","Resource$Httpshealthchecks","images","Resource$Images","instanceGroupManagers","Resource$Instancegroupmanagers","instanceGroups","Resource$Instancegroups","instances","Resource$Instances","instanceTemplates","Resource$Instancetemplates","interconnectAttachments","Resource$Interconnectattachments","interconnectLocations","Resource$Interconnectlocations","interconnects","Resource$Interconnects","licenseCodes","Resource$Licensecodes","licenses","Resource$Licenses","machineTypes","Resource$Machinetypes","networkEndpointGroups","Resource$Networkendpointgroups","networks","Resource$Networks","nodeGroups","Resource$Nodegroups","nodeTemplates","Resource$Nodetemplates","nodeTypes","Resource$Nodetypes","projects","Resource$Projects","regionAutoscalers","Resource$Regionautoscalers","regionBackendServices","Resource$Regionbackendservices","regionCommitments","Resource$Regioncommitments","regionDisks","Resource$Regiondisks","regionDiskTypes","Resource$Regiondisktypes","regionInstanceGroupManagers","Resource$Regioninstancegroupmanagers","regionInstanceGroups","Resource$Regioninstancegroups","regionOperations","Resource$Regionoperations","regions","Resource$Regions","reservations","Resource$Reservations","resourcePolicies","Resource$Resourcepolicies","routers","Resource$Routers","routes","Resource$Routes","securityPolicies","Resource$Securitypolicies","snapshots","Resource$Snapshots","sslCertificates","Resource$Sslcertificates","sslPolicies","Resource$Sslpolicies","subnetworks","Resource$Subnetworks","targetHttpProxies","Resource$Targethttpproxies","targetHttpsProxies","Resource$Targethttpsproxies","targetInstances","Resource$Targetinstances","targetPools","Resource$Targetpools","targetSslProxies","Resource$Targetsslproxies","targetTcpProxies","Resource$Targettcpproxies","targetVpnGateways","Resource$Targetvpngateways","urlMaps","Resource$Urlmaps","vpnGateways","Resource$Vpngateways","vpnTunnels","Resource$Vpntunnels","zoneOperations","Resource$Zoneoperations","zones","Resource$Zones","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar compute_beta;\n(function (compute_beta) {\n    /**\n     * Compute Engine API\n     *\n     * Creates and runs virtual machines on Google Cloud Platform.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const compute = google.compute('beta');\n     *\n     * @namespace compute\n     * @type {Function}\n     * @version beta\n     * @variation beta\n     * @param {object=} options Options for Compute\n     */\n    class Compute {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n            this.addresses = new Resource$Addresses(this.context);\n            this.autoscalers = new Resource$Autoscalers(this.context);\n            this.backendBuckets = new Resource$Backendbuckets(this.context);\n            this.backendServices = new Resource$Backendservices(this.context);\n            this.disks = new Resource$Disks(this.context);\n            this.diskTypes = new Resource$Disktypes(this.context);\n            this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n            this.firewalls = new Resource$Firewalls(this.context);\n            this.forwardingRules = new Resource$Forwardingrules(this.context);\n            this.globalAddresses = new Resource$Globaladdresses(this.context);\n            this.globalForwardingRules =\n                new Resource$Globalforwardingrules(this.context);\n            this.globalOperations = new Resource$Globaloperations(this.context);\n            this.healthChecks = new Resource$Healthchecks(this.context);\n            this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n            this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n            this.images = new Resource$Images(this.context);\n            this.instanceGroupManagers =\n                new Resource$Instancegroupmanagers(this.context);\n            this.instanceGroups = new Resource$Instancegroups(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.instanceTemplates = new Resource$Instancetemplates(this.context);\n            this.interconnectAttachments =\n                new Resource$Interconnectattachments(this.context);\n            this.interconnectLocations =\n                new Resource$Interconnectlocations(this.context);\n            this.interconnects = new Resource$Interconnects(this.context);\n            this.licenseCodes = new Resource$Licensecodes(this.context);\n            this.licenses = new Resource$Licenses(this.context);\n            this.machineTypes = new Resource$Machinetypes(this.context);\n            this.networkEndpointGroups =\n                new Resource$Networkendpointgroups(this.context);\n            this.networks = new Resource$Networks(this.context);\n            this.nodeGroups = new Resource$Nodegroups(this.context);\n            this.nodeTemplates = new Resource$Nodetemplates(this.context);\n            this.nodeTypes = new Resource$Nodetypes(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n            this.regionBackendServices =\n                new Resource$Regionbackendservices(this.context);\n            this.regionCommitments = new Resource$Regioncommitments(this.context);\n            this.regionDisks = new Resource$Regiondisks(this.context);\n            this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n            this.regionInstanceGroupManagers =\n                new Resource$Regioninstancegroupmanagers(this.context);\n            this.regionInstanceGroups =\n                new Resource$Regioninstancegroups(this.context);\n            this.regionOperations = new Resource$Regionoperations(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.reservations = new Resource$Reservations(this.context);\n            this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n            this.routers = new Resource$Routers(this.context);\n            this.routes = new Resource$Routes(this.context);\n            this.securityPolicies = new Resource$Securitypolicies(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.sslCertificates = new Resource$Sslcertificates(this.context);\n            this.sslPolicies = new Resource$Sslpolicies(this.context);\n            this.subnetworks = new Resource$Subnetworks(this.context);\n            this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n            this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n            this.targetInstances = new Resource$Targetinstances(this.context);\n            this.targetPools = new Resource$Targetpools(this.context);\n            this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n            this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n            this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n            this.urlMaps = new Resource$Urlmaps(this.context);\n            this.vpnGateways = new Resource$Vpngateways(this.context);\n            this.vpnTunnels = new Resource$Vpntunnels(this.context);\n            this.zoneOperations = new Resource$Zoneoperations(this.context);\n            this.zones = new Resource$Zones(this.context);\n        }\n    }\n    compute_beta.Compute = Compute;\n    class Resource$Acceleratortypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/acceleratorTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'acceleratorType'],\n                pathParams: ['acceleratorType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Acceleratortypes = Resource$Acceleratortypes;\n    class Resource$Addresses {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Addresses = Resource$Addresses;\n    class Resource$Autoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Autoscalers = Resource$Autoscalers;\n    class Resource$Backendbuckets {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket', 'keyName'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Backendbuckets = Resource$Backendbuckets;\n    class Resource$Backendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService', 'keyName'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Backendservices = Resource$Backendservices;\n    class Resource$Disks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Disks = Resource$Disks;\n    class Resource$Disktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/diskTypes/{diskType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'diskType'],\n                pathParams: ['diskType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Disktypes = Resource$Disktypes;\n    class Resource$Externalvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Externalvpngateways = Resource$Externalvpngateways;\n    class Resource$Firewalls {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Firewalls = Resource$Firewalls;\n    class Resource$Forwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Forwardingrules = Resource$Forwardingrules;\n    class Resource$Globaladdresses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globaladdresses = Resource$Globaladdresses;\n    class Resource$Globalforwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n    class Resource$Globaloperations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globaloperations = Resource$Globaloperations;\n    class Resource$Healthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Healthchecks = Resource$Healthchecks;\n    class Resource$Httphealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Httphealthchecks = Resource$Httphealthchecks;\n    class Resource$Httpshealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n    class Resource$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{image}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deprecate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{image}/deprecate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{image}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/family/{family}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'family'],\n                pathParams: ['family', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Images = Resource$Images;\n    class Resource$Instancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n    class Resource$Instancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancegroups = Resource$Instancegroups;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/attachDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/detachDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/serialPort')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/referrers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/reset')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/resume')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineType')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMetadata')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setScheduling')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTags(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setTags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        start(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/start')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/stop')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        suspend(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/suspend')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instances = Resource$Instances;\n    class Resource$Instancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancetemplates = Resource$Instancetemplates;\n    class Resource$Interconnectattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnectattachments = Resource$Interconnectattachments;\n    class Resource$Interconnectlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnectLocations/{interconnectLocation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectLocation'],\n                pathParams: ['interconnectLocation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnectLocations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnectlocations = Resource$Interconnectlocations;\n    class Resource$Interconnects {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}/getDiagnostics')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnects = Resource$Interconnects;\n    class Resource$Licensecodes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenseCodes/{licenseCode}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'licenseCode'],\n                pathParams: ['licenseCode', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Licensecodes = Resource$Licensecodes;\n    class Resource$Licenses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{license}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{license}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/licenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/licenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Licenses = Resource$Licenses;\n    class Resource$Machinetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/machineTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/machineTypes/{machineType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'machineType'],\n                pathParams: ['machineType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/machineTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Machinetypes = Resource$Machinetypes;\n    class Resource$Networkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n    class Resource$Networks {\n        constructor(context) {\n            this.context = context;\n        }\n        addPeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/addPeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/networks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/networks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/listPeeringRoutes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/removePeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/switchToCustomMode')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/updatePeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Networks = Resource$Networks;\n    class Resource$Nodegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'initialNodeCount'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Nodegroups = Resource$Nodegroups;\n    class Resource$Nodetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Nodetemplates = Resource$Nodetemplates;\n    class Resource$Nodetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/nodeTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeTypes/{nodeType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeType'],\n                pathParams: ['nodeType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Nodetypes = Resource$Nodetypes;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/disableXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/disableXpnResource')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/enableXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/enableXpnResource')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/getXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/getXpnResources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/listXpnHosts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/moveDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/moveInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/setCommonInstanceMetadata')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/setDefaultNetworkTier')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/setUsageExportBucket')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Projects = Resource$Projects;\n    class Resource$Regionautoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionautoscalers = Resource$Regionautoscalers;\n    class Resource$Regionbackendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionbackendservices = Resource$Regionbackendservices;\n    class Resource$Regioncommitments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioncommitments = Resource$Regioncommitments;\n    class Resource$Regiondisks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/createSnapshot')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiondisks = Resource$Regiondisks;\n    class Resource$Regiondisktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/diskTypes/{diskType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'diskType'],\n                pathParams: ['diskType', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiondisktypes = Resource$Regiondisktypes;\n    class Resource$Regioninstancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n    class Resource$Regioninstancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n    class Resource$Regionoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionoperations = Resource$Regionoperations;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/regions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regions = Resource$Regions;\n    class Resource$Reservations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/reservations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Reservations = Resource$Reservations;\n    class Resource$Resourcepolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/resourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Resourcepolicies = Resource$Resourcepolicies;\n    class Resource$Routers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getRouterStatus')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        preview(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/preview')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Routers = Resource$Routers;\n    class Resource$Routes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/routes/{route}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/routes/{route}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/routes/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Routes = Resource$Routes;\n    class Resource$Securitypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/addRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/getRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Securitypolicies = Resource$Securitypolicies;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{snapshot}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{snapshot}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Sslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Sslcertificates = Resource$Sslcertificates;\n    class Resource$Sslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/listAvailableFeatures')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Sslpolicies = Resource$Sslpolicies;\n    class Resource$Subnetworks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listUsable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/subnetworks/listUsable')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Subnetworks = Resource$Subnetworks;\n    class Resource$Targethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targethttpproxies = Resource$Targethttpproxies;\n    class Resource$Targethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n    class Resource$Targetinstances {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetinstances = Resource$Targetinstances;\n    class Resource$Targetpools {\n        constructor(context) {\n            this.context = context;\n        }\n        addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetpools = Resource$Targetpools;\n    class Resource$Targetsslproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetsslproxies = Resource$Targetsslproxies;\n    class Resource$Targettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targettcpproxies = Resource$Targettcpproxies;\n    class Resource$Targetvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetvpngateways = Resource$Targetvpngateways;\n    class Resource$Urlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/invalidateCache')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/validate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Urlmaps = Resource$Urlmaps;\n    class Resource$Vpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/vpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Vpngateways = Resource$Vpngateways;\n    class Resource$Vpntunnels {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Vpntunnels = Resource$Vpntunnels;\n    class Resource$Zoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Zoneoperations = Resource$Zoneoperations;\n    class Resource$Zones {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Zones = Resource$Zones;\n})(compute_beta = exports.compute_beta || (exports.compute_beta = {}));\n//# sourceMappingURL=beta.js.map"]},"metadata":{},"sourceType":"script"}