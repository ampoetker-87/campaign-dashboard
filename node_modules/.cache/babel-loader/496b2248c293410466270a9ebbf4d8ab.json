{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar testing_v1;\n\n(function (testing_v1) {\n  /**\n   * Cloud Testing API\n   *\n   * Allows developers to run automated tests for their mobile applications on\n   * Google infrastructure.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const testing = google.testing('v1');\n   *\n   * @namespace testing\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Testing\n   */\n  var Testing = function Testing(options, google) {\n    _classCallCheck(this, Testing);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.applicationDetailService = new Resource$Applicationdetailservice(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.testEnvironmentCatalog = new Resource$Testenvironmentcatalog(this.context);\n  };\n\n  testing_v1.Testing = Testing;\n\n  var Resource$Applicationdetailservice = /*#__PURE__*/function () {\n    function Resource$Applicationdetailservice(context) {\n      _classCallCheck(this, Resource$Applicationdetailservice);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Applicationdetailservice, [{\n      key: \"getApkDetails\",\n      value: function getApkDetails(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/applicationDetailService/getApkDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Applicationdetailservice;\n  }();\n\n  testing_v1.Resource$Applicationdetailservice = Resource$Applicationdetailservice;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.testMatrices = new Resource$Projects$Testmatrices(this.context);\n  };\n\n  testing_v1.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Testmatrices = /*#__PURE__*/function () {\n    function Resource$Projects$Testmatrices(context) {\n      _classCallCheck(this, Resource$Projects$Testmatrices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Testmatrices, [{\n      key: \"cancel\",\n      value: function cancel(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'testMatrixId'],\n          pathParams: ['projectId', 'testMatrixId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{projectId}/testMatrices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/projects/{projectId}/testMatrices/{testMatrixId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'testMatrixId'],\n          pathParams: ['projectId', 'testMatrixId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Testmatrices;\n  }();\n\n  testing_v1.Resource$Projects$Testmatrices = Resource$Projects$Testmatrices;\n\n  var Resource$Testenvironmentcatalog = /*#__PURE__*/function () {\n    function Resource$Testenvironmentcatalog(context) {\n      _classCallCheck(this, Resource$Testenvironmentcatalog);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Testenvironmentcatalog, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/testEnvironmentCatalog/{environmentType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['environmentType'],\n          pathParams: ['environmentType'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Testenvironmentcatalog;\n  }();\n\n  testing_v1.Resource$Testenvironmentcatalog = Resource$Testenvironmentcatalog;\n})(testing_v1 = exports.testing_v1 || (exports.testing_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/testing/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","testing_v1","Testing","options","google","context","_options","applicationDetailService","Resource$Applicationdetailservice","projects","Resource$Projects","testEnvironmentCatalog","Resource$Testenvironmentcatalog","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","testMatrices","Resource$Projects$Testmatrices"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar testing_v1;\n(function (testing_v1) {\n    /**\n     * Cloud Testing API\n     *\n     * Allows developers to run automated tests for their mobile applications on\n     * Google infrastructure.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const testing = google.testing('v1');\n     *\n     * @namespace testing\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Testing\n     */\n    class Testing {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.applicationDetailService =\n                new Resource$Applicationdetailservice(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.testEnvironmentCatalog =\n                new Resource$Testenvironmentcatalog(this.context);\n        }\n    }\n    testing_v1.Testing = Testing;\n    class Resource$Applicationdetailservice {\n        constructor(context) {\n            this.context = context;\n        }\n        getApkDetails(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/applicationDetailService/getApkDetails')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    testing_v1.Resource$Applicationdetailservice = Resource$Applicationdetailservice;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.testMatrices = new Resource$Projects$Testmatrices(this.context);\n        }\n    }\n    testing_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Testmatrices {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'testMatrixId'],\n                pathParams: ['projectId', 'testMatrixId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{projectId}/testMatrices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/projects/{projectId}/testMatrices/{testMatrixId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'testMatrixId'],\n                pathParams: ['projectId', 'testMatrixId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    testing_v1.Resource$Projects$Testmatrices = Resource$Projects$Testmatrices;\n    class Resource$Testenvironmentcatalog {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/testEnvironmentCatalog/{environmentType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['environmentType'],\n                pathParams: ['environmentType'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    testing_v1.Resource$Testenvironmentcatalog = Resource$Testenvironmentcatalog;\n})(testing_v1 = exports.testing_v1 || (exports.testing_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}