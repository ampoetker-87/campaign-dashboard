{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar drive_v2;\n\n(function (drive_v2) {\n  /**\n   * Drive API\n   *\n   * Manages files in Drive including uploading, downloading, searching,\n   * detecting changes, and updating sharing permissions.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const drive = google.drive('v2');\n   *\n   * @namespace drive\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Drive\n   */\n  var Drive = function Drive(options, google) {\n    _classCallCheck(this, Drive);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.about = new Resource$About(this.context);\n    this.apps = new Resource$Apps(this.context);\n    this.changes = new Resource$Changes(this.context);\n    this.channels = new Resource$Channels(this.context);\n    this.children = new Resource$Children(this.context);\n    this.comments = new Resource$Comments(this.context);\n    this.files = new Resource$Files(this.context);\n    this.parents = new Resource$Parents(this.context);\n    this.permissions = new Resource$Permissions(this.context);\n    this.properties = new Resource$Properties(this.context);\n    this.realtime = new Resource$Realtime(this.context);\n    this.replies = new Resource$Replies(this.context);\n    this.revisions = new Resource$Revisions(this.context);\n    this.teamdrives = new Resource$Teamdrives(this.context);\n  };\n\n  drive_v2.Drive = Drive;\n\n  var Resource$About = /*#__PURE__*/function () {\n    function Resource$About(context) {\n      _classCallCheck(this, Resource$About);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$About, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/about').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$About;\n  }();\n\n  drive_v2.Resource$About = Resource$About;\n\n  var Resource$Apps = /*#__PURE__*/function () {\n    function Resource$Apps(context) {\n      _classCallCheck(this, Resource$Apps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/apps/{appId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['appId'],\n          pathParams: ['appId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps;\n  }();\n\n  drive_v2.Resource$Apps = Resource$Apps;\n\n  var Resource$Changes = /*#__PURE__*/function () {\n    function Resource$Changes(context) {\n      _classCallCheck(this, Resource$Changes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Changes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['changeId'],\n          pathParams: ['changeId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getStartPageToken\",\n      value: function getStartPageToken(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/changes/startPageToken').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/changes/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Changes;\n  }();\n\n  drive_v2.Resource$Changes = Resource$Changes;\n\n  var Resource$Channels = /*#__PURE__*/function () {\n    function Resource$Channels(context) {\n      _classCallCheck(this, Resource$Channels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Channels, [{\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Channels;\n  }();\n\n  drive_v2.Resource$Channels = Resource$Channels;\n\n  var Resource$Children = /*#__PURE__*/function () {\n    function Resource$Children(context) {\n      _classCallCheck(this, Resource$Children);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Children, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{folderId}/children/{childId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['folderId', 'childId'],\n          pathParams: ['childId', 'folderId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{folderId}/children/{childId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['folderId', 'childId'],\n          pathParams: ['childId', 'folderId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{folderId}/children').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['folderId'],\n          pathParams: ['folderId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{folderId}/children').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['folderId'],\n          pathParams: ['folderId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Children;\n  }();\n\n  drive_v2.Resource$Children = Resource$Children;\n\n  var Resource$Comments = /*#__PURE__*/function () {\n    function Resource$Comments(context) {\n      _classCallCheck(this, Resource$Comments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Comments, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Comments;\n  }();\n\n  drive_v2.Resource$Comments = Resource$Comments;\n\n  var Resource$Files = /*#__PURE__*/function () {\n    function Resource$Files(context) {\n      _classCallCheck(this, Resource$Files);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Files, [{\n      key: \"copy\",\n      value: function copy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/copy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"emptyTrash\",\n      value: function emptyTrash(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/trash').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"export\",\n      value: function _export(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'mimeType'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"generateIds\",\n      value: function generateIds(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/generateIds').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"touch\",\n      value: function touch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/touch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"trash\",\n      value: function trash(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/trash').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"untrash\",\n      value: function untrash(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/untrash').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/drive/v2/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Files;\n  }();\n\n  drive_v2.Resource$Files = Resource$Files;\n\n  var Resource$Parents = /*#__PURE__*/function () {\n    function Resource$Parents(context) {\n      _classCallCheck(this, Resource$Parents);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Parents, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/parents/{parentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'parentId'],\n          pathParams: ['fileId', 'parentId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/parents/{parentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'parentId'],\n          pathParams: ['fileId', 'parentId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/parents').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/parents').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Parents;\n  }();\n\n  drive_v2.Resource$Parents = Resource$Parents;\n\n  var Resource$Permissions = /*#__PURE__*/function () {\n    function Resource$Permissions(context) {\n      _classCallCheck(this, Resource$Permissions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Permissions, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIdForEmail\",\n      value: function getIdForEmail(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/permissionIds/{email}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['email'],\n          pathParams: ['email'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'permissionId'],\n          pathParams: ['fileId', 'permissionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Permissions;\n  }();\n\n  drive_v2.Resource$Permissions = Resource$Permissions;\n\n  var Resource$Properties = /*#__PURE__*/function () {\n    function Resource$Properties(context) {\n      _classCallCheck(this, Resource$Properties);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Properties, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'propertyKey'],\n          pathParams: ['fileId', 'propertyKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'propertyKey'],\n          pathParams: ['fileId', 'propertyKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'propertyKey'],\n          pathParams: ['fileId', 'propertyKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/properties/{propertyKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'propertyKey'],\n          pathParams: ['fileId', 'propertyKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Properties;\n  }();\n\n  drive_v2.Resource$Properties = Resource$Properties;\n\n  var Resource$Realtime = /*#__PURE__*/function () {\n    function Resource$Realtime(context) {\n      _classCallCheck(this, Resource$Realtime);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Realtime, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/realtime').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/realtime').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          mediaUrl: (rootUrl + '/upload/drive/v2/files/{fileId}/realtime').replace(/([^:]\\/)\\/+/g, '$1'),\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Realtime;\n  }();\n\n  drive_v2.Resource$Realtime = Resource$Realtime;\n\n  var Resource$Replies = /*#__PURE__*/function () {\n    function Resource$Replies(context) {\n      _classCallCheck(this, Resource$Replies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Replies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId'],\n          pathParams: ['commentId', 'fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'commentId', 'replyId'],\n          pathParams: ['commentId', 'fileId', 'replyId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Replies;\n  }();\n\n  drive_v2.Resource$Replies = Resource$Replies;\n\n  var Resource$Revisions = /*#__PURE__*/function () {\n    function Resource$Revisions(context) {\n      _classCallCheck(this, Resource$Revisions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Revisions, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['fileId'],\n          pathParams: ['fileId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['fileId', 'revisionId'],\n          pathParams: ['fileId', 'revisionId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Revisions;\n  }();\n\n  drive_v2.Resource$Revisions = Resource$Revisions;\n\n  var Resource$Teamdrives = /*#__PURE__*/function () {\n    function Resource$Teamdrives(context) {\n      _classCallCheck(this, Resource$Teamdrives);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Teamdrives, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['teamDriveId'],\n          pathParams: ['teamDriveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['teamDriveId'],\n          pathParams: ['teamDriveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['requestId'],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['teamDriveId'],\n          pathParams: ['teamDriveId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Teamdrives;\n  }();\n\n  drive_v2.Resource$Teamdrives = Resource$Teamdrives;\n})(drive_v2 = exports.drive_v2 || (exports.drive_v2 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/drive/v2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","drive_v2","Drive","options","google","context","_options","about","Resource$About","apps","Resource$Apps","changes","Resource$Changes","channels","Resource$Channels","children","Resource$Children","comments","Resource$Comments","files","Resource$Files","parents","Resource$Parents","permissions","Resource$Permissions","properties","Resource$Properties","realtime","Resource$Realtime","replies","Resource$Replies","revisions","Resource$Revisions","teamdrives","Resource$Teamdrives","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","mediaUrl"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar drive_v2;\n(function (drive_v2) {\n    /**\n     * Drive API\n     *\n     * Manages files in Drive including uploading, downloading, searching,\n     * detecting changes, and updating sharing permissions.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const drive = google.drive('v2');\n     *\n     * @namespace drive\n     * @type {Function}\n     * @version v2\n     * @variation v2\n     * @param {object=} options Options for Drive\n     */\n    class Drive {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.about = new Resource$About(this.context);\n            this.apps = new Resource$Apps(this.context);\n            this.changes = new Resource$Changes(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.children = new Resource$Children(this.context);\n            this.comments = new Resource$Comments(this.context);\n            this.files = new Resource$Files(this.context);\n            this.parents = new Resource$Parents(this.context);\n            this.permissions = new Resource$Permissions(this.context);\n            this.properties = new Resource$Properties(this.context);\n            this.realtime = new Resource$Realtime(this.context);\n            this.replies = new Resource$Replies(this.context);\n            this.revisions = new Resource$Revisions(this.context);\n            this.teamdrives = new Resource$Teamdrives(this.context);\n        }\n    }\n    drive_v2.Drive = Drive;\n    class Resource$About {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/about').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$About = Resource$About;\n    class Resource$Apps {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/apps/{appId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appId'],\n                pathParams: ['appId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Apps = Resource$Apps;\n    class Resource$Changes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/changes/{changeId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['changeId'],\n                pathParams: ['changeId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getStartPageToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/changes/startPageToken')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/changes/watch')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Changes = Resource$Changes;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/channels/stop')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Channels = Resource$Channels;\n    class Resource$Children {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{folderId}/children/{childId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['folderId', 'childId'],\n                pathParams: ['childId', 'folderId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{folderId}/children/{childId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['folderId', 'childId'],\n                pathParams: ['childId', 'folderId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{folderId}/children')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['folderId'],\n                pathParams: ['folderId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{folderId}/children')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['folderId'],\n                pathParams: ['folderId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Children = Resource$Children;\n    class Resource$Comments {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/comments/{commentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Comments = Resource$Comments;\n    class Resource$Files {\n        constructor(context) {\n            this.context = context;\n        }\n        copy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/copy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        emptyTrash(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/trash')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/export')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'mimeType'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateIds(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/generateIds')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        touch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/touch')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        trash(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/trash')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        untrash(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/untrash')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/drive/v2/files/{fileId}')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/watch')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Files = Resource$Files;\n    class Resource$Parents {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/parents/{parentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'parentId'],\n                pathParams: ['fileId', 'parentId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/parents/{parentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'parentId'],\n                pathParams: ['fileId', 'parentId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/parents')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/parents')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Parents = Resource$Parents;\n    class Resource$Permissions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/permissions/{permissionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/permissions/{permissionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIdForEmail(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/permissionIds/{email}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['email'],\n                pathParams: ['email'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/permissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/permissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/permissions/{permissionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/permissions/{permissionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Permissions = Resource$Permissions;\n    class Resource$Properties {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/properties/{propertyKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'propertyKey'],\n                pathParams: ['fileId', 'propertyKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/properties/{propertyKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'propertyKey'],\n                pathParams: ['fileId', 'propertyKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/properties')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/properties')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/properties/{propertyKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'propertyKey'],\n                pathParams: ['fileId', 'propertyKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/properties/{propertyKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'propertyKey'],\n                pathParams: ['fileId', 'propertyKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Properties = Resource$Properties;\n    class Resource$Realtime {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/realtime')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/realtime')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/drive/v2/files/{fileId}/realtime')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Realtime = Resource$Realtime;\n    class Resource$Replies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v2/files/{fileId}/comments/{commentId}/replies/{replyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Replies = Resource$Replies;\n    class Resource$Revisions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/files/{fileId}/revisions/{revisionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Revisions = Resource$Revisions;\n    class Resource$Teamdrives {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['requestId'],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v2/teamdrives/{teamDriveId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    drive_v2.Resource$Teamdrives = Resource$Teamdrives;\n})(drive_v2 = exports.drive_v2 || (exports.drive_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}