{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar toolresults_v1beta3;\n\n(function (toolresults_v1beta3) {\n  /**\n   * Cloud Tool Results API\n   *\n   * Reads and publishes results from Firebase Test Lab.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const toolresults = google.toolresults('v1beta3');\n   *\n   * @namespace toolresults\n   * @type {Function}\n   * @version v1beta3\n   * @variation v1beta3\n   * @param {object=} options Options for Toolresults\n   */\n  var Toolresults = function Toolresults(options, google) {\n    _classCallCheck(this, Toolresults);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.projects = new Resource$Projects(this.context);\n  };\n\n  toolresults_v1beta3.Toolresults = Toolresults;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n      this.histories = new Resource$Projects$Histories(this.context);\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"getSettings\",\n      value: function getSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/settings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"initializeSettings\",\n      value: function initializeSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}:initializeSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  toolresults_v1beta3.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Histories = /*#__PURE__*/function () {\n    function Resource$Projects$Histories(context) {\n      _classCallCheck(this, Resource$Projects$Histories);\n\n      this.context = context;\n      this.executions = new Resource$Projects$Histories$Executions(this.context);\n    }\n\n    _createClass(Resource$Projects$Histories, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId'],\n          pathParams: ['historyId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId'],\n          pathParams: ['projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Histories;\n  }();\n\n  toolresults_v1beta3.Resource$Projects$Histories = Resource$Projects$Histories;\n\n  var Resource$Projects$Histories$Executions = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions);\n\n      this.context = context;\n      this.clusters = new Resource$Projects$Histories$Executions$Clusters(this.context);\n      this.steps = new Resource$Projects$Histories$Executions$Steps(this.context);\n    }\n\n    _createClass(Resource$Projects$Histories$Executions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId'],\n          pathParams: ['historyId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId'],\n          pathParams: ['historyId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Histories$Executions;\n  }();\n\n  toolresults_v1beta3.Resource$Projects$Histories$Executions = Resource$Projects$Histories$Executions;\n\n  var Resource$Projects$Histories$Executions$Clusters = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Clusters(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Clusters);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Histories$Executions$Clusters, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'clusterId'],\n          pathParams: ['clusterId', 'executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Histories$Executions$Clusters;\n  }();\n\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Clusters = Resource$Projects$Histories$Executions$Clusters;\n\n  var Resource$Projects$Histories$Executions$Steps = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps);\n\n      this.context = context;\n      this.perfMetricsSummary = new Resource$Projects$Histories$Executions$Steps$Perfmetricssummary(this.context);\n      this.perfSampleSeries = new Resource$Projects$Histories$Executions$Steps$Perfsampleseries(this.context);\n      this.thumbnails = new Resource$Projects$Histories$Executions$Steps$Thumbnails(this.context);\n    }\n\n    _createClass(Resource$Projects$Histories$Executions$Steps, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getPerfMetricsSummary\",\n      value: function getPerfMetricsSummary(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId'],\n          pathParams: ['executionId', 'historyId', 'projectId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"publishXunitXmlFiles\",\n      value: function publishXunitXmlFiles(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Histories$Executions$Steps;\n  }();\n\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps = Resource$Projects$Histories$Executions$Steps;\n\n  var Resource$Projects$Histories$Executions$Steps$Perfmetricssummary = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps$Perfmetricssummary(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps$Perfmetricssummary);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Histories$Executions$Steps$Perfmetricssummary, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Histories$Executions$Steps$Perfmetricssummary;\n  }();\n\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Perfmetricssummary = Resource$Projects$Histories$Executions$Steps$Perfmetricssummary;\n\n  var Resource$Projects$Histories$Executions$Steps$Perfsampleseries = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps$Perfsampleseries(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps$Perfsampleseries);\n\n      this.context = context;\n      this.samples = new Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples(this.context);\n    }\n\n    _createClass(Resource$Projects$Histories$Executions$Steps$Perfsampleseries, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Histories$Executions$Steps$Perfsampleseries;\n  }();\n\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Perfsampleseries = Resource$Projects$Histories$Executions$Steps$Perfsampleseries;\n\n  var Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples, [{\n      key: \"batchCreate\",\n      value: function batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples;\n  }();\n\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples = Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples;\n\n  var Resource$Projects$Histories$Executions$Steps$Thumbnails = /*#__PURE__*/function () {\n    function Resource$Projects$Histories$Executions$Steps$Thumbnails(context) {\n      _classCallCheck(this, Resource$Projects$Histories$Executions$Steps$Thumbnails);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Histories$Executions$Steps$Thumbnails, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/thumbnails').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n          pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Histories$Executions$Steps$Thumbnails;\n  }();\n\n  toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Thumbnails = Resource$Projects$Histories$Executions$Steps$Thumbnails;\n})(toolresults_v1beta3 = exports.toolresults_v1beta3 || (exports.toolresults_v1beta3 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/toolresults/v1beta3.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","toolresults_v1beta3","Toolresults","options","google","context","_options","projects","Resource$Projects","histories","Resource$Projects$Histories","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","executions","Resource$Projects$Histories$Executions","clusters","Resource$Projects$Histories$Executions$Clusters","steps","Resource$Projects$Histories$Executions$Steps","perfMetricsSummary","Resource$Projects$Histories$Executions$Steps$Perfmetricssummary","perfSampleSeries","Resource$Projects$Histories$Executions$Steps$Perfsampleseries","thumbnails","Resource$Projects$Histories$Executions$Steps$Thumbnails","samples","Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar toolresults_v1beta3;\n(function (toolresults_v1beta3) {\n    /**\n     * Cloud Tool Results API\n     *\n     * Reads and publishes results from Firebase Test Lab.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const toolresults = google.toolresults('v1beta3');\n     *\n     * @namespace toolresults\n     * @type {Function}\n     * @version v1beta3\n     * @variation v1beta3\n     * @param {object=} options Options for Toolresults\n     */\n    class Toolresults {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    toolresults_v1beta3.Toolresults = Toolresults;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.histories = new Resource$Projects$Histories(this.context);\n        }\n        getSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/settings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        initializeSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}:initializeSettings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    toolresults_v1beta3.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Histories {\n        constructor(context) {\n            this.context = context;\n            this.executions =\n                new Resource$Projects$Histories$Executions(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId'],\n                pathParams: ['historyId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    toolresults_v1beta3.Resource$Projects$Histories = Resource$Projects$Histories;\n    class Resource$Projects$Histories$Executions {\n        constructor(context) {\n            this.context = context;\n            this.clusters =\n                new Resource$Projects$Histories$Executions$Clusters(this.context);\n            this.steps =\n                new Resource$Projects$Histories$Executions$Steps(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId'],\n                pathParams: ['historyId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId'],\n                pathParams: ['executionId', 'historyId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId'],\n                pathParams: ['historyId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId'],\n                pathParams: ['executionId', 'historyId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    toolresults_v1beta3.Resource$Projects$Histories$Executions = Resource$Projects$Histories$Executions;\n    class Resource$Projects$Histories$Executions$Clusters {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters/{clusterId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'clusterId'],\n                pathParams: ['clusterId', 'executionId', 'historyId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId'],\n                pathParams: ['executionId', 'historyId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    toolresults_v1beta3.Resource$Projects$Histories$Executions$Clusters = Resource$Projects$Histories$Executions$Clusters;\n    class Resource$Projects$Histories$Executions$Steps {\n        constructor(context) {\n            this.context = context;\n            this.perfMetricsSummary =\n                new Resource$Projects$Histories$Executions$Steps$Perfmetricssummary(this.context);\n            this.perfSampleSeries =\n                new Resource$Projects$Histories$Executions$Steps$Perfsampleseries(this.context);\n            this.thumbnails =\n                new Resource$Projects$Histories$Executions$Steps$Thumbnails(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId'],\n                pathParams: ['executionId', 'historyId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getPerfMetricsSummary(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId'],\n                pathParams: ['executionId', 'historyId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        publishXunitXmlFiles(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps = Resource$Projects$Histories$Executions$Steps;\n    class Resource$Projects$Histories$Executions$Steps$Perfmetricssummary {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Perfmetricssummary = Resource$Projects$Histories$Executions$Steps$Perfmetricssummary;\n    class Resource$Projects$Histories$Executions$Steps$Perfsampleseries {\n        constructor(context) {\n            this.context = context;\n            this.samples =\n                new Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [\n                    'projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'\n                ],\n                pathParams: [\n                    'executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Perfsampleseries = Resource$Projects$Histories$Executions$Steps$Perfsampleseries;\n    class Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples {\n        constructor(context) {\n            this.context = context;\n        }\n        batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples:batchCreate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [\n                    'projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'\n                ],\n                pathParams: [\n                    'executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [\n                    'projectId', 'historyId', 'executionId', 'stepId', 'sampleSeriesId'\n                ],\n                pathParams: [\n                    'executionId', 'historyId', 'projectId', 'sampleSeriesId', 'stepId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples = Resource$Projects$Histories$Executions$Steps$Perfsampleseries$Samples;\n    class Resource$Projects$Histories$Executions$Steps$Thumbnails {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/thumbnails')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'historyId', 'executionId', 'stepId'],\n                pathParams: ['executionId', 'historyId', 'projectId', 'stepId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    toolresults_v1beta3.Resource$Projects$Histories$Executions$Steps$Thumbnails = Resource$Projects$Histories$Executions$Steps$Thumbnails;\n})(toolresults_v1beta3 = exports.toolresults_v1beta3 || (exports.toolresults_v1beta3 = {}));\n//# sourceMappingURL=v1beta3.js.map"]},"metadata":{},"sourceType":"script"}