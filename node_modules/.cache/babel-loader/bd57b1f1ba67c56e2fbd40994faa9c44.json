{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar bigquerydatatransfer_v1;\n\n(function (bigquerydatatransfer_v1) {\n  /**\n   * BigQuery Data Transfer API\n   *\n   * Schedule queries or transfer external data from SaaS applications to Google\n   * BigQuery on a regular basis.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const bigquerydatatransfer = google.bigquerydatatransfer('v1');\n   *\n   * @namespace bigquerydatatransfer\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Bigquerydatatransfer\n   */\n  var Bigquerydatatransfer = function Bigquerydatatransfer(options, google) {\n    _classCallCheck(this, Bigquerydatatransfer);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.projects = new Resource$Projects(this.context);\n  };\n\n  bigquerydatatransfer_v1.Bigquerydatatransfer = Bigquerydatatransfer;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.dataSources = new Resource$Projects$Datasources(this.context);\n    this.locations = new Resource$Projects$Locations(this.context);\n    this.transferConfigs = new Resource$Projects$Transferconfigs(this.context);\n  };\n\n  bigquerydatatransfer_v1.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Datasources = /*#__PURE__*/function () {\n    function Resource$Projects$Datasources(context) {\n      _classCallCheck(this, Resource$Projects$Datasources);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Datasources, [{\n      key: \"checkValidCreds\",\n      value: function checkValidCreds(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:checkValidCreds').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/dataSources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Datasources;\n  }();\n\n  bigquerydatatransfer_v1.Resource$Projects$Datasources = Resource$Projects$Datasources;\n\n  var Resource$Projects$Locations = /*#__PURE__*/function () {\n    function Resource$Projects$Locations(context) {\n      _classCallCheck(this, Resource$Projects$Locations);\n\n      this.context = context;\n      this.dataSources = new Resource$Projects$Locations$Datasources(this.context);\n      this.transferConfigs = new Resource$Projects$Locations$Transferconfigs(this.context);\n    }\n\n    _createClass(Resource$Projects$Locations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations;\n  }();\n\n  bigquerydatatransfer_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n\n  var Resource$Projects$Locations$Datasources = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Datasources(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Datasources);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Datasources, [{\n      key: \"checkValidCreds\",\n      value: function checkValidCreds(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}:checkValidCreds').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/dataSources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Datasources;\n  }();\n\n  bigquerydatatransfer_v1.Resource$Projects$Locations$Datasources = Resource$Projects$Locations$Datasources;\n\n  var Resource$Projects$Locations$Transferconfigs = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Transferconfigs(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Transferconfigs);\n\n      this.context = context;\n      this.runs = new Resource$Projects$Locations$Transferconfigs$Runs(this.context);\n    }\n\n    _createClass(Resource$Projects$Locations$Transferconfigs, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/transferConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/transferConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"scheduleRuns\",\n      value: function scheduleRuns(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}:scheduleRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"startManualRuns\",\n      value: function startManualRuns(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}:startManualRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Transferconfigs;\n  }();\n\n  bigquerydatatransfer_v1.Resource$Projects$Locations$Transferconfigs = Resource$Projects$Locations$Transferconfigs;\n\n  var Resource$Projects$Locations$Transferconfigs$Runs = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Transferconfigs$Runs(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Transferconfigs$Runs);\n\n      this.context = context;\n      this.transferLogs = new Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs(this.context);\n    }\n\n    _createClass(Resource$Projects$Locations$Transferconfigs$Runs, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/runs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Transferconfigs$Runs;\n  }();\n\n  bigquerydatatransfer_v1.Resource$Projects$Locations$Transferconfigs$Runs = Resource$Projects$Locations$Transferconfigs$Runs;\n\n  var Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs = /*#__PURE__*/function () {\n    function Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs(context) {\n      _classCallCheck(this, Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/transferLogs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs;\n  }();\n\n  bigquerydatatransfer_v1.Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs = Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs;\n\n  var Resource$Projects$Transferconfigs = /*#__PURE__*/function () {\n    function Resource$Projects$Transferconfigs(context) {\n      _classCallCheck(this, Resource$Projects$Transferconfigs);\n\n      this.context = context;\n      this.runs = new Resource$Projects$Transferconfigs$Runs(this.context);\n    }\n\n    _createClass(Resource$Projects$Transferconfigs, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/transferConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/transferConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"scheduleRuns\",\n      value: function scheduleRuns(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}:scheduleRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"startManualRuns\",\n      value: function startManualRuns(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}:startManualRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Transferconfigs;\n  }();\n\n  bigquerydatatransfer_v1.Resource$Projects$Transferconfigs = Resource$Projects$Transferconfigs;\n\n  var Resource$Projects$Transferconfigs$Runs = /*#__PURE__*/function () {\n    function Resource$Projects$Transferconfigs$Runs(context) {\n      _classCallCheck(this, Resource$Projects$Transferconfigs$Runs);\n\n      this.context = context;\n      this.transferLogs = new Resource$Projects$Transferconfigs$Runs$Transferlogs(this.context);\n    }\n\n    _createClass(Resource$Projects$Transferconfigs$Runs, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/runs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Transferconfigs$Runs;\n  }();\n\n  bigquerydatatransfer_v1.Resource$Projects$Transferconfigs$Runs = Resource$Projects$Transferconfigs$Runs;\n\n  var Resource$Projects$Transferconfigs$Runs$Transferlogs = /*#__PURE__*/function () {\n    function Resource$Projects$Transferconfigs$Runs$Transferlogs(context) {\n      _classCallCheck(this, Resource$Projects$Transferconfigs$Runs$Transferlogs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Transferconfigs$Runs$Transferlogs, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1/{+parent}/transferLogs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Transferconfigs$Runs$Transferlogs;\n  }();\n\n  bigquerydatatransfer_v1.Resource$Projects$Transferconfigs$Runs$Transferlogs = Resource$Projects$Transferconfigs$Runs$Transferlogs;\n})(bigquerydatatransfer_v1 = exports.bigquerydatatransfer_v1 || (exports.bigquerydatatransfer_v1 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis/build/src/apis/bigquerydatatransfer/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","bigquerydatatransfer_v1","Bigquerydatatransfer","options","google","context","_options","projects","Resource$Projects","dataSources","Resource$Projects$Datasources","locations","Resource$Projects$Locations","transferConfigs","Resource$Projects$Transferconfigs","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Projects$Locations$Datasources","Resource$Projects$Locations$Transferconfigs","runs","Resource$Projects$Locations$Transferconfigs$Runs","transferLogs","Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs","Resource$Projects$Transferconfigs$Runs","Resource$Projects$Transferconfigs$Runs$Transferlogs"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar bigquerydatatransfer_v1;\n(function (bigquerydatatransfer_v1) {\n    /**\n     * BigQuery Data Transfer API\n     *\n     * Schedule queries or transfer external data from SaaS applications to Google\n     * BigQuery on a regular basis.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const bigquerydatatransfer = google.bigquerydatatransfer('v1');\n     *\n     * @namespace bigquerydatatransfer\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Bigquerydatatransfer\n     */\n    class Bigquerydatatransfer {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    bigquerydatatransfer_v1.Bigquerydatatransfer = Bigquerydatatransfer;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.dataSources = new Resource$Projects$Datasources(this.context);\n            this.locations = new Resource$Projects$Locations(this.context);\n            this.transferConfigs =\n                new Resource$Projects$Transferconfigs(this.context);\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        checkValidCreds(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:checkValidCreds')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/dataSources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects$Datasources = Resource$Projects$Datasources;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n            this.dataSources =\n                new Resource$Projects$Locations$Datasources(this.context);\n            this.transferConfigs =\n                new Resource$Projects$Locations$Transferconfigs(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/locations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n    class Resource$Projects$Locations$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        checkValidCreds(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:checkValidCreds')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/dataSources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects$Locations$Datasources = Resource$Projects$Locations$Datasources;\n    class Resource$Projects$Locations$Transferconfigs {\n        constructor(context) {\n            this.context = context;\n            this.runs =\n                new Resource$Projects$Locations$Transferconfigs$Runs(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/transferConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/transferConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        scheduleRuns(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}:scheduleRuns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startManualRuns(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}:startManualRuns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects$Locations$Transferconfigs = Resource$Projects$Locations$Transferconfigs;\n    class Resource$Projects$Locations$Transferconfigs$Runs {\n        constructor(context) {\n            this.context = context;\n            this.transferLogs =\n                new Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/runs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects$Locations$Transferconfigs$Runs = Resource$Projects$Locations$Transferconfigs$Runs;\n    class Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/transferLogs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs = Resource$Projects$Locations$Transferconfigs$Runs$Transferlogs;\n    class Resource$Projects$Transferconfigs {\n        constructor(context) {\n            this.context = context;\n            this.runs = new Resource$Projects$Transferconfigs$Runs(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/transferConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/transferConfigs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        scheduleRuns(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}:scheduleRuns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startManualRuns(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}:startManualRuns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects$Transferconfigs = Resource$Projects$Transferconfigs;\n    class Resource$Projects$Transferconfigs$Runs {\n        constructor(context) {\n            this.context = context;\n            this.transferLogs =\n                new Resource$Projects$Transferconfigs$Runs$Transferlogs(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/runs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects$Transferconfigs$Runs = Resource$Projects$Transferconfigs$Runs;\n    class Resource$Projects$Transferconfigs$Runs$Transferlogs {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquerydatatransfer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/transferLogs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquerydatatransfer_v1.Resource$Projects$Transferconfigs$Runs$Transferlogs = Resource$Projects$Transferconfigs$Runs$Transferlogs;\n})(bigquerydatatransfer_v1 = exports.bigquerydatatransfer_v1 || (exports.bigquerydatatransfer_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}