{"ast":null,"code":"\"use strict\"; // Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar apirequest_1 = require(\"./apirequest\");\n\nvar Endpoint = /*#__PURE__*/function () {\n  function Endpoint(options) {\n    _classCallCheck(this, Endpoint);\n\n    this._options = options || {};\n  }\n  /**\n   * Given a schema, add methods and resources to a target.\n   *\n   * @param {object} target The target to which to apply the schema.\n   * @param {object} rootSchema The top-level schema, so we don't lose track of it\n   * during recursion.\n   * @param {object} schema The current schema from which to extract methods and\n   * resources.\n   * @param {object} context The context to add to each method.\n   */\n\n\n  _createClass(Endpoint, [{\n    key: \"applySchema\",\n    value: function applySchema(target, rootSchema, schema, context) {\n      this.applyMethodsFromSchema(target, rootSchema, schema, context);\n\n      if (schema.resources) {\n        for (var resourceName in schema.resources) {\n          if (schema.resources.hasOwnProperty(resourceName)) {\n            var resource = schema.resources[resourceName];\n\n            if (!target[resourceName]) {\n              target[resourceName] = {};\n            }\n\n            this.applySchema(target[resourceName], rootSchema, resource, context);\n          }\n        }\n      }\n    }\n    /**\n     * Given a schema, add methods to a target.\n     *\n     * @param {object} target The target to which to apply the methods.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods.\n     * @param {object} context The context to add to each method.\n     */\n\n  }, {\n    key: \"applyMethodsFromSchema\",\n    value: function applyMethodsFromSchema(target, rootSchema, schema, context) {\n      if (schema.methods) {\n        for (var name in schema.methods) {\n          if (schema.methods.hasOwnProperty(name)) {\n            var method = schema.methods[name];\n            target[name] = this.makeMethod(rootSchema, method, context);\n          }\n        }\n      }\n    }\n    /**\n     * Given a method schema, add a method to a target.\n     *\n     * @param target The target to which to add the method.\n     * @param schema The top-level schema that contains the rootUrl, etc.\n     * @param method The method schema from which to generate the method.\n     * @param context The context to add to the method.\n     */\n\n  }, {\n    key: \"makeMethod\",\n    value: function makeMethod(schema, method, context) {\n      var _this = this;\n\n      return function (paramsOrCallback, callback) {\n        var params = typeof paramsOrCallback === 'function' ? {} : paramsOrCallback;\n        callback = typeof paramsOrCallback === 'function' ? paramsOrCallback : callback;\n        var schemaUrl = buildurl(schema.rootUrl + schema.servicePath + method.path);\n        var parameters = {\n          options: {\n            url: schemaUrl.substring(1, schemaUrl.length - 1),\n            method: method.httpMethod\n          },\n          params,\n          requiredParams: method.parameterOrder || [],\n          pathParams: _this.getPathParams(method.parameters),\n          context\n        };\n\n        if (method.mediaUpload && method.mediaUpload.protocols && method.mediaUpload.protocols.simple && method.mediaUpload.protocols.simple.path) {\n          var mediaUrl = buildurl(schema.rootUrl + method.mediaUpload.protocols.simple.path);\n          parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n        }\n\n        if (!callback) {\n          return apirequest_1.createAPIRequest(parameters);\n        }\n\n        apirequest_1.createAPIRequest(parameters, callback);\n        return;\n      };\n    }\n  }, {\n    key: \"getPathParams\",\n    value: function getPathParams(params) {\n      var pathParams = new Array();\n\n      if (typeof params !== 'object') {\n        params = {};\n      }\n\n      Object.keys(params).forEach(function (key) {\n        if (params[key].location === 'path') {\n          pathParams.push(key);\n        }\n      });\n      return pathParams;\n    }\n  }]);\n\n  return Endpoint;\n}();\n\nexports.Endpoint = Endpoint;\n/**\n * Build a string used to create a URL from the discovery doc provided URL.\n * replace double slashes with single slash (except in https://)\n * @private\n * @param  input URL to build from\n * @return Resulting built URL\n */\n\nfunction buildurl(input) {\n  return input ? \"'\".concat(input, \"'\").replace(/([^:]\\/)\\/+/g, '$1') : '';\n}","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/googleapis-common/build/src/endpoint.js"],"names":["Object","defineProperty","exports","value","apirequest_1","require","Endpoint","options","_options","target","rootSchema","schema","context","applyMethodsFromSchema","resources","resourceName","hasOwnProperty","resource","applySchema","methods","name","method","makeMethod","paramsOrCallback","callback","params","schemaUrl","buildurl","rootUrl","servicePath","path","parameters","url","substring","length","httpMethod","requiredParams","parameterOrder","pathParams","getPathParams","mediaUpload","protocols","simple","mediaUrl","createAPIRequest","Array","keys","forEach","key","location","push","input","replace"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst apirequest_1 = require(\"./apirequest\");\nclass Endpoint {\n    constructor(options) {\n        this._options = options || {};\n    }\n    /**\n     * Given a schema, add methods and resources to a target.\n     *\n     * @param {object} target The target to which to apply the schema.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods and\n     * resources.\n     * @param {object} context The context to add to each method.\n     */\n    applySchema(target, rootSchema, schema, context) {\n        this.applyMethodsFromSchema(target, rootSchema, schema, context);\n        if (schema.resources) {\n            for (const resourceName in schema.resources) {\n                if (schema.resources.hasOwnProperty(resourceName)) {\n                    const resource = schema.resources[resourceName];\n                    if (!target[resourceName]) {\n                        target[resourceName] = {};\n                    }\n                    this.applySchema(target[resourceName], rootSchema, resource, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a schema, add methods to a target.\n     *\n     * @param {object} target The target to which to apply the methods.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods.\n     * @param {object} context The context to add to each method.\n     */\n    applyMethodsFromSchema(target, rootSchema, schema, context) {\n        if (schema.methods) {\n            for (const name in schema.methods) {\n                if (schema.methods.hasOwnProperty(name)) {\n                    const method = schema.methods[name];\n                    target[name] = this.makeMethod(rootSchema, method, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a method schema, add a method to a target.\n     *\n     * @param target The target to which to add the method.\n     * @param schema The top-level schema that contains the rootUrl, etc.\n     * @param method The method schema from which to generate the method.\n     * @param context The context to add to the method.\n     */\n    makeMethod(schema, method, context) {\n        return (paramsOrCallback, callback) => {\n            const params = typeof paramsOrCallback === 'function' ? {} : paramsOrCallback;\n            callback = typeof paramsOrCallback === 'function' ?\n                paramsOrCallback :\n                callback;\n            const schemaUrl = buildurl(schema.rootUrl + schema.servicePath + method.path);\n            const parameters = {\n                options: {\n                    url: schemaUrl.substring(1, schemaUrl.length - 1),\n                    method: method.httpMethod\n                },\n                params,\n                requiredParams: method.parameterOrder || [],\n                pathParams: this.getPathParams(method.parameters),\n                context\n            };\n            if (method.mediaUpload && method.mediaUpload.protocols &&\n                method.mediaUpload.protocols.simple &&\n                method.mediaUpload.protocols.simple.path) {\n                const mediaUrl = buildurl(schema.rootUrl + method.mediaUpload.protocols.simple.path);\n                parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n            }\n            if (!callback) {\n                return apirequest_1.createAPIRequest(parameters);\n            }\n            apirequest_1.createAPIRequest(parameters, callback);\n            return;\n        };\n    }\n    getPathParams(params) {\n        const pathParams = new Array();\n        if (typeof params !== 'object') {\n            params = {};\n        }\n        Object.keys(params).forEach(key => {\n            if (params[key].location === 'path') {\n                pathParams.push(key);\n            }\n        });\n        return pathParams;\n    }\n}\nexports.Endpoint = Endpoint;\n/**\n * Build a string used to create a URL from the discovery doc provided URL.\n * replace double slashes with single slash (except in https://)\n * @private\n * @param  input URL to build from\n * @return Resulting built URL\n */\nfunction buildurl(input) {\n    return input ? `'${input}'`.replace(/([^:]\\/)\\/+/g, '$1') : '';\n}\n//# sourceMappingURL=endpoint.js.map"]},"metadata":{},"sourceType":"script"}