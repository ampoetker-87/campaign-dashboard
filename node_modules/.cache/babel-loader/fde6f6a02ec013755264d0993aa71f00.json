{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.monitoring_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nvar googleapis_common_1 = require(\"googleapis-common\");\n\nvar monitoring_v3;\n\n(function (monitoring_v3) {\n  /**\n   * Cloud Monitoring API\n   *\n   * Manages your Cloud Monitoring data and configurations. Most projects must be associated with a Workspace, with a few exceptions as noted on the individual method pages. The table entries below are presented in alphabetical order, not in order of common use. For explanations of the concepts found in the table entries, read the Cloud Monitoring documentation.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const monitoring = google.monitoring('v3');\n   * ```\n   */\n  var Monitoring = function Monitoring(options, google) {\n    _classCallCheck(this, Monitoring);\n\n    this.context = {\n      _options: options || {},\n      google\n    };\n    this.projects = new Resource$Projects(this.context);\n    this.services = new Resource$Services(this.context);\n    this.uptimeCheckIps = new Resource$Uptimecheckips(this.context);\n  };\n\n  monitoring_v3.Monitoring = Monitoring;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.alertPolicies = new Resource$Projects$Alertpolicies(this.context);\n    this.collectdTimeSeries = new Resource$Projects$Collectdtimeseries(this.context);\n    this.groups = new Resource$Projects$Groups(this.context);\n    this.metricDescriptors = new Resource$Projects$Metricdescriptors(this.context);\n    this.monitoredResourceDescriptors = new Resource$Projects$Monitoredresourcedescriptors(this.context);\n    this.notificationChannelDescriptors = new Resource$Projects$Notificationchanneldescriptors(this.context);\n    this.notificationChannels = new Resource$Projects$Notificationchannels(this.context);\n    this.timeSeries = new Resource$Projects$Timeseries(this.context);\n    this.uptimeCheckConfigs = new Resource$Projects$Uptimecheckconfigs(this.context);\n  };\n\n  monitoring_v3.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Alertpolicies = /*#__PURE__*/function () {\n    function Resource$Projects$Alertpolicies(context) {\n      _classCallCheck(this, Resource$Projects$Alertpolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Alertpolicies, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/alertPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/alertPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Alertpolicies;\n  }();\n\n  monitoring_v3.Resource$Projects$Alertpolicies = Resource$Projects$Alertpolicies;\n\n  var Resource$Projects$Collectdtimeseries = /*#__PURE__*/function () {\n    function Resource$Projects$Collectdtimeseries(context) {\n      _classCallCheck(this, Resource$Projects$Collectdtimeseries);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Collectdtimeseries, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/collectdTimeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Collectdtimeseries;\n  }();\n\n  monitoring_v3.Resource$Projects$Collectdtimeseries = Resource$Projects$Collectdtimeseries;\n\n  var Resource$Projects$Groups = /*#__PURE__*/function () {\n    function Resource$Projects$Groups(context) {\n      _classCallCheck(this, Resource$Projects$Groups);\n\n      this.context = context;\n      this.members = new Resource$Projects$Groups$Members(this.context);\n    }\n\n    _createClass(Resource$Projects$Groups, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Groups;\n  }();\n\n  monitoring_v3.Resource$Projects$Groups = Resource$Projects$Groups;\n\n  var Resource$Projects$Groups$Members = /*#__PURE__*/function () {\n    function Resource$Projects$Groups$Members(context) {\n      _classCallCheck(this, Resource$Projects$Groups$Members);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Groups$Members, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Groups$Members;\n  }();\n\n  monitoring_v3.Resource$Projects$Groups$Members = Resource$Projects$Groups$Members;\n\n  var Resource$Projects$Metricdescriptors = /*#__PURE__*/function () {\n    function Resource$Projects$Metricdescriptors(context) {\n      _classCallCheck(this, Resource$Projects$Metricdescriptors);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Metricdescriptors, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/metricDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/metricDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Metricdescriptors;\n  }();\n\n  monitoring_v3.Resource$Projects$Metricdescriptors = Resource$Projects$Metricdescriptors;\n\n  var Resource$Projects$Monitoredresourcedescriptors = /*#__PURE__*/function () {\n    function Resource$Projects$Monitoredresourcedescriptors(context) {\n      _classCallCheck(this, Resource$Projects$Monitoredresourcedescriptors);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Monitoredresourcedescriptors, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/monitoredResourceDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Monitoredresourcedescriptors;\n  }();\n\n  monitoring_v3.Resource$Projects$Monitoredresourcedescriptors = Resource$Projects$Monitoredresourcedescriptors;\n\n  var Resource$Projects$Notificationchanneldescriptors = /*#__PURE__*/function () {\n    function Resource$Projects$Notificationchanneldescriptors(context) {\n      _classCallCheck(this, Resource$Projects$Notificationchanneldescriptors);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Notificationchanneldescriptors, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/notificationChannelDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Notificationchanneldescriptors;\n  }();\n\n  monitoring_v3.Resource$Projects$Notificationchanneldescriptors = Resource$Projects$Notificationchanneldescriptors;\n\n  var Resource$Projects$Notificationchannels = /*#__PURE__*/function () {\n    function Resource$Projects$Notificationchannels(context) {\n      _classCallCheck(this, Resource$Projects$Notificationchannels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Notificationchannels, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/notificationChannels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getVerificationCode\",\n      value: function getVerificationCode(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}:getVerificationCode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/notificationChannels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"sendVerificationCode\",\n      value: function sendVerificationCode(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}:sendVerificationCode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"verify\",\n      value: function verify(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}:verify').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Notificationchannels;\n  }();\n\n  monitoring_v3.Resource$Projects$Notificationchannels = Resource$Projects$Notificationchannels;\n\n  var Resource$Projects$Timeseries = /*#__PURE__*/function () {\n    function Resource$Projects$Timeseries(context) {\n      _classCallCheck(this, Resource$Projects$Timeseries);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Timeseries, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"query\",\n      value: function query(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}/timeSeries:query').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Timeseries;\n  }();\n\n  monitoring_v3.Resource$Projects$Timeseries = Resource$Projects$Timeseries;\n\n  var Resource$Projects$Uptimecheckconfigs = /*#__PURE__*/function () {\n    function Resource$Projects$Uptimecheckconfigs(context) {\n      _classCallCheck(this, Resource$Projects$Uptimecheckconfigs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Uptimecheckconfigs, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+parent}/uptimeCheckConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+parent}/uptimeCheckConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Uptimecheckconfigs;\n  }();\n\n  monitoring_v3.Resource$Projects$Uptimecheckconfigs = Resource$Projects$Uptimecheckconfigs;\n\n  var Resource$Services = /*#__PURE__*/function () {\n    function Resource$Services(context) {\n      _classCallCheck(this, Resource$Services);\n\n      this.context = context;\n      this.serviceLevelObjectives = new Resource$Services$Servicelevelobjectives(this.context);\n    }\n\n    _createClass(Resource$Services, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+parent}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+parent}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Services;\n  }();\n\n  monitoring_v3.Resource$Services = Resource$Services;\n\n  var Resource$Services$Servicelevelobjectives = /*#__PURE__*/function () {\n    function Resource$Services$Servicelevelobjectives(context) {\n      _classCallCheck(this, Resource$Services$Servicelevelobjectives);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Services$Servicelevelobjectives, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+parent}/serviceLevelObjectives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+parent}/serviceLevelObjectives').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Services$Servicelevelobjectives;\n  }();\n\n  monitoring_v3.Resource$Services$Servicelevelobjectives = Resource$Services$Servicelevelobjectives;\n\n  var Resource$Uptimecheckips = /*#__PURE__*/function () {\n    function Resource$Uptimecheckips(context) {\n      _classCallCheck(this, Resource$Uptimecheckips);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Uptimecheckips, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v3/uptimeCheckIps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Uptimecheckips;\n  }();\n\n  monitoring_v3.Resource$Uptimecheckips = Resource$Uptimecheckips;\n})(monitoring_v3 = exports.monitoring_v3 || (exports.monitoring_v3 = {}));","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/Campaign-Planner/node_modules/googleapis/build/src/apis/monitoring/v3.js"],"names":["Object","defineProperty","exports","value","monitoring_v3","googleapis_common_1","require","Monitoring","options","google","context","_options","projects","Resource$Projects","services","Resource$Services","uptimeCheckIps","Resource$Uptimecheckips","alertPolicies","Resource$Projects$Alertpolicies","collectdTimeSeries","Resource$Projects$Collectdtimeseries","groups","Resource$Projects$Groups","metricDescriptors","Resource$Projects$Metricdescriptors","monitoredResourceDescriptors","Resource$Projects$Monitoredresourcedescriptors","notificationChannelDescriptors","Resource$Projects$Notificationchanneldescriptors","notificationChannels","Resource$Projects$Notificationchannels","timeSeries","Resource$Projects$Timeseries","uptimeCheckConfigs","Resource$Projects$Uptimecheckconfigs","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","members","Resource$Projects$Groups$Members","serviceLevelObjectives","Resource$Services$Servicelevelobjectives"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.monitoring_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar monitoring_v3;\n(function (monitoring_v3) {\n    /**\n     * Cloud Monitoring API\n     *\n     * Manages your Cloud Monitoring data and configurations. Most projects must be associated with a Workspace, with a few exceptions as noted on the individual method pages. The table entries below are presented in alphabetical order, not in order of common use. For explanations of the concepts found in the table entries, read the Cloud Monitoring documentation.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const monitoring = google.monitoring('v3');\n     * ```\n     */\n    class Monitoring {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.projects = new Resource$Projects(this.context);\n            this.services = new Resource$Services(this.context);\n            this.uptimeCheckIps = new Resource$Uptimecheckips(this.context);\n        }\n    }\n    monitoring_v3.Monitoring = Monitoring;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.alertPolicies = new Resource$Projects$Alertpolicies(this.context);\n            this.collectdTimeSeries = new Resource$Projects$Collectdtimeseries(this.context);\n            this.groups = new Resource$Projects$Groups(this.context);\n            this.metricDescriptors = new Resource$Projects$Metricdescriptors(this.context);\n            this.monitoredResourceDescriptors = new Resource$Projects$Monitoredresourcedescriptors(this.context);\n            this.notificationChannelDescriptors = new Resource$Projects$Notificationchanneldescriptors(this.context);\n            this.notificationChannels = new Resource$Projects$Notificationchannels(this.context);\n            this.timeSeries = new Resource$Projects$Timeseries(this.context);\n            this.uptimeCheckConfigs = new Resource$Projects$Uptimecheckconfigs(this.context);\n        }\n    }\n    monitoring_v3.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Alertpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/alertPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/alertPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Alertpolicies = Resource$Projects$Alertpolicies;\n    class Resource$Projects$Collectdtimeseries {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/collectdTimeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Collectdtimeseries = Resource$Projects$Collectdtimeseries;\n    class Resource$Projects$Groups {\n        constructor(context) {\n            this.context = context;\n            this.members = new Resource$Projects$Groups$Members(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Groups = Resource$Projects$Groups;\n    class Resource$Projects$Groups$Members {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Groups$Members = Resource$Projects$Groups$Members;\n    class Resource$Projects$Metricdescriptors {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/metricDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/metricDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Metricdescriptors = Resource$Projects$Metricdescriptors;\n    class Resource$Projects$Monitoredresourcedescriptors {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/monitoredResourceDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Monitoredresourcedescriptors = Resource$Projects$Monitoredresourcedescriptors;\n    class Resource$Projects$Notificationchanneldescriptors {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/notificationChannelDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Notificationchanneldescriptors = Resource$Projects$Notificationchanneldescriptors;\n    class Resource$Projects$Notificationchannels {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/notificationChannels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getVerificationCode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}:getVerificationCode').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/notificationChannels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sendVerificationCode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}:sendVerificationCode').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        verify(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}:verify').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Notificationchannels = Resource$Projects$Notificationchannels;\n    class Resource$Projects$Timeseries {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        query(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}/timeSeries:query').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Timeseries = Resource$Projects$Timeseries;\n    class Resource$Projects$Uptimecheckconfigs {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+parent}/uptimeCheckConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+parent}/uptimeCheckConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Projects$Uptimecheckconfigs = Resource$Projects$Uptimecheckconfigs;\n    class Resource$Services {\n        constructor(context) {\n            this.context = context;\n            this.serviceLevelObjectives = new Resource$Services$Servicelevelobjectives(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+parent}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+parent}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Services = Resource$Services;\n    class Resource$Services$Servicelevelobjectives {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+parent}/serviceLevelObjectives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+parent}/serviceLevelObjectives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Services$Servicelevelobjectives = Resource$Services$Servicelevelobjectives;\n    class Resource$Uptimecheckips {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v3/uptimeCheckIps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    monitoring_v3.Resource$Uptimecheckips = Resource$Uptimecheckips;\n})(monitoring_v3 = exports.monitoring_v3 || (exports.monitoring_v3 = {}));\n//# sourceMappingURL=v3.js.map"]},"metadata":{},"sourceType":"script"}