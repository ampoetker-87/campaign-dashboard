{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar child_process_1 = require(\"child_process\");\n\nvar fs = require(\"fs\");\n\nvar gcpMetadata = require(\"gcp-metadata\");\n\nvar os = require(\"os\");\n\nvar path = require(\"path\");\n\nvar crypto_1 = require(\"../crypto/crypto\");\n\nvar isbrowser_1 = require(\"../isbrowser\");\n\nvar messages = require(\"../messages\");\n\nvar transporters_1 = require(\"../transporters\");\n\nvar computeclient_1 = require(\"./computeclient\");\n\nvar envDetect_1 = require(\"./envDetect\");\n\nvar jwtclient_1 = require(\"./jwtclient\");\n\nvar refreshclient_1 = require(\"./refreshclient\");\n\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\n\nvar GoogleAuth = /*#__PURE__*/function () {\n  function GoogleAuth(opts) {\n    _classCallCheck(this, GoogleAuth);\n\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined; // To save the contents of the JSON credential file\n\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  } // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n\n\n  _createClass(GoogleAuth, [{\n    key: \"getDefaultProjectId\",\n    value: function getDefaultProjectId(callback) {\n      messages.warn(messages.DEFAULT_PROJECT_ID_DEPRECATED);\n\n      if (callback) {\n        this.getProjectIdAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getProjectIdAsync();\n      }\n    }\n  }, {\n    key: \"getProjectId\",\n    value: function getProjectId(callback) {\n      if (callback) {\n        this.getProjectIdAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getProjectIdAsync();\n      }\n    }\n  }, {\n    key: \"getProjectIdAsync\",\n    value: function getProjectIdAsync() {\n      var _this = this;\n\n      if (this._cachedProjectId) {\n        return Promise.resolve(this._cachedProjectId);\n      } // In implicit case, supports three environments. In order of precedence,\n      // the implicit environments are:\n      // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n      // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n      // - Cloud SDK: `gcloud config config-helper --format json`\n      // - GCE project ID from metadata server)\n\n\n      if (!this._getDefaultProjectIdPromise) {\n        this._getDefaultProjectIdPromise = new Promise(function (resolve, reject) {\n          return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var projectId;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.t2 = this.getProductionProjectId();\n\n                    if (_context.t2) {\n                      _context.next = 6;\n                      break;\n                    }\n\n                    _context.next = 5;\n                    return this.getFileProjectId();\n\n                  case 5:\n                    _context.t2 = _context.sent;\n\n                  case 6:\n                    _context.t1 = _context.t2;\n\n                    if (_context.t1) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    _context.next = 10;\n                    return this.getDefaultServiceProjectId();\n\n                  case 10:\n                    _context.t1 = _context.sent;\n\n                  case 11:\n                    _context.t0 = _context.t1;\n\n                    if (_context.t0) {\n                      _context.next = 16;\n                      break;\n                    }\n\n                    _context.next = 15;\n                    return this.getGCEProjectId();\n\n                  case 15:\n                    _context.t0 = _context.sent;\n\n                  case 16:\n                    projectId = _context.t0;\n                    this._cachedProjectId = projectId;\n                    resolve(projectId);\n                    _context.next = 24;\n                    break;\n\n                  case 21:\n                    _context.prev = 21;\n                    _context.t3 = _context[\"catch\"](0);\n                    reject(_context.t3);\n\n                  case 24:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this, [[0, 21]]);\n          }));\n        });\n      }\n\n      return this._getDefaultProjectIdPromise;\n    }\n  }, {\n    key: \"getApplicationDefault\",\n    value: function getApplicationDefault() {\n      var optionsOrCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      var options;\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n\n      if (callback) {\n        this.getApplicationDefaultAsync(options).then(function (r) {\n          return callback(null, r.credential, r.projectId);\n        }, callback);\n      } else {\n        return this.getApplicationDefaultAsync(options);\n      }\n    }\n  }, {\n    key: \"getApplicationDefaultAsync\",\n    value: function getApplicationDefaultAsync(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var credential, projectId, isGCE;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.cachedCredential) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.t0 = this.cachedCredential;\n                _context2.next = 4;\n                return this.getProjectIdAsync();\n\n              case 4:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: _context2.t0,\n                  projectId: _context2.t1\n                });\n\n              case 6:\n                _context2.next = 8;\n                return this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n\n              case 8:\n                credential = _context2.sent;\n\n                if (!credential) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                if (credential instanceof jwtclient_1.JWT) {\n                  credential.scopes = this.scopes;\n                }\n\n                this.cachedCredential = credential;\n                _context2.next = 14;\n                return this.getProjectId();\n\n              case 14:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential,\n                  projectId\n                });\n\n              case 16:\n                _context2.next = 18;\n                return this._tryGetApplicationCredentialsFromWellKnownFile(options);\n\n              case 18:\n                credential = _context2.sent;\n\n                if (!credential) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                if (credential instanceof jwtclient_1.JWT) {\n                  credential.scopes = this.scopes;\n                }\n\n                this.cachedCredential = credential;\n                _context2.next = 24;\n                return this.getProjectId();\n\n              case 24:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential,\n                  projectId\n                });\n\n              case 26:\n                _context2.prev = 26;\n                _context2.next = 29;\n                return this._checkIsGCE();\n\n              case 29:\n                isGCE = _context2.sent;\n                _context2.next = 35;\n                break;\n\n              case 32:\n                _context2.prev = 32;\n                _context2.t2 = _context2[\"catch\"](26);\n                throw new Error('Unexpected error determining execution environment: ' + _context2.t2.message);\n\n              case 35:\n                if (isGCE) {\n                  _context2.next = 37;\n                  break;\n                }\n\n                throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n\n              case 37:\n                // For GCE, just return a default ComputeClient. It will take care of\n                // the rest.\n                this.cachedCredential = new computeclient_1.Compute(options);\n                _context2.next = 40;\n                return this.getProjectId();\n\n              case 40:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  projectId,\n                  credential: this.cachedCredential\n                });\n\n              case 42:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[26, 32]]);\n      }));\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n\n  }, {\n    key: \"_checkIsGCE\",\n    value: function _checkIsGCE() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.checkIsGCE === undefined)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 3;\n                return gcpMetadata.isAvailable();\n\n              case 3:\n                this.checkIsGCE = _context3.sent;\n\n              case 4:\n                return _context3.abrupt(\"return\", this.checkIsGCE);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n\n  }, {\n    key: \"_tryGetApplicationCredentialsFromEnvironmentVariable\",\n    value: function _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var credentialsPath;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n\n                if (!(!credentialsPath || credentialsPath.length === 0)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 3:\n                _context4.prev = 3;\n                return _context4.abrupt(\"return\", this._getApplicationCredentialsFromFilePath(credentialsPath, options));\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](3);\n                throw this.createError('Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable.', _context4.t0);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 7]]);\n      }));\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n\n  }, {\n    key: \"_tryGetApplicationCredentialsFromWellKnownFile\",\n    value: function _tryGetApplicationCredentialsFromWellKnownFile(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var location, home, client;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // First, figure out the location of the file, depending upon the OS type.\n                location = null;\n\n                if (this._isWindows()) {\n                  // Windows\n                  location = process.env['APPDATA'];\n                } else {\n                  // Linux or Mac\n                  home = process.env['HOME'];\n\n                  if (home) {\n                    location = this._pathJoin(home, '.config');\n                  }\n                } // If we found the root path, expand it.\n\n\n                if (location) {\n                  location = this._pathJoin(location, 'gcloud');\n                  location = this._pathJoin(location, 'application_default_credentials.json');\n                  location = this._mockWellKnownFilePath(location); // Check whether the file exists.\n\n                  if (!this._fileExists(location)) {\n                    location = null;\n                  }\n                } // The file does not exist.\n\n\n                if (location) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 5:\n                _context5.next = 7;\n                return this._getApplicationCredentialsFromFilePath(location, options);\n\n              case 7:\n                client = _context5.sent;\n                this.warnOnProblematicCredentials(client);\n                return _context5.abrupt(\"return\", client);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n\n  }, {\n    key: \"_getApplicationCredentialsFromFilePath\",\n    value: function _getApplicationCredentialsFromFilePath(filePath) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var readStream;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(!filePath || filePath.length === 0)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw new Error('The file path is invalid.');\n\n              case 2:\n                _context6.prev = 2;\n                // Resolve path to actual file in case of symlink. Expect a thrown error\n                // if not resolvable.\n                filePath = fs.realpathSync(filePath);\n\n                if (fs.lstatSync(filePath).isFile()) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                throw new Error();\n\n              case 6:\n                _context6.next = 11;\n                break;\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](2);\n                throw this.createError(\"The file at \".concat(filePath, \" does not exist, or it is not a file.\"), _context6.t0);\n\n              case 11:\n                _context6.prev = 11;\n                readStream = this._createReadStream(filePath);\n                return _context6.abrupt(\"return\", this.fromStream(readStream, options));\n\n              case 16:\n                _context6.prev = 16;\n                _context6.t1 = _context6[\"catch\"](11);\n                throw this.createError(\"Unable to read the file at \".concat(filePath, \".\"), _context6.t1);\n\n              case 19:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[2, 8], [11, 16]]);\n      }));\n    }\n    /**\n     * Credentials from the Cloud SDK that are associated with Cloud SDK's project\n     * are problematic because they may not have APIs enabled and have limited\n     * quota. If this is the case, warn about it.\n     */\n\n  }, {\n    key: \"warnOnProblematicCredentials\",\n    value: function warnOnProblematicCredentials(client) {\n      if (client.email === exports.CLOUD_SDK_CLIENT_ID) {\n        messages.warn(messages.PROBLEMATIC_CREDENTIALS_WARNING);\n      }\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json, options) {\n      var client;\n\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the Google auth settings.');\n      }\n\n      this.jsonContent = json;\n      options = options || {};\n\n      if (json.type === 'authorized_user') {\n        client = new refreshclient_1.UserRefreshClient(options);\n      } else {\n        options.scopes = this.scopes;\n        client = new jwtclient_1.JWT(options);\n      }\n\n      client.fromJSON(json);\n      return client;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream) {\n      var optionsOrCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      var options = {};\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n\n      if (callback) {\n        this.fromStreamAsync(inputStream, options).then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream, options);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream, options) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the Google auth settings.');\n        }\n\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            var data = JSON.parse(s);\n\n            var r = _this2.fromJSON(data, options);\n\n            return resolve(r);\n          } catch (err) {\n            return reject(err);\n          }\n        });\n      });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey, options) {\n      options = options || {};\n      var client = new jwtclient_1.JWT(options);\n      client.fromAPIKey(apiKey);\n      return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n\n  }, {\n    key: \"_isWindows\",\n    value: function _isWindows() {\n      var sys = this._osPlatform();\n\n      if (sys && sys.length >= 3) {\n        if (sys.substring(0, 3).toLowerCase() === 'win') {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Creates a file stream. Allows mocking.\n     * @api private\n     */\n\n  }, {\n    key: \"_createReadStream\",\n    value: function _createReadStream(filePath) {\n      return fs.createReadStream(filePath);\n    }\n    /**\n     * Gets the current operating system platform. Allows mocking.\n     * @api private\n     */\n\n  }, {\n    key: \"_osPlatform\",\n    value: function _osPlatform() {\n      return os.platform();\n    }\n    /**\n     * Determines whether a file exists. Allows mocking.\n     * @api private\n     */\n\n  }, {\n    key: \"_fileExists\",\n    value: function _fileExists(filePath) {\n      return fs.existsSync(filePath);\n    }\n    /**\n     * Joins two parts of a path. Allows mocking.\n     * @api private\n     */\n\n  }, {\n    key: \"_pathJoin\",\n    value: function _pathJoin(item1, item2) {\n      return path.join(item1, item2);\n    }\n    /**\n     * Allows mocking of the path to a well-known file.\n     * @api private\n     */\n\n  }, {\n    key: \"_mockWellKnownFilePath\",\n    value: function _mockWellKnownFilePath(filePath) {\n      return filePath;\n    } // Creates an Error containing the given message, and includes the message\n    // from the optional err passed in.\n\n  }, {\n    key: \"createError\",\n    value: function createError(message, err) {\n      var s = message || '';\n\n      if (err) {\n        var errorMessage = String(err);\n\n        if (errorMessage && errorMessage.length > 0) {\n          if (s.length > 0) {\n            s += ' ';\n          }\n\n          s += errorMessage;\n        }\n      }\n\n      return Error(s);\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n\n  }, {\n    key: \"getDefaultServiceProjectId\",\n    value: function getDefaultServiceProjectId() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", new Promise(function (resolve) {\n                  child_process_1.exec('gcloud config config-helper --format json', function (err, stdout, stderr) {\n                    if (!err && stdout) {\n                      try {\n                        var projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                      } catch (e) {// ignore errors\n                      }\n                    }\n\n                    resolve(null);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n\n  }, {\n    key: \"getProductionProjectId\",\n    value: function getProductionProjectId() {\n      return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n\n  }, {\n    key: \"getFileProjectId\",\n    value: function getFileProjectId() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var creds, r;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!this.cachedCredential) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this.cachedCredential.projectId);\n\n              case 2:\n                if (!this.keyFilename) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _context8.next = 5;\n                return this.getClient();\n\n              case 5:\n                creds = _context8.sent;\n\n                if (!(creds && creds.projectId)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", creds.projectId);\n\n              case 8:\n                _context8.next = 10;\n                return this._tryGetApplicationCredentialsFromEnvironmentVariable();\n\n              case 10:\n                r = _context8.sent;\n\n                if (!r) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", r.projectId);\n\n              case 15:\n                return _context8.abrupt(\"return\", null);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n\n  }, {\n    key: \"getGCEProjectId\",\n    value: function getGCEProjectId() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var r;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return gcpMetadata.project('project-id');\n\n              case 3:\n                r = _context9.sent;\n                return _context9.abrupt(\"return\", r);\n\n              case 7:\n                _context9.prev = 7;\n                _context9.t0 = _context9[\"catch\"](0);\n                return _context9.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[0, 7]]);\n      }));\n    }\n  }, {\n    key: \"getCredentials\",\n    value: function getCredentials(callback) {\n      if (callback) {\n        this.getCredentialsAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getCredentialsAsync();\n      }\n    }\n  }, {\n    key: \"getCredentialsAsync\",\n    value: function getCredentialsAsync() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var credential, isGCE, data;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.getClient();\n\n              case 2:\n                if (!this.jsonContent) {\n                  _context10.next = 5;\n                  break;\n                }\n\n                credential = {\n                  client_email: this.jsonContent.client_email,\n                  private_key: this.jsonContent.private_key\n                };\n                return _context10.abrupt(\"return\", credential);\n\n              case 5:\n                _context10.next = 7;\n                return this._checkIsGCE();\n\n              case 7:\n                isGCE = _context10.sent;\n\n                if (isGCE) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                throw new Error('Unknown error.');\n\n              case 10:\n                _context10.next = 12;\n                return gcpMetadata.instance({\n                  property: 'service-accounts/',\n                  params: {\n                    recursive: 'true'\n                  }\n                });\n\n              case 12:\n                data = _context10.sent;\n\n                if (!(!data || !data.default || !data.default.email)) {\n                  _context10.next = 15;\n                  break;\n                }\n\n                throw new Error('Failure from metadata server.');\n\n              case 15:\n                return _context10.abrupt(\"return\", {\n                  client_email: data.default.email\n                });\n\n              case 16:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    }\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n\n  }, {\n    key: \"getClient\",\n    value: function getClient(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var filePath, stream;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (options) {\n                  this.keyFilename = options.keyFilename || options.keyFile || this.keyFilename;\n                  this.scopes = options.scopes || this.scopes;\n                  this.jsonContent = options.credentials || this.jsonContent;\n                  this.clientOptions = options.clientOptions;\n                }\n\n                if (this.cachedCredential) {\n                  _context11.next = 18;\n                  break;\n                }\n\n                if (!this.jsonContent) {\n                  _context11.next = 8;\n                  break;\n                }\n\n                _context11.next = 5;\n                return this.fromJSON(this.jsonContent, this.clientOptions);\n\n              case 5:\n                this.cachedCredential = _context11.sent;\n                _context11.next = 18;\n                break;\n\n              case 8:\n                if (!this.keyFilename) {\n                  _context11.next = 16;\n                  break;\n                }\n\n                filePath = path.resolve(this.keyFilename);\n                stream = fs.createReadStream(filePath);\n                _context11.next = 13;\n                return this.fromStreamAsync(stream, this.clientOptions);\n\n              case 13:\n                this.cachedCredential = _context11.sent;\n                _context11.next = 18;\n                break;\n\n              case 16:\n                _context11.next = 18;\n                return this.getApplicationDefaultAsync(this.clientOptions);\n\n              case 18:\n                return _context11.abrupt(\"return\", this.cachedCredential);\n\n              case 19:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context12.sent;\n                _context12.next = 5;\n                return client.getAccessToken();\n\n              case 5:\n                return _context12.abrupt(\"return\", _context12.sent.token);\n\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n\n  }, {\n    key: \"getRequestHeaders\",\n    value: function getRequestHeaders(url) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context13.sent;\n                return _context13.abrupt(\"return\", client.getRequestHeaders(url));\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n\n  }, {\n    key: \"authorizeRequest\",\n    value: function authorizeRequest(opts) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var url, client, headers;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                opts = opts || {};\n                url = opts.url || opts.uri;\n                _context14.next = 4;\n                return this.getClient();\n\n              case 4:\n                client = _context14.sent;\n                _context14.next = 7;\n                return client.getRequestHeaders(url);\n\n              case 7:\n                headers = _context14.sent;\n                opts.headers = Object.assign(opts.headers || {}, headers);\n                return _context14.abrupt(\"return\", opts);\n\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // tslint:disable-next-line no-any\n\n  }, {\n    key: \"request\",\n    value: function request(opts) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context15.sent;\n                return _context15.abrupt(\"return\", client.request(opts));\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n\n  }, {\n    key: \"getEnv\",\n    value: function getEnv() {\n      return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(data) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var client, crypto, sign, projectId, creds, id, res;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context16.sent;\n                crypto = crypto_1.createCrypto();\n\n                if (!(client instanceof jwtclient_1.JWT && client.key && !isbrowser_1.isBrowser())) {\n                  _context16.next = 8;\n                  break;\n                }\n\n                sign = crypto.createSign('RSA-SHA256');\n                sign.update(data);\n                return _context16.abrupt(\"return\", sign.sign(client.key, 'base64'));\n\n              case 8:\n                _context16.next = 10;\n                return this.getProjectId();\n\n              case 10:\n                projectId = _context16.sent;\n\n                if (projectId) {\n                  _context16.next = 13;\n                  break;\n                }\n\n                throw new Error('Cannot sign data without a project ID.');\n\n              case 13:\n                _context16.next = 15;\n                return this.getCredentials();\n\n              case 15:\n                creds = _context16.sent;\n\n                if (creds.client_email) {\n                  _context16.next = 18;\n                  break;\n                }\n\n                throw new Error('Cannot sign data without `client_email`.');\n\n              case 18:\n                id = \"projects/\".concat(projectId, \"/serviceAccounts/\").concat(creds.client_email);\n                _context16.next = 21;\n                return this.request({\n                  method: 'POST',\n                  url: \"https://iam.googleapis.com/v1/\".concat(id, \":signBlob\"),\n                  data: {\n                    bytesToSign: crypto.encodeBase64StringUtf8(data)\n                  }\n                });\n\n              case 21:\n                res = _context16.sent;\n                return _context16.abrupt(\"return\", res.data.signature);\n\n              case 23:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: \"isGCE\",\n    get: function get() {\n      return this.checkIsGCE;\n    }\n  }]);\n\n  return GoogleAuth;\n}();\n/**\n * Export DefaultTransporter as a static property of the class.\n */\n\n\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\nexports.GoogleAuth = GoogleAuth;","map":{"version":3,"sources":["/Users/amandapoetker-alles/Desktop/campaign-dashboard/node_modules/google-auth-library/build/src/auth/googleauth.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","child_process_1","require","fs","gcpMetadata","os","path","crypto_1","isbrowser_1","messages","transporters_1","computeclient_1","envDetect_1","jwtclient_1","refreshclient_1","CLOUD_SDK_CLIENT_ID","GoogleAuth","opts","checkIsGCE","undefined","jsonContent","cachedCredential","_cachedProjectId","projectId","keyFilename","keyFile","scopes","credentials","clientOptions","callback","warn","DEFAULT_PROJECT_ID_DEPRECATED","getProjectIdAsync","r","_getDefaultProjectIdPromise","getProductionProjectId","getFileProjectId","getDefaultServiceProjectId","getGCEProjectId","optionsOrCallback","options","getApplicationDefaultAsync","credential","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","getProjectId","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","isGCE","Error","message","Compute","isAvailable","credentialsPath","process","env","length","_getApplicationCredentialsFromFilePath","createError","location","_isWindows","home","_pathJoin","_mockWellKnownFilePath","_fileExists","client","warnOnProblematicCredentials","filePath","realpathSync","lstatSync","isFile","readStream","_createReadStream","fromStream","email","PROBLEMATIC_CREDENTIALS_WARNING","json","type","UserRefreshClient","fromJSON","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","err","apiKey","fromAPIKey","sys","_osPlatform","substring","toLowerCase","createReadStream","platform","existsSync","item1","item2","join","errorMessage","String","exec","stdout","stderr","configuration","properties","core","project","getClient","creds","getCredentialsAsync","client_email","private_key","instance","property","params","recursive","default","stream","getAccessToken","token","url","getRequestHeaders","uri","headers","assign","request","getEnv","crypto","createCrypto","key","isBrowser","sign","createSign","update","getCredentials","id","method","bytesToSign","encodeBase64StringUtf8","res","signature","DefaultTransporter"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst isbrowser_1 = require(\"../isbrowser\");\nconst messages = require(\"../messages\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nclass GoogleAuth {\n    constructor(opts) {\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions;\n    }\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    getDefaultProjectId(callback) {\n        messages.warn(messages.DEFAULT_PROJECT_ID_DEPRECATED);\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return Promise.resolve(this._cachedProjectId);\n        }\n        // In implicit case, supports three environments. In order of precedence,\n        // the implicit environments are:\n        // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n        // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n        // - Cloud SDK: `gcloud config config-helper --format json`\n        // - GCE project ID from metadata server)\n        if (!this._getDefaultProjectIdPromise) {\n            this._getDefaultProjectIdPromise =\n                new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        const projectId = this.getProductionProjectId() ||\n                            (yield this.getFileProjectId()) ||\n                            (yield this.getDefaultServiceProjectId()) ||\n                            (yield this.getGCEProjectId());\n                        this._cachedProjectId = projectId;\n                        resolve(projectId);\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                }));\n        }\n        return this._getDefaultProjectIdPromise;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    getApplicationDefaultAsync(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // If we've already got a cached credential, just return it.\n            if (this.cachedCredential) {\n                return {\n                    credential: this.cachedCredential,\n                    projectId: yield this.getProjectIdAsync()\n                };\n            }\n            let credential;\n            let projectId;\n            // Check for the existence of a local environment variable pointing to the\n            // location of the credential file. This is typically used in local\n            // developer scenarios.\n            credential =\n                yield this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n            if (credential) {\n                if (credential instanceof jwtclient_1.JWT) {\n                    credential.scopes = this.scopes;\n                }\n                this.cachedCredential = credential;\n                projectId = yield this.getProjectId();\n                return { credential, projectId };\n            }\n            // Look in the well-known credential file location.\n            credential =\n                yield this._tryGetApplicationCredentialsFromWellKnownFile(options);\n            if (credential) {\n                if (credential instanceof jwtclient_1.JWT) {\n                    credential.scopes = this.scopes;\n                }\n                this.cachedCredential = credential;\n                projectId = yield this.getProjectId();\n                return { credential, projectId };\n            }\n            // Determine if we're running on GCE.\n            let isGCE;\n            try {\n                isGCE = yield this._checkIsGCE();\n            }\n            catch (e) {\n                throw new Error('Unexpected error determining execution environment: ' + e.message);\n            }\n            if (!isGCE) {\n                // We failed to find the default credentials. Bail out with an error.\n                throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n            }\n            // For GCE, just return a default ComputeClient. It will take care of\n            // the rest.\n            this.cachedCredential = new computeclient_1.Compute(options);\n            projectId = yield this.getProjectId();\n            return { projectId, credential: this.cachedCredential };\n        });\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    _checkIsGCE() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.checkIsGCE === undefined) {\n                this.checkIsGCE = yield gcpMetadata.isAvailable();\n            }\n            return this.checkIsGCE;\n        });\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n                process.env['google_application_credentials'];\n            if (!credentialsPath || credentialsPath.length === 0) {\n                return null;\n            }\n            try {\n                return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n            }\n            catch (e) {\n                throw this.createError('Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable.', e);\n            }\n        });\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // First, figure out the location of the file, depending upon the OS type.\n            let location = null;\n            if (this._isWindows()) {\n                // Windows\n                location = process.env['APPDATA'];\n            }\n            else {\n                // Linux or Mac\n                const home = process.env['HOME'];\n                if (home) {\n                    location = this._pathJoin(home, '.config');\n                }\n            }\n            // If we found the root path, expand it.\n            if (location) {\n                location = this._pathJoin(location, 'gcloud');\n                location =\n                    this._pathJoin(location, 'application_default_credentials.json');\n                location = this._mockWellKnownFilePath(location);\n                // Check whether the file exists.\n                if (!this._fileExists(location)) {\n                    location = null;\n                }\n            }\n            // The file does not exist.\n            if (!location) {\n                return null;\n            }\n            // The file seems to exist. Try to use it.\n            const client = yield this._getApplicationCredentialsFromFilePath(location, options);\n            this.warnOnProblematicCredentials(client);\n            return client;\n        });\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Make sure the path looks like a string.\n            if (!filePath || filePath.length === 0) {\n                throw new Error('The file path is invalid.');\n            }\n            // Make sure there is a file at the path. lstatSync will throw if there is\n            // nothing there.\n            try {\n                // Resolve path to actual file in case of symlink. Expect a thrown error\n                // if not resolvable.\n                filePath = fs.realpathSync(filePath);\n                if (!fs.lstatSync(filePath).isFile()) {\n                    throw new Error();\n                }\n            }\n            catch (err) {\n                throw this.createError(`The file at ${filePath} does not exist, or it is not a file.`, err);\n            }\n            // Now open a read stream on the file, and parse it.\n            try {\n                const readStream = this._createReadStream(filePath);\n                return this.fromStream(readStream, options);\n            }\n            catch (err) {\n                throw this.createError(`Unable to read the file at ${filePath}.`, err);\n            }\n        });\n    }\n    /**\n     * Credentials from the Cloud SDK that are associated with Cloud SDK's project\n     * are problematic because they may not have APIs enabled and have limited\n     * quota. If this is the case, warn about it.\n     */\n    warnOnProblematicCredentials(client) {\n        if (client.email === exports.CLOUD_SDK_CLIENT_ID) {\n            messages.warn(messages.PROBLEMATIC_CREDENTIALS_WARNING);\n        }\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options) {\n        let client;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the Google auth settings.');\n        }\n        this.jsonContent = json;\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n        }\n        client.fromJSON(json);\n        return client;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options)\n                .then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            let s = '';\n            inputStream.setEncoding('utf8')\n                .on('error', reject)\n                .on('data', (chunk) => s += chunk)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    const r = this.fromJSON(data, options);\n                    return resolve(r);\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = this._osPlatform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Creates a file stream. Allows mocking.\n     * @api private\n     */\n    _createReadStream(filePath) {\n        return fs.createReadStream(filePath);\n    }\n    /**\n     * Gets the current operating system platform. Allows mocking.\n     * @api private\n     */\n    _osPlatform() {\n        return os.platform();\n    }\n    /**\n     * Determines whether a file exists. Allows mocking.\n     * @api private\n     */\n    _fileExists(filePath) {\n        return fs.existsSync(filePath);\n    }\n    /**\n     * Joins two parts of a path. Allows mocking.\n     * @api private\n     */\n    _pathJoin(item1, item2) {\n        return path.join(item1, item2);\n    }\n    /**\n     * Allows mocking of the path to a well-known file.\n     * @api private\n     */\n    _mockWellKnownFilePath(filePath) {\n        return filePath;\n    }\n    // Creates an Error containing the given message, and includes the message\n    // from the optional err passed in.\n    createError(message, err) {\n        let s = message || '';\n        if (err) {\n            const errorMessage = String(err);\n            if (errorMessage && errorMessage.length > 0) {\n                if (s.length > 0) {\n                    s += ' ';\n                }\n                s += errorMessage;\n            }\n        }\n        return Error(s);\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    getDefaultServiceProjectId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise(resolve => {\n                child_process_1.exec('gcloud config config-helper --format json', (err, stdout, stderr) => {\n                    if (!err && stdout) {\n                        try {\n                            const projectId = JSON.parse(stdout).configuration.properties.core.project;\n                            resolve(projectId);\n                            return;\n                        }\n                        catch (e) {\n                            // ignore errors\n                        }\n                    }\n                    resolve(null);\n                });\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] ||\n            process.env['google_cloud_project'];\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    getFileProjectId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.cachedCredential) {\n                // Try to read the project ID from the cached credentials file\n                return this.cachedCredential.projectId;\n            }\n            // Ensure the projectId is loaded from the keyFile if available.\n            if (this.keyFilename) {\n                const creds = yield this.getClient();\n                if (creds && creds.projectId) {\n                    return creds.projectId;\n                }\n            }\n            // Try to load a credentials file and read its project ID\n            const r = yield this._tryGetApplicationCredentialsFromEnvironmentVariable();\n            if (r) {\n                return r.projectId;\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    getGCEProjectId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const r = yield gcpMetadata.project('project-id');\n                return r;\n            }\n            catch (e) {\n                // Ignore any errors\n                return null;\n            }\n        });\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    getCredentialsAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getClient();\n            if (this.jsonContent) {\n                const credential = {\n                    client_email: this.jsonContent.client_email,\n                    private_key: this.jsonContent.private_key\n                };\n                return credential;\n            }\n            const isGCE = yield this._checkIsGCE();\n            if (!isGCE) {\n                throw new Error('Unknown error.');\n            }\n            // For GCE, return the service account details from the metadata server\n            // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n            // The GCF metadata server doesn't respect querystring params if this / is\n            // not included.\n            const data = yield gcpMetadata.instance({ property: 'service-accounts/', params: { recursive: 'true' } });\n            if (!data || !data.default || !data.default.email) {\n                throw new Error('Failure from metadata server.');\n            }\n            return { client_email: data.default.email };\n        });\n    }\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n    getClient(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (options) {\n                this.keyFilename =\n                    options.keyFilename || options.keyFile || this.keyFilename;\n                this.scopes = options.scopes || this.scopes;\n                this.jsonContent = options.credentials || this.jsonContent;\n                this.clientOptions = options.clientOptions;\n            }\n            if (!this.cachedCredential) {\n                if (this.jsonContent) {\n                    this.cachedCredential =\n                        yield this.fromJSON(this.jsonContent, this.clientOptions);\n                }\n                else if (this.keyFilename) {\n                    const filePath = path.resolve(this.keyFilename);\n                    const stream = fs.createReadStream(filePath);\n                    this.cachedCredential =\n                        yield this.fromStreamAsync(stream, this.clientOptions);\n                }\n                else {\n                    yield this.getApplicationDefaultAsync(this.clientOptions);\n                }\n            }\n            return this.cachedCredential;\n        });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    getAccessToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = yield this.getClient();\n            return (yield client.getAccessToken()).token;\n        });\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    getRequestHeaders(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = yield this.getClient();\n            return client.getRequestHeaders(url);\n        });\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    authorizeRequest(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            opts = opts || {};\n            const url = opts.url || opts.uri;\n            const client = yield this.getClient();\n            const headers = yield client.getRequestHeaders(url);\n            opts.headers = Object.assign(opts.headers || {}, headers);\n            return opts;\n        });\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // tslint:disable-next-line no-any\n    request(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = yield this.getClient();\n            return client.request(opts);\n        });\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n    sign(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = yield this.getClient();\n            const crypto = crypto_1.createCrypto();\n            if (client instanceof jwtclient_1.JWT && client.key && !isbrowser_1.isBrowser()) {\n                const sign = crypto.createSign('RSA-SHA256');\n                sign.update(data);\n                return sign.sign(client.key, 'base64');\n            }\n            const projectId = yield this.getProjectId();\n            if (!projectId) {\n                throw new Error('Cannot sign data without a project ID.');\n            }\n            const creds = yield this.getCredentials();\n            if (!creds.client_email) {\n                throw new Error('Cannot sign data without `client_email`.');\n            }\n            const id = `projects/${projectId}/serviceAccounts/${creds.client_email}`;\n            const res = yield this.request({\n                method: 'POST',\n                url: `https://iam.googleapis.com/v1/${id}:signBlob`,\n                data: { bytesToSign: crypto.encodeBase64StringUtf8(data) }\n            });\n            return res.data.signature;\n        });\n    }\n}\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\nexports.GoogleAuth = GoogleAuth;\n//# sourceMappingURL=googleauth.js.map"]},"metadata":{},"sourceType":"script"}